                         1     ^Z80^
                         2     
                         3     NAME ^Rev 06.1 - TF^
                         4     
                         5     ;    Project:  EOS 6 Absolute Listing
                         6     ;
                         7     ;     ***********************************************************
                         8     ;     ****                                                   ****
                         9     ;     ****   EOS ABSOLUTE LISTING                            ****
                         10    ;     ****                                                   ****
                         11    ;     ****  Electronic Development Group                     ****
                         12    ;     ****              Coleco Industries Inc.               ****
                         13    ;     ****               999 Quaker Lane South               ****
                         14    ;     ****               West Hardford, Connecticut          ****
                         15    ;     ****                                  06110            ****
                         16    ;     ****                                                   ****
                         17    ;     ***********************************************************
                         18    ;
                         19    ;      This absolute listing was generated to ease software
                         20    ;      development on ADAM.   This listing provides the location
                         21    ;      of both released and unreleased entry points.  Released
                         22    ;      entry points begin immediately in this file with the  jump
                         23    ;      table and end before the first code segment listed.
                         24    ;      Released entry points include the jump table, common  data
                         25    ;      areas(EOSCOMN),  common data tables, and equates which
                         26    ;      describe the released data structures.  Direct access
                         27    ;      to code segments is STRONGLY DISCOURAGED and may make
                         28    ;      your application incompatable with some ADAMs.  there  is
                         29    ;      more than one version of EOS on the market at this  time
                         30    ;      and updates are planned.
                         31    ;
                         32    ;      For further information on ADAM or EOS consult the
                         33    ;      ADAM Technical Reference Manual or send your questions
                         34    ;      in writing to:
                         35    ;
                         36    ;                       Coleco Software Suppot
                         37    ;
                         38    ;      at the above address.
                         39    ;
                         40    ;  COLECO MAKES NO REPRESENTATIONS OR WARRANTIES WHATSOEVER,  INCLUDING
                         41    ;  WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR MERCHANTABILITY  AND
                         42    ;  FITNESS FOR A PARTICULAR PURPOSE, IN CONNECTION WITH THE  MATERIALS
                         43    ;  CONTAINED HEREIN, AND SUCH MATERIALS ARE DISCLOSED AS IS.   COLECO
                         44    ;  SHALL HAVE NO LIABILITY FOR ANY LOSSES CAUSED TO RECIPIENTS  OF THESE
                         45    ;  MATERIALS BY REASON OF ANY CHANGES OR MODIFICATIONS MADE  BY COLECO  IN
                         46    ;  THESE MATERIALS AFTER THEIR DISCLOSURE HEREIN.  IN ADDITION,  COLECO
                         47    ;  SHALL HAVE NO LIABILITY FOR ANY CONSEQUENTIAL, SPECIAL, INDIRECT  OR
                         48    ;  INCIDENTAL DAMAGES OR LOSSES WHATSOEVER, INCLUDING LOSS OF  PROFITS,  IN
                         49    ;  CONNECTION WITH THE USE OF THE MATERIALS DISCLOSED HEREIN.
                         50    ;
                         51    ;*********************************************************************************
                         52    ;
                         53    ;       Rev History
                         54    ;       Rev.  Date        Name       Change
                         55    ;        6.1  21jun0844   af        Merge sources for absolute listing.
                         56    ;                                   No changes made to code.
                         57    ;        6.0  08oct 1545   jlk      Code released for production.
                         58    ;
                         59    ;[    code commented out by ¢;@***’was removed before EOS  ]
                         60    ;[ was grouped into one file, code commented out by simple ]
                         61    ;[ ';' was removed in the process of grouping E0S in order ]
                         62    ;[ to avoid assembier complaints  or LOCAL/GLOBAL conflicts]
                         63    ;[    @;********...’ generates code segments which were    ]
                         64    ;[ originally in separate files                            ]
                         65    ;*********************************************************************************
                         66    ;*********************************************************************************
                         67    ;*********************************************************************************
                         68    ;
                         69    NAME ^Rev 11 - RPD^
                         70    ;
                         71    ; Rev  Date          Made by    Change
                         72    ;  11   1Soct425p     RPD        changed E0S_4 to CV_A
                         73    ;  10   13oct1000p    RPD        made only OS7 jump entries conditionally assembled
                         74    ;   9   12oct2300     vsb        Added __POSIT_FILE,  __FILE_QUERY plus EOS1 thru EOS4
                         75    ;   8   07oct1710     rfj        __EFXOVER changed to _EFFECT _0VER
                         76    ;                                Added _UPDATE_SPINNER
                         77    ;   7   05oct1725     rtj        Renamed WRSPR_NM_TBL  to WR_SPR_ATTRIBUTE
                         78    ;   6   03oct1207     rtj        Increased TEMP_STACK to  12bytes,
                         79    ;                                Removed SAVED_COUNT
                         80    ;   &   30sept825p    RPD        replaced CONSOUT  data area with new CONSOUT2
                         81    ;   4   29sept235p    RPD        replaced PLAYSONGS  with SOUNDS
                         82    ;   3   26sept1005a   RPD        added conditional assembly stuff for super  games
                         83    ;   2   25sept850a    RPD        merged all of EOS ram together into this file
                         84    ;   1   20sept1005a   RPD        new memory mapping
                         85    ;   0   mid-sept      VB         original map @  E8000H
                         86    ;
              <FFFF>     87    TRUE                 EQU   0FFFFH                         
              <0000>     88    FALSE                EQU   00000H                         
                         89    
              <FFFF>     90    IN_EOS               EQU   TRUE                           
              <0000>     91    SUPERGAME            EQU   FALSE                          
                         92    ;
                         93    ; CURRENT EOS MEMORY MAPPING
                         94    ;
                         95    ;FCB_S         EQU     0D390H                  ;FCB area
                         96    ;THREE1K_BLKS  EQU     00400H                  ;3 FCB 1K buffers
              <E000>     97    EOSCODE              EQU   0E000H                         ;address of EOS code segment
              <FBFF>     98    EOS_GLBTBL           EQU   0FBFFH                         ;address of EOS global tables
              <FC30>     99    EOS_UMP_TBL          EQU   0FC30H                         ;address of EOS jump table
              <F060>     100   EOSGL_RAM            EQU   0FD60H                         ;address of EOS global data  area
              <FEC0>     101   EOSPCB_OCB           EQU   0FEC0H                         ;address of EOS PCB/DCB areas
                         102   
                         103   ;
                         104   ;  These are key record sizes, used  invarious EOS routines.
                         105   ;  See “INCLUDE FMGR_EQUS* AND “INCLUDE P_DCB_EQU* for details.
                         106   ;
                         107   
              <001A>     108   DIR_ENT_LENGTH       DEFL  26                             
              <0004>     109   P_SIZE               DEFL  4                              ;THE NUMBER OF BYTES IN THE PCB
              <0015>     110   DSIZE                DEFL  21                             ;THE NUMBER OF BYTES  INTHE DCB
                         111   ;
                         112   ;
                         113   ;
                         114   ;  jump table area
                         115   ;
                         116   ; *********************************************************
                         117   
                         118                        ORG   EOS_JMP_TBL                    
                         119   
                         120   ; *********************************************************
                         121   
              <FC30>     122   _EOS_START           EQU   $                              
   FC30  C3F832          123                        JP    __EOS_START                    
              <FC33>     124   _CONS_DISP           EQU   $                              
   FC33  C3F627          125                        JP    __CONS_DISP                    
              <FC36>     126   _CONS_INIT           EQU   $                              
   FC36  C3F50C          127                        JP    __CONS_INIT                    
              <FC39>     128   _CONS_OUT            EQU   $                              
   FC39  C3F60A          129                        JP    __CONS_OUT                     
              <FC3C>     130   _DLY_AFT_HRD_RES     EQU   $                              
   FC3C  C3F05F          131                        JP    __DLY_AFT_HRD_RES              
              <FC3F>     132   _END_PR_BUFF         EQU   $                              
   FC3F  C3F588          133                        JP    __END_PR_BUFF                  
              <FC42>     134   _ENDPR_CH            EQU   $                              
   FC42  C3F57C          135                        JP    __END_PR_CH                    
              <FC45>     136   _END_RD_1_BLOCK      EQU   $                              
   FC45  C3FAE2          137                        JP    __END_RD_1_BLOCK               
              <FC46>     138   _END_RD_CH_DEV       EQU   $                              
   FC48  C3FBA5          139                        JP    __END_RD_CH_DEV                
              <FC4B>     140   _END_RD_KBD          EQU   $                              
   FC4B  C3F4E0          141                        JP    __END_RD_KBD                   
              <FC4E>     142   _END_WR_1_BLOCK      EQU   $                              
   FC4E  C3FB1B          143                        JP    __END_WR_1 BLOCK               
              <FCS1>     144   _END_WR_CH_DEV       EQU   $                              
   FC51  C3FBE1          145                        JP    __END_WR_CH_DEV                
              <FC54>     146   _FIND_DCB            EQU   $                              
   FC54  C3F446          147                        JP    __FIND_DCB                     
              <FCS7>     148   _GET_DCB_ADDR        EQU   $                              
   FC57  C3F446          149                        JP    __GET_DCB_ADDR                 
              <FCSA>     150   _GET_PCB_ADDR        EQU   $                              
   FC5A  C3FA4C          151                        JP    __GET_PCB_ADDR                 
              <FCSD>     152   _HARD_INIT           EQU   $                              
   FC50  C3F8F6          153                        JP    __HARD_INIT                    
              <FC60>     154   _HARD_RESET_NET      EQU   $                              
   FC60  C3F948          155                        JP    __HARD_RESET_NET               
              <FC63>     156   _PR_BUFF             EQU   $                              
   FC63  C3F515          157                        JP    __PR_BUFF                      
              <FC66>     158   _PR_CH               EQU   $                              
   FC66  C3F4FC          159                        JP    __PR_CH                        
              <FC69>     160   _RD_1_BLOCK          EQU   $                              
   FC69  C3FA9E          161                        JP    __RD_1_BLOCK                   
              <FC6C>     162   _RD_KBD              EQU   $                              
   FC6C  C3F4BA          163                        JP    __RD_KBD                       
              <FC6F>     164   _RD_KBD_RET_CODE     EQU   $                              
   FC6F  C3FA7B          165                        JP    __RD_KBD_RET_CODE              
              <FC72>     166   _RD_PR_RET_CODE      EQU   $                              
   FC72  C3FA7F          167                        JP    __RD_PR_RET_CODE               
              <FC75>     168   _RD_RET_CODE         EQU   $                              
   FC75  C3FA82          169                        JP    __RD_RET_CODE                  
              <FC78>     170   _RD_TAPE_RET_CODE    EQU   $                              
   FC78  C3FAB3          171                        JP    __RD_TAPERET  CODE             
              <FC78>     172   _RELOC_PCB           EQU   $                              
   FC7B  C3FA2F          173                        JP    __RELOC_PCB                    
              <FC7E>     174   _REQUEST_STATUS      EQU   $                              
   FC7E  C3F473          175                        JP    __REQUEST_STATUS               
              <FC81>     176   _REQ_KBO_STAT        EQU   $                              
   FC81  C3F4CB          177                        JP    __REQ_KBD_STAT                 
              <FCB4>     178   _REQ_PR_STAT         EQU   $                              
   FC84  C3F5D2          179                        JP    __REQ_PR_STAT                  
              <FC87>     180   _REQ_TAPE_STAT       EQU   $                              
   FC87  C3F507          181                        JP    __REQ_TAPE STAT                
              <FCBA>     182   _SCAN_ACTIVE         EQU   $                              
   FC8A  C3F9CB          183                        JP    __SCAN_ACTIVE                  
              <FC8D>     184   _SOFT_INIT           EQU   $                              
   FC8D  C3F922          185                        JP    __SOFT_INIT                    
              <FC90>     186   _SOFT_RES_DEV        EQU   $                              
   FC90  C3FA5D          187                        JP    __SOFT_RES_DEV                 
              <FC93>     188   _SOFT_RES_KBD        EQU   $                              
   FC93  C3FA51          189                        JP    __SOFT_RES_KBD                 
              <FC96>     190   _SOFT_RES_PR         EQU   $                              
   FC96  C3FA55          191                        JP    __SOFT_RES_PR                  
              <FC99>     192   _SOFT_RES_TAPE       EQU   $                              
   FC99  C3FA59          193                        JP    __SOFT_RES_TAPE                
              <FCOC>     194   _START_PR_BUFF       EQU   $                              
   FC9C  C3F580          195                        JP    __START_PR_BUFF                
             <FC9OF>     196   _START_PR_CH         EQU   $                              
   FC0F  C3F560          197                        JP    __START_PR_CH                  
              <FCA2>     198   _START_RD_1_BLOCK    EQU   $                              
   FCA2  C3FAC6          199                        JP    __START_RD_1 BLOCK             
              <FCAS>     200   _START_RD_CH_DEV     EQU   $                              
   FCA5  C3FB86          201                        JP    __START_RD_CH_DEV              
              <FCA8>     202   _START_RD_KBD        EQU   $                              
   FCA8  C3F4D0          203                        JP    __START_RD_KBD                 
              <FCAB>     204   _START_WR_1_BLOCK    EQU   $                              
   FCAB  C3FAFF          205                        JP    __START_WR_1 BLOCK             
              <FCAE>     206   _START_WR_CHDEV      EQU   $                              
   FCAE  C3F8C2          207                        JP    __START_WR_CH DEV              
              <FCB1>     208   _SYNC                EQU   $                              
   FCB1  C3F970          209                        JP    __SYNC                         
              <FCB4>     210   _WR_1_BLOCK          EQU   $                              
   FCB4  C3FAB2          211                        JP    __WR_1_BLOCK                   
              <FCB7>     212   _WR_CH_DEV           EQU   $                              
   FCB7  C3F875          213                        JP    __WR_CH_DEV                    
                         214   
                         215   ;
                         216   ;FILE  MANAGER    ENTRIES
                         217   ;
              <FCBA>     218   _FMGR_INIT           EQU   $                              
   FCBA  C3EEEA          219                        JP    __FMGR_INIT                    
              <FCBD>     220   _INIT_TAPE_DIR       EQU   $                              
   FCBD  C3F323          221                        JP    __INIT_TAPE_DIR                
             <FCCOQ>     222   _OPEN_FILE           EQU   $                              
   FCC0  C3EA00          223                        JP    __ OPEN FILE                   
              <FCC3>     224   _CLOSE_FILE          EQU   $                              
   FCC3  C3EB04          225                        JP    __CLOSE_FILE                   
              <FCC6>     226   _RESET_FILE          EQU   $                              
   FCC6  C3EBEC          227                        JP    __RESET_FILE                   
              <FCC9>     228   _MAKE_FILE           EQU   $                              
   FCC9  C3E690          229                        JP    __MAKE_FILE                    
              <FCCC>     230   _QUERY_FILE          EQU   $                              
   FCCC  C3E61B          231                        JP    __QUERY_FILE                   
              <FCCF>     232   _SET_FILE            EQU   $                              
   FCCF  C3E651          233                        JP    __SET_FILE                     
              <FCD2>     234   _READ_FILE           EQU   $                              
   FCD2  C3EC17          235                        JP    __READ_FILE                    
              <FCD5>     236   _WRITE_FILE          EQU   $                              
   FCD5  C3ED5F          237                        JP    __WRITE_FILE                   
              <FCD8>     238   _SET_DATE            EQU   $                              
   FCD8  C3EEC5          239                        JP    __SET_DATE                     
              <FCDB>     240   _GET_DATE            EQU   $                              
   FC0B  C3EED4          241                        JP    __GET_DATE                     
              <FCDE>     242   _RENAME_FILE         EQU   $                              
   FCDE  C3F10F          243                        JP    __RENAME_FILE                  
              <FCE1>     244   _DELETE_FILE         EQU   $                              
   FCE1  C3F14E          245                        JP    __DELETE_FILE                  
              <FCE4>     246   _RO_DEV_DEP_STAT     EQU   $                              
   FCE4  C3F488          247                        JP    __RD_DEV_DEP_STAT              
              <FCE7>     248   _GOTO_WP             EQU   $                              
   FCE7  C3FA94          249                        JP    __GOTO_WP                      
              <FCEA>     250   _READ_EOS            EQU   $                              
   FCEA  C3FA9D          251                        JP    __READ_EOS                     
              <FCED>     252   _TRIM_FILE           EQU   $                              
   FCED  C3F241          253                        JP    __TRIM_FILE                    
              <FCFO>     254   _CHECK_FCB           EQU   $                              
   FCF0  C3F089          255                        JP    __CHECK_FCB                    
              <FCF3>     256   _READ_BLOCK          EQU   $                              
   FCF3  C3F178          257                        JP    __READ_BLOCK                   
              <FCFE>     258   _WRITE_BLOCK         EQU   $                              
   FCF6  C3F1E6          259                        JP    __WRITE_BLOCK                  
              <FCF9>     260   _MODE_CHECK          EQU   $                              
   FCF9  C3F0D5          261                        JP    __MODE_CHECK                   
              <FCFC>     262   _SCAN_FOR_FILE       EQU   $                              
   FCFC  C3EF05          263                        JP    __SCAN_FOR_FILE                
              <FCFF>     264   _FILE_QUERY          EQU   $                              
   FCFF  C3E618          265                        JP    __FILE_QUERY                   
              <fDO2>     266   _POSIT_FILE          EQU   ¢$                             
   F002  C3F442          267                        JP    __POSIT_FILE                   
              <FDOS>     268   _EOS_1               EQU   $                              
   FD05  C3F442          269                        JP    __EOS_1                        
              <FDO8>     270   _EOS_2               EQU   $                              
   F005  C3F442          271                        JP    __EOS_2                        
              <FOO8>     272   _EOS_3               EQU   $                              
   FD0B  C3F442          273                        JP    __EOS_3                        
              <FDOE>     274   _CV_A                EQU   $                              
   FD0E  C3F442          275                        JP    _CV_A                          
                         276   
              <FD11>     277   _PORT_COLLECTION     EQU   $                              
   FD11  C3E191          278                        JP    __PORT_COLLECTION              
              <FD14>     279   _SWITCH_MEM          EQU   $                              
   F014  C3E185          280                        JP    __SWITCH_MEM                   
              <FDI7>     281   _PUT_ASCII           EQU   $                              
   F017  C3E153          282                        JP    __PUT_ASCII                    
                         283   
                         284   ;
                         285   ; micro  OS7 entries
                         286   ;
                         287   
              <FD1A>     288   WRITE_VRAM           EQU                                  
   F01A  C3E000          289                        JP    __WRITE_VRAM                   
              <FD1D>     290   READ_VRAM            EQU                                  
   FD1D  C3E01A          291                        JP    __READ_VRAM                    
              <FD20>     292   WRITE_REGISTER       EQU                                  
   FD20  C3E034          293                        JP    __WRITE_REGISTER               
              <FD23>     294   READREGISTER         EQU                                  
   FD23  C3E04F          295                        JP    __READ_REGISTER                
              <FO26>     296   FILL_VRAM            EQU                                  
   F026  C3E059          297                        JP    __FILL_VRAM                    
              <FD29>     298   INIT_TABLE           EQU                                  
   F029  C3E066          299                        JP    __INIT_TABLE                   
              <FD2C>     300   PUT_VRAM             EQU                                  
   F02C  C3E0C5          301                        JP    __PUT_VRAM                     
              <FD2F>     302   GET_VRAM             EQU                                  
   F02F  C3E0CF          303                        JP    __GET_VRAM                     
              <FD32>     304   CALC_OFFSET          EQU                                  
   FD32  C3E10A          305                        JP    __CALC_OFFSET                  
              <FD35>     306   PX_TO_PTRN_POS       EQU                                  
   FD35  C3E129          307                        JP    __PX_TO_PTRN_POS               
              <FD38>     308   LOAD_ASCII           FQU                                  
   FD36  C3E149          309                        JP    __LOAD_ASCII                   
              <FD3B>     310   WR_SPR_ATTRIBUTE     EQU                                  
   FD3B  C3E1C5          311                        JP    __WR_SPR_ATTRIBUTE             
              <FDIE>     312   POLLER               EQU                                  
   FD3E  C3E253          313                        JP    __POLLER                       
             <FD041>     314   UPDATE_SPINNER       EQU                                  
   FD41  C3E2A4          315                        JP    __UPDATE_SPINNER               
              <FD44>     316   DECLSN               EQU                                  
   F044  C3E355          317                        JP    __DECLSN                       
              <FD47>     318   DECMSN               EQU   $                              
   F047  C3E35F          319                        JP    __DECMSN                       
              <FD4A>     320   MSNTOLSN             EQU   $                              
   FD4A  C3E369          321                        JP    __MSNTOLSN                     
              <FD4D>     322   ADDS_16              EQU   $                              
   F040  C3E374          323                        JP    __ADDS_16                      
              <FD50>     324   SOUND_INIT           EQU   $                              
   F050  C3E3AB          325                        JP    __SOUND_INIT                   
              <FD53>     326   TURN_OFF_SOUND       EQU   $                              
   F053  C3E301          327                        JP    __TURN OFF  SOUND              ;not globalized    in os7?
              <FD56>     328   PLAY_IT              EQU   $                              
   F056  C3E3E7          329                        JP    __PLAY_IT                      
              <FD59>     330   SOUNOS               EQU   $                              
   FD59  C3E406          331                        JP    __SOUNDS                       ;equals  calls  to  play songs   and  sound_man
              <FD5C>     332   EFFECT_OVER          EQU   $                              
   FD5C  C3E409          333                        JP    __EFFECT_OVER                  
                         334   
                         335   
                         336   ;  NOTE:   See  INTERRUPT VECTORS
                         337   
                         338                        ORG   EOS_GLB_TBL                    
                         339                                                             ;GLB     VECTOR_O8H
                         340   ;VECTOR_OBH     EQU      $+0
                         341                                                             ;GLB     INT_VCTR_TBL
                         342   ;INT_VCTR_TBL   EQU      VECTOR_O8H
                         343   ;               ;GLB     VECTOR_10H
                         344   ;VECTOR_10H     EQU      $+3
                         345                                                             ;GLB     VECTOR_18H
                         346   ;VECTOR_18H     EQU      $+6
                         347                                                             ;GLB     VECTOR20H
                         348   ;VECTOR_20H     EQU      $+9
                         349                                                             ;GLB     VECTOR_28H
                         350   ;VECTOR_28H     EQU      $+12
                         351                                                             ;GLB     VECTOR_30H
                         352   ;VECTOR_30H      EQU     $+15
                         353                                                             ;GLB     VECTOR38H
                         354   ;VECTOR_36H     EQU      $+18
                         355                                                             ;GLB     VECTOR_66H
                         356   ;VECTOR_66H     EQU      $+21
                         357   
                         358   ;
                         359   ;     NOTE: See SWITCHTABLE
                         360   ;
                         361   ;               ;GLB     MEMCNF GOO
                         362   ;MEM_CNFGOO     EQU     $+24
                         363   ;;              ;GLB     SWITCHTABLE
                         364   ;SWITCH_TABLE   EQU     MEMCNFGOO
                         365   ;:              ;GLB     MEMCNFGOI
                         366   ;MEM_CNFGO1     EQU     $+25
                         367   ;;              ;GLB     MEMCNFGO2
                         368   ;MEM_CNFGO2     EQU     $+26
                         369   ;;              ;GLB     MEMCNFGO3
                         370   ;MEM_CNFGO3     EQU     $+27
                         371   ;;              ;GLB     MEMCNFGO4
                         372   ;MEM_CNFGO4     EQU     $+28
                         373   ;;              ;GLB     MEMCNFGOS
                         374   ;MEM_CNFGOS     EQU     $+29
                         375   ;;              ;GLB     MEM_CNFGO6
                         376   ;MEM_CNFGO6     EQU     $+30
                         377   ;;              ;GLB     MEM_CNFGO7
                         378   ;MEM_CNFGO7     EQU     $+31
                         379   ;;              ;GLB     MEMCNFGOS8
                         380   ;MEM_CNFGOS     EQU     $+32
                         381   ;;              ;GLB     MEMCNF GOS
                         382   ;MEM_CNFGOS     EQU     $+33
                         383   ;;              ;GLB     MEMCNFGOA
                         384   ;MEM_CNFGOA     EQU     $+34
                         385   ;;              ;GLB     MEMCNF GOB
                         386   ;MEM_CNFGOS     EQU     $+35
                         387   ;;              ;GLB     MEM_CNFGOC
                         388   ;MEM_CNFGOC     EQU     $+36
                         389   ;;              ;GLB     MEM_CNFGOD
                         390   ;MEM_CNFGOD     EQU     $+37
                         391   ;;              ;GLB     MEM_CNFGOE
                         392   ;MEM_CNFGOE     EQU     $+38
                         393   ;;              ;GLB     MEM_CNFGOF
                         394   ;MEM_CNFGOF    EQU     $+39
                         395   
                         396   ;
                         397   ;        NOTE:   See  PORT  TABLE
                         398   ;
                         399   ;;                     ;GLB         MEM_SWITCH_PORT
                         400   ;MEM_SWITCH_PORT  EQU        $+40
                         401   ;;                    ;GLB PORT_TABLE
                         402   ;PORT_TABLE          EQU        MEM_SWITCH_PORT
                         403   ;;                 ;GLB NET_RESET_PORT
                         404   ;NET_RESET_PORT       EQU        $+41
                         405   ;;                 ;GLB        VDP_CTRL_PORT
                         406   ;VOP_ CTRL_PORT       EQU         $+42
                         407   ;;                 ;GLB        VDP_DATA_PORT
                         408   ;VDP_DATA_PORT       EQU        $+43
                         409   ;;                   ;GLB         CONTROLLER_0_PORT
                         410   ;CONTROLLER_0_PORT    EQU       $+44
                         411   ;;                  ;GLB     CONTROLLER_1_PORT
                         412   ;CONTROLLER_1_PORT   EQU     $+45
                         413   ;;                  ;GLB     STROBE_SET_PORT
                         414   ;STROBE_SET_PORT   ;EQU        $+46
                         415   ;;                      ;GLB         STROBE_RESET_PORT
                         416   ;STROBE_RESET_PORT ;EQU     $+47
                         417   ;;                  ;GLB      SOUNDPORT
                         418   ;;SOUNDPORT            EQU         $+48
                         419   
                         420   
                         421   ;RAM DEFINITIONS  FOR EOS
                         422   
                         423   ;REV O          (v/D     8-24-83)
                         424   
                         425   
                         426   ; ************************************************
                         427   
                         428                        ORG   €0S_GLB_RAM                    
                         429   
                         430   ; ************************************************
                         431   
                         432                                                             ;GLB      CLEAR_RAMSTART
                         433   
   FD60                  434   CLEAR_RAM_START:                                          
                         435   
                         436   ;
                         437   ; EOS revision  number initialized  by  EOS START
                         438   ;
                         439                                                             ;GLB      REV_NUM
   FD60                  440   REV_NUM                                                   
   FD60                  441                        DEFS  1                              
                         442   
                         443   
                         444                        IF    ,NT,SUPERGAME                  
                         445   ;
                         446   ; 0S7 equivalent  global data structures
                         447   ;
                         448                                                             ;GLB     VDP_MODE WORD
   FD61                  449   VOP_MODEWORD         DEFS  2                              
                         450                                                             ;GLB     VOP_STATUS  BYTE
   F063                  451   VOP_STATUSBYTE       DEFS  1                              
                         452                                                             ;GLB     VRAM_ADDR_ TABLE
   FD64                  453   VRAM_ADDR_TABLE                                           
                         454                                                             ;GLB     SPRITEATTRIBL
   FD64                  455   SPRITEATTRIBL        DEFS  2                              
                         456                                                             ;GLB     SPRITEGENTBL
   FD66                  457   SPRITEGENTBL         DEFS  2                              
                         458                                                             ;GLB     PATTRNNAME TBL
   FD68                  459   PATTRNNAMETBL        DEFS  2                              
                         460                                                             ;GLB     PATTRNGENTBL
   FD6A                  461   PATTRNGENTBL         DEFS  2                              
                         462                                                             ;GLB     COLORTABLE
   F06C                  463   COLORTABLE           DEFS  2                              
                         464                        ELSE                                 
                         465                        DEFS  2*6+1                          
                         466                        ENDIF                                
                         467                                                             ;GLB     CUR_BANK
   F06E                  468   CURBANK              DEFS  [                              
                         469   
                         470   
                         471   ;
                         472   ; EOS global  data structures
                         473   ;
                         474                                                             ;GLB      DEFAULTBT  DEV
                         475                                                             ;GLB      CURRENTDEV
                         476   
   FD6F                  477   OEFAULTBT            _DEV:                                
   FD6F                  478   CURRENTDEV:                                               
   FD6F                  479                        DEFS  1                              
                         480   
                         481                                                             ;GLB      CURRENTPCB
                         482   
   FD70                  483   CURRENTPCB:                                               
   FD70                  484                        DEFS  2                              ; HOLDS THE START ADDRESS OF THE PCB
                         485                        IF    ,NT,SUPERGAME                  
                         486                                                             ;GLB      DEVICEI0
                         487                        ENDIF                                
   F072                  488   DEVICEID:                                                 
   FD72                  489                        DEFS  1                              ; SAVE DEVICE ID
                         490   
                         491   ;GLB      FILE NAME_ADDR
   F073                  492   FILENAME             ADDR                                 
   F073                  493                        DEFS  2                              
                         494   
                         495                                                             ;GLB      KEYBOARDBUFFER
                         496   
   F075                  497   KEYBOARDBUFFER:                                           
   F075                  498                        DEFS  1                              ; HOLDS THE KEY THAT IS READ FROM THE
                         499                                                             ; KEYBOARD
                         500   
                         501                                                             ;GLB      PRINTBUFFER
                         502   
   F076                  503   PRINTBUFFER:                                              
   FD76                  504                        DEFS  16                             ; HOLDS THE STRING TO BE PRINTED
                         505   
                         506                                                             ;GLB      SECTORS_TO_INIT,SECTOR_NO
                         507   
   FD86                  508   SECTORS_TO_INIT:                                          
   F086                  509                        DEFS  1                              
                         510   
   FD87                  511   SECTOR_NO:                                                
   F087                  512                        DEFS  S                              
                         513   
                         514                                                             ;GLB      DCB_IMAGE
                         515   
   F08B                  516   DCB_IMAGE:                                                
   F08B                  517                        DEFS  21                             
                         518   
                         519                                                             ;GLB      QUERY_BUFFER
   FDA0                  520   QUERY_BUFFER                                              
   FDA0                  521                        DEFS  DIR_ENT_LENGTH                 
                         522   
                         523                                                             ;GLB      FCB_BUFFER
   F0BA                  524   FCB_BUFFER                                                
   F0BA                  525                        DEFS  DIR_ENT_LENGTH                 
                         526   
                         527                                                             ;GLB      FILE COUNT, MOD_FILE COUNT
   F0D4                  528   FILE_COUNT                                                
   F0D4                  529                        DEFS  1                              
                         530   
   FDD5                  531   MOD_FILE             COUNT                                
   FDD5                  532                        DEFS  1                              
                         533   
                         534                                                             ;GLB       RETRY COUNT,   FILE NUMBR
   FDD6                  535   RETRY_COUNT                                               
   FDD6                  536                        DEFS  1                              
                         537   
   FDD7                  538   FILE_NUMBR                                                
   FD07                  539                        DEFS  1                              
                         540   
                         541                                                             ;GLB       FILENAME_CMPS
   FDD8                  542   FILENAME_CMPS                                             
   FDD8                  543                        DEFS  1                              
                         544   
                         545                                                             ;GLB      DIR_BLOCK_NO,FOUND_AVAIL_ENT
   FDD9                  546   DIR_BLOCK_NO                                              
   FDD9                  547                        DEFS  2                              
                         548   
   FDDB                  549   FOUND_AVAIL_ENT                                           
   FDDB                  550                        DEFS  1                              
                         551   
                         552                                                             ;GLB       VOL_BLK_SZ,BLK_STRT     PTR
   FDDC                  553   BLK_STRT_PTR:                                             
   FDDC                  554   VOL_BLK_SZ:                                               
   FDDC                  555                        DEFS  4                              
                         556   
                         557   ; FILE  MANAGER   RAM  STORAGE
                         558   
                         559                                                             ;GLB       EOS_YEAR,EOS   MONTH,EOSDAY
   FDE0                  560   EOS_YEAR             DEFS  1                              ;FMGR’S DATE STORAGE
   FDE1                  561   EOS_MONTH            DEFS  1                              
   FDE2                  562   EOS_DAY              DEFS  1                              
                         563   
                         564                                                             ;GLB       FMGR_DIR_ENT
   FDE3                  565   FMGR_DIR_ENT                                              ;PLACEFOR FMGR TO PUT A DIR. ENTRY
                         566   
                         567                                                             ;GLB        FCB_HEAD_ADOR,FCB_DATA_ ADDR
   FDFD                  568   FCB_HEAD_ADDR        DEFS  2                              ;POINTER TO START OF FCB HEADS
   FDFF                  569   FCB_DATA_ADDR        DEFS  2                              ;POINTER TO START OF FCB BUFFERS
                         570   
                         571                                                             ;GLB         FNUM, BYTES REQ,BYTES TO GO,USER BUF
                         572                                                             ;GLB         BUF_START,BUF_ENO.BLOCKS  REQ
                         573                                                             ;GLB        USER_NAME  ,STARTBLOCK
   FE01                  574   FNUM                 DEFS  1                              ;FILE NUMBER GIVEN TO READ/WRITE ROUTINES
   FE02                  575   BYTES_REQ            DEFS  2                              ;NUMBER OF BYTES REQUESTED BY CALLER
   FE04                  576   BYTES_TO_GO          DEFS  2                              ;NUMBER OF BYTES STILL TO GIVE TO CALLER
   FE06                  577   USER_BUF             DEFS  2                              ;ADDRESS OF CALLER’S BUFFER
   FE08                  578   BUF_START            DEFS  2                              ;ADDRESS OF MY OWN BUFFER
   FE0A                  579   BUF_END              DEFS  2                              ;ADDRESS OF END + 1 OF MY BUFFER
   FE0C                  580   BLOCKS_REQ           DEFS  4                              ;NUMBER OF BLOCKS REQUESTED (MAKEFILE)
   FE10                  581   USER_NAME            DEFS  2                              ;POINTER TO USER’S NAME STRING
   FE12                  582   START_BLOCK          DEFS  4                              ;START BLOCK # OF A FILE
                         583   
                         584                                                             ;GLB_      NEW_HOLE  START,NEW_HOLE    SIZE
                         585   
   FE16                  586   NEW_HOLE             START                                
   FE16                  587                        DEFS  4                              
                         588   
   FE1A                  589   NEW_HOLE_SIZE                                             ;
   FE1A                  590                        DEFS  2                              
                         591   
   FE1C                  592   STACK_START:                                              
   FE1C                  593                        DEFS  60                             
                         594   
                         595                                                             ;GLB      EOSSTACK
   FE58                  596   EOS_STACK:                                                
                         597   
                         598   ;            ;GLB      SAVEDCOUNT
                         599                                                             ; controller data area
                         600                                                             ;GLB      SPIN_SWOCT                 ; THESE TWO BYTES MUST  GE IN THIS ORDER!!!
                         601                                                             ;GLB      SPIN_SW1CT
                         602                                                             ;GLB      PERSONAL ODEBOUNCETABLE
                         603                                                             ;GLB      TEMP STACK                 ; Used Dy putascit  when  bank switching
                         604                                                             ; sound data areas
                         605                                                             ;GLB      PTRTO LST  OF SND_ADORS
                         606                                                             ;GLB      PTRTO S GN_O
                         607                                                             ;GLB      PTR_TO_S_ON1
                         608                                                             ;GLB      PTR_TO_SON  2
                         609                                                             ;GLB      PTRTO S ON  3
                         610                                                             ;GLB      SAVECTRL
                         611   
                         612   
                         613   ;SAVEDCOUNT      DEFS      2
                         614   ;
                         615   ; controller  data  area
                         616   ;
   FE58                  617   SPIN_SWO_CT          DEFS  1                              ; THESE  TWO BYTES MUST BE IN THIS ORDER!!!
   FE55                  618   SPIN_SW1_CT          DEFS  1                              
   FE5A                  619   PERSONAL_DEBOUNCE_TABLE DEFS  08                             
   FE62                  620                        DEFS  12                             ;USED BY TEMP_STACK
              <FE6E>     621   TEMP_STACK           EQU   $                              ;Used by put_ascii when bank switching
                         622   
                         623   ;
                         624   ; sound data  areas
                         625   ;
   FE6E                  626   PTR_TO_LST_OF_SND_ADDRS DEFS  2                              
   FE70                  627   PTR_TO_S_ON_O        DEFS  2                              
   FE72                  628   PTR_TO_S_ON_1        DEFS  2                              
   FE74                  629   PTR_TO_S_ON_2        DEFS  2                              
   FE76                  630   PTR_TO_S_ON_3        DEFS  2                              
   FE78                  631   SAVE_CTRL            DEFS  1                              
                         632   
                         633   
                         634   ;
                         635   ; data  area  for   CONS OUT
                         636   ;
                         637                                                             ;GLB       OLDCHAR_
                         638                                                             ;GLB       XMIN
                         639                                                             ;GLB       XMAX
                         640                                                             ;GLB       YMIN
                         641                                                             ;GLB       Y_ MAX
                         642                                                             ;GLB       LINEBUFFER_
                         643                                                             ;GLB       NUM_LINES
                         644                                                             ;GLB       NUM_COLUMNS
                         645                                                             ;GLB       UPPER_LEFT
                         646                                                             ;GLB       PTRN_NAME_TBL
                         647                                                             ;GLB       CURSOR
                         648   
   FE79                  649   OLDCHAR_             DEFS  1                              ;Storage   of   char  under   cursor
   FE7A                  650   X_MIN                DEFS  1                              ;Absolute    X  coord  of   window
   FE7B                  651   X_MAX                DEFS  1                              
   FE7C                  652   YMIN                 DEFS  1                              
   FE7D                  653   YMAX                 DEFS  1                              
   FE7E                  654   LINEBUFFER_          DEFS  33                             
   FE5F                  655   NUMLINES             DEFS  1                              
   FEA0                  656   NUM_COLUMNS          DEFS  1                              
   FEA1                  657   UPPER_LEFT           DEFS  2                              
   FEA3                  658   PTRN_NAME_TBL        DEFS  2                              
   FEA5                  659   CURSOR               DEFS  2                              
                         660   
                         661                                                             ;GLB        CLEAR_RAM  SIZE
                         662   
              <O147>     663   CLEAR_RAM_SIZE       EQU   [$-CLEAR_RAM_START]            
                         664   
                         665   ;
                         666   ; this  is  the PCB/DCB  area
                         667   ;
                         668   ;***********************************************************************
                         669   
                         670                        ORG   EOS_PCB_OCB                    
                         671   
                         672   ;***********************************************************************
                         673   
                         674                                                             ;GLB      PCB
                         675   
   FEC0                  676   PCB:                                                      
   FEC0                  677                        DEFS  P_SIZE                         ; PCB
                         678   
   FEC4                  679   DCBS:                                                     
   FEC4                  680                        DEFS  15*D_SIZE                      ; 1 OCB PER NETWORK  ADORESS
                         681   
   FFFF                  682   RESERVED_BYTE:                                            
   FFFF                  683                        DEFS  1                              ; SAVED IN CASE WE OO  FAST  DMA HERE
                         684   ;
                         685   ;***********************************************************************
                         686   ;***********************************************************************
                         687   ;***********************************************************************
                         688   
                         689   NAME ^Rev OO - RPD^
                         690   
                         691   
                         692   ;***********************************************************************
                         693   
                         694                        ORG   EOS_GLB_TBL                    
                         695   
                         696   ;***********************************************************************
                         697   ;
                         698   ; NOTE: these are defined globa! in £0S_COMN
                         699   ;
                         700   ;                     ;GLB     VECTOR_O8H
                         701   ;                     ;GLB     VECTOR 10H
                         702   ;                     ;GLB     VECTOR_18H
                         703   ;                     ;GLB     VECTOR_20H
                         704   ;                     ;GLB     VECTOR_28H
                         705   ;                     ;GLB     VECTOR_30H
                         706   ;                     ;GLB     VECTOR_38H
                         707   ;                     ;GLB     VECTOR_66H
                         708   ;
   FBFF  C9              709   VECTOR_O8H           RET                                  ;rst 8
   FC00  00              710                        NOP                                  
   FC01  00              711                        NOP                                  
   FC02  C9              712   VECTOR_10H           RET                                  ;rst 10
   FC03  00              713                        NOP                                  
   FC04  00              714                        NOP                                  
   FC05  C9              715   VECTOR_18H           RET                                  ;rst 18
   FC06  00              716                        NOP                                  
   FC07  00              717                        NOP                                  
   FC0B  C9              718   VECTOR_20H           RET                                  ;rst 20
   FC05  00              719                        NOP                                  
   FC0A  00              720                        NOP                                  
   FC0B  C9              721   VECTOR_28H           RET                                  ;rst 28
   FC0C  00              722                        NOP                                  
   FC00  00              723                        NOP                                  
   FC0E  C9              724   VECTOR_30H           RET                                  ;rst30
   FC0F  00              725                        NOP                                  
   FC10  00              726                        NOP                                  
   FC11  C9              727   VECTOR_38H           RET                                  ;rst38
   FC12  00              728                        NOP                                  
   FC13  00              729                        NOP                                  
   FC14  ED45            730   VECTOR_66H           RETN                                 ;nmi vector
   FC16  00              731                        NOP                                  
                         732   
                         733   
                         734   
                         735   
                         736   ; NOTE: these are defined global in EQSCOMN
                         737   
                         738   ;             ;GLB     SWITCH_TABLE
                         739   ;             ;GLB     MEM_CNFGOO
                         740   ;             ;GLB     MEM_CNFGO1
                         741   ;             ;GLB     MEM_CNFGO2
                         742   ;             ;GLB     MEM_CNFGO3
                         743   ;             ;GLB     MEM_CNFGO4
                         744   ;             ;GLB     MEM_CNFGO5
                         745   ;             ;GLB     MEM_CNFGO6
                         746   ;             ;GLB     MEM_CNFGO7
                         747   ;             ;GLB     MEM_CNFGO8
                         748   ;             ;GLB     MEM_CNFGO9
                         749   ;             ;GLB     MEM_CNFGOA
                         750   ;             ;GLB     MEM_CNFGOB
                         751   ;             ;GLB     MEM_CNFGOC
                         752   ;             ;GLB     MEM_CNFGOD
                         753   ;             ;GLB     MEM_CNFGOE
                         754   ;             ;GLB     MEM_CNFGOF
                         755   
              <0000>     756   LO_BOOT_ROM_N_ALPHA_MASK EQU   0000B                          
              <0001>     757   LO_INTRINSIC_RAM_TO_7FFFH_MASK EQU   0001B                          
              <0002>     758   LO_EXPANSION_0_TO_7FFFH_MASK EQU   0010B                          
              <0003>     759   LO_OS7_N_INTRINSIC_2000H_7FFFH_MASK EQU   0011B                          
                         760   
              <0000>     761   HI_INTRINSIC_8000H_TO_0FFFFH_MASK EQU                                  
              <0004>     762   HI_AUXILLIARY_SLOT_8000H_0FFFFH EQU   0100B                          
              <0008>     763   HI_EXPANSION_8000H_TO_0FFFFH_MASK EQU   1000B                          
              <000C>     764   HI_COLECOVISION_CARTRIOGE_SLOT EQU   1100B                          
                         765   
                         766   
                         767   
   FC17                  768   SWITCH_TABLE:                                             
                         769   
   FC17                  770   MEM_CNFGOO                                                
   FC17  00              771                        DEFB  HI_INTRINSIC_8000H_TO_0FFFFH_MASK,OR,LO_BOOTROM_N_ALPHA_MASK 
                         772   
   FC18                  773   MEM_CNFGO1                                                
   FC18  0F              774                        DEFB  HI_INTRINSIC_8000H_TO_0FFFFH_MASK,OR,LO_INTRINSIC_RAM_0_TO_7FFFH_MASK 
                         775   
   FC19                  776   MEM_CNFGO2                                                
   FC19  02              777                        DEFB  HI_INTRINSIC_8000H_TO_0FFFFH_MASK,OR,LO_EXPANSION_0_TO_7FFFH_MASK 
                         778   
   FC1A                  779   MEM_CNFGO3                                                
   FC1A  03              780                        DEFB  HI_INTRINSIC_8000H_TO_0FFFFH_MASK,OR,LO_OS7_N_INTRINSIC_2000H_7FFFH_MASK 
                         781   
   FC1B                  782   MEM_CNFGO4                                                
   FC1B  04              783                        DEFB  HI_AUXILLIARY_SLOT_8000H_0FFFFH,OR,LO_BOOT_ROM_N_ALPHA_MASK 
                         784   
   FC1C                  785   MEM_CNFGO5                                                
   FC1C  05              786                        DEFB  HI_AUXILLIARY_SLOT_8000H_0FFFFH,OR,LO_INTRINSIC_RAM_0_TO_7FFF_MASK 
                         787   
   FC1D                  788   MEM_CNFGO6                                                
   FC1D  06              789                        DEFB  HI_AUXILLIARY_SLOT_8000H_0FFFFH,OR,LO_EXPANSION_0_TO_7FFF_MASK 
                         790   
   FC1E                  791   MEM_CNFGO7                                                
   FC1E  07              792                        DEFB  HI_AUXILLIARY_SLOT_8000H_0FFFFH,OR,LO_OS7_N_INTRINSIC_2000H_7FFFH_MASK 
                         793   
   FC1F                  794   MEM_CNFGO8                                                
   FC1F  08              795                        DEFB  HI_EXPANSION_8000H_TO_0FFFFH_MASK,OR,LO_BOOT_ROM_N_ALPHA_MASK 
                         796   
   FC20                  797   MEM_CNFGO9                                                
   FC20  09              798                        DEFB  HI_EXPANSION_8000H_TO_0FFFFH_MASK,OR,LO_INTRINSIC_RAM_0_TO_7FFFH_MASK 
                         799   
   FC21                  800   MEM_CNFGOA                                                
   FC21  0A              801                        DEFB  HI_EXPANSION_8000H_TO_0FFFFH_MASK,OR,LO_EXPANSION_0_TO_7FFFH_MASK 
                         802   
   FC22                  803   MEM_CNFGOB                                                
   FC22  0B              804                        DEFB  HI_EXPANSION_8000H_TO_0FFFFH_MASK,OR,LO_OS7_N_INTRINSIC_2000H_7FFFH_MASK 
                         805   
   FC23                  806   MEM_CNFGOC                                                
   FC23  0C              807                        DEFB  HI_COLECOVISION_CARTRIDE_SLOT,OR,LO_BOOT_ROM_N_ALPHA_MASK 
                         808   
   FC24                  809   MEM_CNFGOD                                                
   FC24  0D              810                        DEFB  HI_COLECOVISION_CARTRIDE_SLOT,OR,LO_INTRINSIC_RAM_0_TO_7FFFH_MASK 
                         811   
   FC25                  812   MEM_CNFGOE                                                
   FC25  0E              813                        DEFB  HI_COLECOVISION_CARTRIDE_SLOT,OR,LO_EXPANSION_0_TO_7FFFH_MASK 
                         814   
   FC26                  815   MEM_CNFGOF                                                
   FC26  0F              816                        DEFB  HI_COLECOVISION_CARTRIDE_SLOT,OR,LO_OS7_INTRINSIC_2000H_7FFFH_MASK 
                         817   
                         818   
                         819   
                         820   ;
                         821   ;  NOTE:       these      are    defined       global       in    E0S_COMN
                         822   ;
                         823   ;                                       ;GLB            PORT_TABLE           ;port value memory locations
                         824   ;                                       ;GLB            MEM_SWITCH_PORT
                         825   ;                                       ;GLB            NET_RESET_PORT
                         826   ;                                       ;GLB            VOP_CTRL_PORT
                         827   ;                                       ;GLB            VOP_DATA_PORT
                         828   ;                                       ;GLB            CONTROLLER_O_PORT
                         829   ;                                       ;GLB            CONTROLLER_1_PORT
                         830   ;                                       ;GLB            STROBE_SET_PORT
                         831   ;                                       ;GLB            STROBE_RESET_PORT
                         832   ;                                       ;GLB            SOUNODPORT
                         833   ;
                         834   ; ******************************************************
                         835   ; *** VDP ports must remain next to each other       ***
                         836   ; ***   and in CTRL -> DATA order                    ***
                         837   ; ******************************************************
                         838   
   FC27                  839   PORT_TABLE:                                               
                         840   
   FC27                  841   MEM_SWITCH_PORT                                           
   FC27  7F              842                        DEFB  07FH                           ;MEM_SWITCH_PORT         defined here
                         843   
   FC28                  844   NET_RESET_PORT                                            
   FC28  3F              845                        DEFB  03FH                           ;Adam_net reset port     defined here
                         846   
   FC29                  847   VOP_CTRL_PORT                                             
   FC29  BF              848                        DEFB  0BFH                           ;VDP ctrl port           01D43H
                         849   
   FC2A                  850   VDP_DATA_PORT                                             
   FC2A  BE              851                        DEFB  0BEH                           ;VOP data port           01D47H
                         852   
   FC2B                  853   CONTROLLER_O_PO                                           
   FC2B  FC              854                        DEFB  0FCH                           ;Controller O            0114BH
                         855   
   FC2C                  856   CONTROLLER_1_PO                                           
   FC2C  FF              857                        DEFB  0FFH                           ;Controller 1            01151H
                         858   
   FC2D                  859   STROBE_SET_PORT                                           
   FC20  80              860                        DEFB  080H                           ;Controller strobe set   01157H
                         861   
   FC2E                  862   STROBE_RESET_PO                                           
   FC2E  C0              863                        DEFB  0C0H                           ;Controller strobe reset 01168H
                         864   
   FC2F                  865   SOUNODPORT                                                
   FC2F  FF              866                        DEFB  0FFH                           ;Sound port              0018EH
                         867   ;
                         868   ; ******************************************************
                         869   ; ******************************************************
                         870   ; ******************************************************
                         871   
                         872   
                         873   
                         874   ;
                         875   ; globals routines defined
                         876   ;
                         877                                                             ;GLB      __WRITEVRAM                 ;VDP support routines
                         878                                                             ;GLB      __READ_VRAM
                         879                                                             ;GLB      __WRITEREGISTER
                         880                                                             ;GLB      __READ_REGISTER
                         881                                                             ;GLB      __FILL_VRAM
                         882                                                             ;GLB      __INIT_TABLE
                         883                                                             ;GLB      __PUT_VRAM
                         884                                                             ;GLB      __GET_VRAM
                         885                                                             ;GLB      __CALC_OFFSET
                         886                                                             ;GLB      __PX_TO_PTRN_POS
                         887                                                             ;GLB      __LOAD_ASCTII
                         888                                                             ;GLB      __PuT_ASCII
                         889                                                             ;GLB      __WR_SPR_ATTRIBUTE
                         890   
                         891                                                             ;GLB      __DECODER
                         892                                                             ;GLB      __POLLER                    ;controller support routines
                         893                                                             ;GLB      __UPDATE_SPINNER
                         894   
                         895                                                             ;GLB      __DECLSN                    ;sound chip support routines
                         896                                                             ;GLB      __DECMSN
                         897                                                             ;GLB      __MSNTOLSN
                         898                                                             ;GLB      __ADD816
                         899                                                             ;GLB      ___SOUND_INIT
                         900                                                             ;GLB      __TURN_OFF_SOUND
                         901                                                             ;GLB      __PLAY_IT
                         902                                                             ;GLB      ___SOUNODS
                         903                                                             ;GLB      __EFFECT_OVER
                         904   
                         905                                                             ;GLB      __SWITCH_MEM                ;memory bank switch support routine
                         906                                                             ;GLB      __PORTCOLLECTION            ;STORE THE PORT ADDRESSES FROM OS 7
                         907   
                         908   ;
                         909   ; external data areas used
                         910   ;
                         911                                                             ;EXT       VDP_MODEWORD
                         912                                                             ;EXT       VDP_STATUSBYTE
                         913                                                             ;EXT       VRAM_ADDR [FABLE
                         914                                                             ;EXT       SPRITEATTRIBLS
                         915   ;eee          ;EXT       SPRITEGENTBL
                         916   ;eee          ;EXT       PATTRNNAMETBL
                         917                                                             ;EXT       PATTRNGENTBL
                         918   ;eee          ;EXT       COLORTABLE
                         919                                                             ;EXT       CUR_BANK
                         920   
                         921                                                             ;controller data area
                         922                                                             ;EXT       SPIN_SWO_CT                 ;THESE TWO BYTES MUST BE IN THIS ORDER!!!
                         923   ;ee@e         ;EXT       SPIN_SW1_CT
                         924                                                             ;EXT       PERSONAL_DEBOUNCE_TABLE
                         925                                                             ;EXT       TEMP_STACK                    ;Used by put_ascii when bank switching
                         926                                                             ;sound data areas
                         927                                                             ;EXT       PTR_TO_LST OF_SND_ADDRS
                         928                                                             ;EXT       PTR_TO_S_ON_0
                         929                                                             ;EXT       PTR_TO_S_ON_1
                         930                                                             ;EXT       PTR_TO_S_ON_2
                         931                                                             ;EXT       PTR_TO_S_ON_3
                         932                                                             ;EXT       SAVE_CTRL
                         933   ;
                         934   ;    Port address and  bank  select  externals    follow
                         935   ;
                         936                                                             ;EXT       PORTTABLE
                         937                                                             ;EXT       MEM_SWITCH_ PORT
                         938   ;eee          ;EXT       NET_RESET_PORT
                         939                                                             ;EXT       VDP_CTRL_PORT
                         940   ;eee          ;EXT       VDP_DATA_PORT
                         941                                                             ;EXT       CONTROLLER_O_PORT
                         942   ;eee          ;EXT       CONTROLLER_1_PORT
                         943                                                             ;EXT       STROBE_SET_PORT
                         944   ;eee          ;EXT       STROBE_RESET_PORT
                         945                                                             ;EXT       SOUNDPORT
                         946   
                         947   ;eee          ;EXT       SWITCH_TABLE
                         948                                                             ;EXT       MEM_CNFGOO
                         949   ;ee@          ;EXT       MEM_CNFGO1
                         950   ;eee          ;EXT       MEM_CNFGO2
                         951                                                             ;EXT       MEM_CNFGO3
                         952   ;eee          ;EXT       MEM_CNFGO4
                         953   ;eee          ;EXT       MEM_CNFGO5
                         954   ;eee          ;EXT       MEM_CNFGO6
                         955   ;eee          ;EXT       MEM_CNFGO7
                         956   ;eee          ;EXT       MEM_CNFGO8
                         957   ;eee          ;EXT       MEM_CNFGO9
                         958   ;eee          ;EXT       MEM_CNFGOA
                         959   ;ee¢@         ;EXT       MEM_CNFGOB
                         960   ;ee@          ;EXT       MEM_CNFGOC
                         961   ;ee@          ;EXT       MEM_CNFGOD
                         962   ;ece@         ;EXT       MEM_CNFGOE
                         963   ;ee¢          ;EXT       MEM_CNFGOF
                         964   
                         965   ;
                         966   ; externals used
                         967   ;
                         968                                                             ;EXT      WRITE_REGISTER
                         969   ;eee          ;EXT      INIT_TABLE
                         970                                                             ;EXT      SWITCH_MEM
                         971   ;eee          ;EXT      PUT_VRAM
                         972                                                             ;EXT      WRITE_VRAM
                         973                                                             ;EXT      READ_VRAM
                         974   ;
                         975   ; local equates
                         976   ;
              <0102>     977   LOC_IN_ALPHA         EQU   0102H                          ;potnter  to  ascii  gens in rev  28+  alpha
                         978   
                         979   
                         980   
                         981   ; Offsets  into a volume   descriptor  (the first entry in the directory).
              <0000>     982   VOL_NAME             EQU   O                              ;LOGICALVOLUME NAME
              <OO0C>     983   VOL_DIRSIZE          EQU   12                             ;*ee7 BITS ONLY *** # BLOCKS IN DIRECTORY
              <0O0O>     984   VOL_ATTR             EQU   12                             ;**eTOP BIT ONLY ¢**+SET FOR DELETE  PROTECTION
              <0000>     985   VOL_DIR_CHECK        EQU   13                             ;CONTAINS 4 UNIQUE BYTES FOR DIRECTORY   EXISTENCE   VERIFICATION
              <O011>     986   VOL_SIZE             EQU   17                             ;VOLUMESIZE (IN BLOCKS) (4 BYTES)
              <0017>     987   VOL_YEAR             EQU   23        :                    ;CREATIODATE -- YEAR
              <0018>     988   VOL_MONTH            EQU   24        :                MONTH 
              <0019>     989   VOL_DAY              EQU   25                             ;                & DAY
              <OO1A>     990   VOL_DES_LENGTH       EQU   26                             
                         991   
                         992   ; Offsets  into a directory   entry.
              <0000>     993   DIR_NAME             EQU   O                              ;FILE NAME
              <OO0C>     994   DIR_ATTR             EQU   12                             ;FILE ATTRIBUTE BYTE
              <0000>     995   DIR_START_BLOCK      EQU   13                             ;STARTING BLOCK4
              <0011>     996   DIR_MAX_LENGTH       EQU   17                             ;TOTAL #4BLOCKS ALLOCATED
              <0013>     997   DIR_USED_LENGTH      EQU   19                             ;#OF BLOCKS USED (FULL + 1 PARTIAL)
              <0015>     998   DIR_LAST_COUNT       EQU   21                             ;NUMBER OF BYTES IN LAST PARTIAL BLOCK
              <0017>     999   DIR_YEAR             EQU   23                             ;CREATION DATE -- YEAR
              <0018>     1000  DIR_MONTH            EQU   24                             ;                MONTH
              <O019>     1001  DIR_DAY              EQU   25                             ;                & DAY
              <OO1A>     1002  DIR_ENT_LENGTH       DEFL  26                             
                         1003  
              <O027>     1004  ENT_PER_BLOCK        EQU   1024/26                        ;NUMBEROF ENTRIES PER DIR BLOCK
                         1005  
                         1006  ; Offsets  into an FCB  header.
                         1007  
                         1008  ; Copy of  DIR entry
                         1009  
              <O00O>     1010  FCB_NAME             EQU   O                              ;FILE NAME
              <OOOC>     1011  FCB_ATTR             EQU   12                             ;FILE ATTRIBUTE BYTE
              <OOOD>     1012  FCB_START_BLOCK      EQU   13                             ;STARTING BLOCK ¥#
              <O00D>     1013  FCB_FIRST_BLOCK      EQU   FCB_START_BLOCK                
              <OO11>     1014  FCB_MAX_LENGTH       EQU   17                             ;TOTAL # BLOCKS ALLOCATED
              <OO13>     1015  FCB_USED_LENGTH      EQU   19                             ;# OF BLOCKS USED (FULL + 1 PARTIAL)
              <OO15>     1016  FCB_LAST_COUNT       EQU   21                             ;NUMBER OF BYTES IN LAST PARTIAL BLOCK
                         1017  
              <OO16>     1018  FCB_STORED_BYTES     EQU   FCB_LAST COUNT+1               ; NUMBER OF BYTES STORED  ON DEVICE
                         1019                                                            ; ... THE UPPER HALF OF THIS  FCB  EQU  LIST
                         1020  
              <OO17>     1021  FCB_DEVICE           EQU   26-3                           ;NUMBER OF DEVICE CONTAINING  FILE
              <OO18>     1022  FCB_MODE             EQU   27-3                           ;FILE MODE (UNUSED, READ,  WRITE,APPEND)
              <O019>     1023  FCB_BLOCK            EQU   28-3                           ;>BLOCKNUMBER CURRENTLY IN  BUFFER
             <OO01D>     1024  FCB_LAST_BLOCK       EQU   32-3                           ;LAST BLOCK NUMBER IN FILE
              <0021>     1025  FCB_POINTER          EQU   36-3                           ;-POINTERINTO BLOCK BUFFER
              <0023>     1026  FCB_LENGTH           EQU   38-3                           
                         1027  
                         1028  ; Possible  FCB modes.
                         1029  ;*
                         1030  ;* PROTECTED  MODE EQUATES
                         1031  ;*
              <O000>     1032  MODE_UNUSED          EQU   O                              ;MANY PEOPLE ASSUME THIS IS ZERO!
             <OO0O1>     1033  MODE_READ            EQU   MODEUNUSED+1                   
              <0002>     1034  MODE_WRITE           EQU   MODEREAD+1                     
              <0003>     1035  MODE_UPDATE          EQU   MODEWRITE+1                    
              <O004>     1036  MODE_EXEC            EQU   MODEUPDATE+1                   
              <0004>     1037  MODE_MAX             EQU   MODEEXEC+O                     
                         1038  ;*
              <0005>     1039  MODE_REMAINDER_BIT   EQU   5                              ; INDICATES TO ALLOCATE REST  OF  TAPE
              <O006>     1040  MODE_DIRTY_BIT       EQU   6                              ; TEST BIT 6
              <O040>     1041  MODE_DIRTY           EQU   010000008,INOICATES MODIFIED BUFFER 
              <O007>     1042  MODE_LAST_BLOCK_BIT  EQU   7                              ; TEST BIT 7
              <OO80>     1043  MODE_LAST            EQU   100000008                      ;INDICATES LAST BLOCK OF FILE
              <OOO7>     1044  MODE_MODE            EQU   000001118                      ;BITS TO STORE MODES
                         1045  
                         1046  ; File attribute bits.
              <OO80>     1047  ATTR_PERMANENT       EQU   10000000B                      
              <O040>     1048  ATTR_WRITE_PROT      EQU   01000000B                      
              <0020>     1049  ATTR_READ_PROT       EQU   00100000B                      
              <0010>     1050  ATTR_USER            EQU   00010000B                      
            <OO0O08>     1051  ATTR_SYSTEM          EQU   00001000B                      
              <O004>     1052  ATTR_DELETED         EQU   00000100B                      
              <0002>     1053  ATTR_DEL_BIT         EQU   2                              
             <OOO02>     1054  ATTR_EXECUTE         EQU   00000010B                      
              <O000>     1055  ATTR_HOLE_BIT        EQU   0                              
             <OOO01>     1056  ATTR_HOLE            EQU   00000001B                      
                         1057  
                         1058  ; System-wide file name length.
              <OOOC>     1059  NAME_LENGTH          EQU   12                             
                         1060  
                         1061  ; Numbers of things we nave.
              <O003>     1062  NUM_FCBS             EQU   3                              ;1 FOR THE SYSTEM, 2 FOR THE USER
                         1063  
                         1064  
              <O001>     1065  DCB_NOT_FOUND        EQU   1                              ;  THERE WAS NO DCB FOR  THE  DEVICE  REQUESTED.
              <0002>     1066  DCB_BUSY             EQU   2                              ;  OCB IS BUSY
              <0003>     1067  OCB_IDLE_ERR         EQU   3                              ;  OCB IS IOLE
                         1068  
              <0004>     1069  NO_DATE_ERR          EQU   4                              
              <0005>     1070  NO_FILE_ERR          EQU   5                              
              <O006>     1071  FILE_EXISTS_ERR      EQU   6                              
              <0007>     1072  NO_FCB_ERR           EQU   7                              
              <O008>     1073  MATCH_ERR            EQU   8                              
              <0009>     1074  BAD_FNUM_ERR         EQU   9                              
              <OOOA>     1075  EOF_ERR              EQU   10                             
              <0008>     1076  TOOBIG_ERR           EQU   11                             
              <OOOC>     1077  FULL_DIR_ERR         EQU   12                             
              <O00D>     1078  FULL_TAPE_ERR        EQU   13                             
              <OOOE>     1079  FILE_NM_ERR          EQU   14                             ;0LS(8/28/83)
              <OOOF>     1080  RENAME_ERR           EQU   15                             ;DLS(8/30/83)
              <OO10>     1081  DELETE_ERR           EQU   16                             ;DLS(8/30/83)
              <OO11>     1082  RANGE_ERR            EQU   17                             ;DLS(8/31/83)
                         1083  
              <0012>     1084  CANT_SYNC1           EQU   18                             
              <0013>     1085  CANT_SYNC2           EQU   19                             
              <0014>     1086  PRT_ERR              EQU   20                             
                         1087  
              <0015>     1088  RQTP_STAT_ERR        EQU   21                             
              <O016>     1089  DEVICE_DEPD_ERR      EQU   22,                            
              <0017>     1090  PROG_NON_EXIST       EQU   23                             ; PROGRAM DOES NOT  CURRENTLY   EXIST
              <OO18>     1091  NO_DIR_ERR           EQU   24                             ; NO DIRECTORY ON  TAPE
                         1092  
                         1093  
                         1094  ;THESE  OUR  EQUATES   THAT  ARE  USED  BY  THE  EOS  PROGRAMS   TO REFEFERNCE
                         1095  ;PCB AND  DCB INFORMATION
                         1096  
                         1097  
                         1098  ;PCB EQUATES
                         1099  
             <O0000>     1100  P_COM_STAT           EQU   O                              ; THIS  IS  THE COMMAND/STATUS     BYTE
                         1101  
             <00001>     1102  P_REL_ADDR           EQU   1                              ; THIS  IS  THE RELOCATION    ADDRESS
              <O0O1>     1103  P_REL_AODR_LO        EQU   P_REL_ADDR+O                   
              <0002>     1104  P_REL_ADOR_HI        EQU   P_REL_ADOR+1                   
                         1105  
              <0003>     1106  P_NUM_DCBS           EQU   3                              ; THIS  IS  THE NUMBER   OF  DCBS  DEFINED
                         1107  
                         1108  
              <0004>     1109  P_SIZE               DEFL  4                              ; THE NUMBER   OF  BYTES  IN  THE  PCB
                         1110  
                         1111  
                         1112  
                         1113  ;DCB EQUATES
                         1114  
              <O00O>     1115  D_COMSTAT            EQU   0                              ; THE  COMMANO   STATUS  BYTE
                         1116  
             <O0001>     1117  D_BUF_ADR            EQU   1                              ; ADDRESS   OF  THE DATA   BUFFER
              <O001>     1118  D_BUF_ADR_LO         EQU   D_BUF_ADR+0                    
              <0002>     1119  D_BUF_ADR_HI         EQU   D_BUF_ADR+1                    
                         1120  
              <0003>     1121  D_BUF_LEN            EQU   3                              ; THE  LENGTH   OF THE  DATA  BUFFER
              <0003>     1122  D_BUF_LEN_LO         EQU   D_BUF_LEN+O                    
              <0004>     1123  D_BUF_LEN_HI         EQU   D_BUF_LEN+1                    
                         1124  
              <O0OS>     1125  D_SECT_NUM           EQU   5                              ; THE  BLOCK  DEVICE   SECTOR   NUMBER
                         1126  
              <0009>     1127  D_SEC_DEV_ID         EQU   9                              ; SECONDARY   DEVICE   ID
                         1128  
              <OOOE>     1129  D_RET_COUNT          EQU   14                             ; THE  NUMBER   OF TIMES  A  COMMAND   WILL
                         1130                                                            ; BE  RETRIED.
              <OOOE>     1131  D_RET_COUNT_LO       EQU   D_RET COUNT+0                  
              <OOOF>     1132  D_RET_COUNT_HI       EQU   D_RET_COUNT+1                  
                         1133  
              <0010>     1134  D_DEV_ADDR           EQU   16                             ; THE  DEVICE   ADDRESS  (1D)
                         1135  
              <OO11>     1136  D_MAX_MSG_LEN        EQU   17                             ; THE  MAX  LENGTH  OF  A DATA   STRING
                         1137                                                            ; FOR  THE  DEVICE
             <O0011>     1138  D_MAX_MSG_LN_LO      EQU   D_MAX_MSG_LEN+0                
              <0012>     1139  D_MAX_MSG_LN_HI      EQU   D_MAX_MSG_LEN+1                
                         1140  
              <OO13>     1141  D_DEV_TYPE           EQU   19                             ; THE  DEVICE   TYPE,  BLOCKED   OR CHARACTER
                         1142  
              <O014>     1143  D_STATUS_FLAGS       EQU   20                             ; DEVICE  DEPENDENT    STATUS  FLAGS
                         1144  
              <O015>     1145  D_SIZE               DEFL  21                             ; THE  NUMBER  OF  BYTES  IN  THE  DCB
                         1146  
                         1147  
                         1148  
                         1149  ;DEVICE  ID‘S  FOR  THE KEYBOARD,    PRINTER,   AND  TAPE  DRIVE
                         1150  
              <O001>     1151  KEYBOARD_ID          EQU   1                              ;KYBD   ID
              <0002>     1152  PRINTER_ID           EQU   2                              ;PRINTER  ID
              <0008>     1153  TAPE_ID              EQU   8                              ;TAPE DRIVE  ID
                         1154  
              <0002>     1155  ERROR_RETRY          EQU   2                              ;MAX RETRYS ON  ERRORS,   READ BLOCK  AND  WRITEBLOCK
                         1156  
              <OOOF>     1157  MAX_DEV_ADDR         EQU   15                             ;HIGEST POSSIBLE  DEVICE   ADDRESS
                         1158                                                            ; ON NETWORK
                         1159  
                         1160  
                         1161  ;PCB COMMAND   EQUATES
                         1162  
                         1163  
             <OOO0O>     1164  PCB_IDLE             EQU   0                              ;THIS  ISAN  IDLE STATE
                         1165  
              <O001>     1166  PCB_SYNC1            EQU   1                              ;SYNC BYTE  1
              <O081>     1167  PCB_SYNC1_ACK        EQU   PCB_SYNC1+80H                  
                         1168  
              <0002>     1169  PCB_SYNC2            EQU   2                              ;SYNC BYTE 2
              <O082>     1170  PCB_SYNC2_ACK        EQU   PCB_SYNC2+80H                  
                         1171  
              <0003>     1172  PCB_SNA              EQU   3                              ; SET NEW PCB ADDRESS
              <0083>     1173  PCB_SNA_ACK          EQU   PCB_SNA+80H                    
                         1174  
              <O004>     1175  PCB_RESET            EQU   4                              ; RESET ALL NODES
             <O0084>     1176  PCB_RESET_ACK        EQU   PCB_RESET+80H                  
                         1177  
              <O005>     1178  PCB_WAIT             EQU   5                              ;
              <0085>     1179  PCB_WAIT_ACK         EQU   PCB_WAIT+80H                   
                         1180  
                         1181  
                         1182  
                         1183  ;DCB COMMAND   EQUATES
                         1184  
              <O00O>     1185  DCB_IDLE             EQU   00                             ;
              <O001>     1186  DCB_STATUS           EQU   O1                             ; REQUEST STATUS
              <0002>     1187  DCB_RESET            EQU   02                             ; RESET NODE
              <0003>     1188  DCB_WR               EQU   03                             ; WRITE DATA TO DEVICE
              <0004>     1189  DCB_RD               EQU   04                             ; READ DATA FROM DEVICE
                         1190  
                         1191  
                         1192  
              <FECO>     1193  INIT_PCB_ADDR        EQU   OFECOH                         ; INITIAL ADDRESS  OF  THE PCB
                         1194  
              <D390>     1195  FCB_S                EQU   0D390H                         ; FCB HEADER AREA
              <D400>     1196  THREE1K_BLKS         EQU   0D400H                         ; 3K FCB DATA AREA
                         1197  
                         1198  
                         1199  ;GENERAL  USAGE  EQUATES    FOR USE WITH  DCB INFO
                         1200  
              <O007>     1201  CMND_COMPLETE_BIT    EQU   7        - THIS IS THE BIT  THAT  INDICATES   THE 
                         1202                                                            ; COMMAND HAS BEEN  PROCESSED.
              <O080>     1203  CMND_FIN_STATUS      EQU   80H                            ; THIS IS THE STATUS  OF  A COMMAND
                         1204                                                            ; THAT COMPLETED WITH  NO  ERRORS
              <OO8C>     1205  KBD_NAK              EQU   BCH                            ; INDICATES NO KEY  READY
                         1206  
              <0O86>     1207  PR_NAK               EQU   86H      - INDICATES THE PRINTER   IS BUSY 
                         1208  
              <0003>     1209  ETX                  EQU   03H                            ; END OF DATA STRING INOICATOR
                         1210  
              <OO9B>     1211  TIMEOUT              EQU   9BH                            ; DEVICE TIMED OUT
                         1212  ;
                         1213  ;PSSSRSSTSSSSTETSSTTTSRTSSRSTITSSSTERSSOREARSTEKS SsESesserzsrst=s=
                         1214  ;PSSSTSSSSSBSSESSSSSSSSBSESTSSFSSFSSSSSTSSSSSTSESASESSETSSSTSEsrzrere
                         1215  ;SSSSESERBRESESESSSSSSSseseserestsrerrsr=sesezsz2eserrerczresrrerzezcoersrses2erezrror=z=2
                         1216  ;
   FC30                  1217  SKIP                                                      
                         1218  
                         1219  NAME ^Rev O7 - jki^
                         1220  
                         1221  ;DeA_uOS  OO MACRO               ;Header Rev. 5
                         1222  ;                .GOTO Ede_A_uOS_00
                         1223  
                         1224  ; Project:      ADAM, 83-101
                         1225  
                         1226  ;      SRSSHKSHAAKSHSESAEARSSAERSESEESH   EKHEKESHRSHEHEKERERE EEES
                         1227  ;      sees                                                    eeee
                         1228  ;      eeee             A_uO000              RPD               seee
                         1229  ;     eee                                                     ess
                         1230  ;      SSHSHAKHSESHSARHESS ERHSEEHE EHTS             EEREREKERETESS
                         1231  ;
                         1232  ;
                         1233  ;        Rev History
                         1234  ;        Rev.  Date         Name       Change
                         1235  ;         7    O8oct1545    jk         make  LOAD ASCII  load chars from  O to 7F
                         1236  ;         6    O8oct0003    rfj        Fixed 100H bug with Bob Greenberg's
                         1237  ;                                       algorithm
                         1238  ;         5    O7oct1708    rfj        __EFXOVER changed to _ EFFECT_OVER
                         1239  ;         4    OSoct10:40   rfj        Decoder now saves Acc before getting
                         1240  ;                                       interrupt data
                         1241  ;                                       Removed excess documentation on Put/Load   Ascii
                         1242  ;                                       Commented out all unreferenced symbols  with  ;eee
                         1243  ;                                       Renamed WRSPR_NM_TBL  to WR_SPR_ATTRIBUTE
                         1244  ;                                       globalized  UPDATE SPINNER
                         1245  ;                                       new address fcr the ASCII table  referenced
                         1246  ;         3    28septi3i7   rfj        Multy changes after personal review
                         1247  ;                                       but not approved
                         1248  ;         2    25sept900a   RPD        made ram externa!
                         1249  ;         1    24septi250p  RPO        addition of more routines & new port  accessing
                         1250  ;         O    24aug430p    RPO        Initial creation date (READ & WRITE  VRAM)
                         1251  ;
                         1252  ;A_u0SOO  stands for ADAM micro  Operating System version O. This file
                         1253  ;contains a scaled down mode! of  COLECOVISION OS 7. Primary routines from
                         1254  ;OS 7 are duplicated for ADAM application  programs use. The functional  areas
                         1255  ;that are supported by these routines  are the VDP, the controllers, the  sound
                         1256  ;chip, memory bank switch, port  collection.
                         1257  
                         1258  
                         1259  
                         1260  
                         1261  ;SSESSSSSSeSSe  soe eseseSeseeeee  seeseseee ee eee eee seeseeeoee eee  eeaseee
                         1262  
                         1263                       ORG   EOS_CODE                       
                         1264  
                         1265  ;SSSSHSSHSSHHS   SESHSSHHEHEHSH ESE  ESE  SEHEHEHESEEEE  HEHEHE    SRESEESESE  EEE
                         1266  
                         1267  ;   Name:                WRITE_VRAM
                         1268  ;
                         1269  ;   Function:            Writes    to  VRAM   the   contents    of   the  data    ina   buffer    area.
                         1270  ;
                         1271  ;   Entry:               BC  -  number    of  bytes    to  be  written
                         1272  ;                        DE  -  starting     VRAM   address    to  be  written     to
                         1273  ;                        HL  -  address    of  buffer    containing      the   data
                         1274  ;
                         1275  ;   Exit:                None.
                         1276  ;
                         1277  ;   Registers    used:   AF,  BC,   DE,   HL
                         1278  ;
                         1279  ;   Size:                ROM  -  28  bytes
                         1280  ;                        RAM  -  O  bytes
                         1281  ;
                         1282  ;   Comments:            This   version    of  WRITE   _VRAM   is  provided     for  EOS   operation.
                         1283  ;                        NOTE:   The   100H   bug   found   in  OS  7  has   been   corrected.
                         1284  ;
                         1285  ;   Comparision:         left  out   pascal    entry    point
                         1286  ;                        code  compacted
                         1287  ;                        100H  bug   fixed
                         1288  ;                        edited   for   documentation
                         1289  ;                        reference     port   table
                         1290  
   E000                  1291  WRITE_VRAM:                                               
   E000  C5              1292                       PUSH  BC                             ;BC   has   the  number    of  bytes    to  xfer
   E001  EB              1293                       EX    DE,HL                          ;>HL<--vram     addr  ,0E<--source     address
   E002  CDE1E5          1294                       CALL  SET_WRITE                         :PUMP    THE  VRAM   ADDR   TO  THE   VDP 
   E005  69              1295                       LD    L,C                            ;save    C  (the  data  _port_addr    )
   E006  C1              1296                       POP   BC                             ;restore     the  xfer   count
   E007  EB              1297                       EX    DE,HL                          ;HiL<--source     address,port       in€
   E008  79              1298                       LD    A,C                            ;Save    low  order   of  count     in A
   E005  48              1299                       LD    C,,€                           ;  And  get   the   port   into   C
   E00A  50              1300                       LD    0,8                            ;Get   HI  order    count   in  DO
                         1301                                                            ;  to  free   up  B  for   low  order    count
   E00B  14              1302                       INC   D                              ;Increment      Hi  count   to  cover
                         1303                                                            ;  for  O   in  DEC  D  after    low  loop
   E00C  47              1304                       LD    B,A                            ;Put   low   order   in  86 for   OUTI
   E00D  87              1305                       OR    A                              ;Check    tf  low   order   is  zero   the    first   time
   E00E  2806            1306                       JR    Z,OUT_DEC_HI_BYTE              ;If   so  then   decrement     Hi  count   before     low  loop
   E010                  1307  OUTPUT_LOOP:                                              
   E010  EDA3            1308                       OUTI                                 ;DATA  PORT     = buffer   data      write    the   data  to  the   VOP
                         1309                                                            ;>for   OUTI:    [C]  <--   [HL],   B  =  B  -   1 and  HL  =  HL  +  1
   E012  00              1310                       NOP                                  ;Gelay    for   stow  VOP
   E013  00              1311                       NOP                                  
   E014  20FA            1312                       JR    NZ,OUTPUT    LOOP              ;until    byte   count   low   (B  reg)   =  0
   E016                  1313  OUT_DEC_HI_BYTE:                                          
   E016  15              1314                       DEC   D                              ;>byte  count    high   = byte    count   high    -  1
   E017  20F7            1315                       JR    NZ,OUTPUT    LOOP              ;until    byte   count   high   (A  reg)   =   O
   E019  C9              1316                       RET                                  
                         1317  
                         1318  ;
                         1319  ;   Name:                   READ _VRAM
                         1320  ;
                         1321  ;   Function:               Reads   from  VRAM    and   puts    the  read   data    into  a  buffer    area.
                         1322  ;
                         1323  ;   Entry:                  BC  - number    of  bytes    to   be  read
                         1324  ;                           DE  - starting     VRAM   address      to be   read   from
                         1325  ;                           HL  - address    of   buffer     to  receive    the   read   data
                         1326  ;
                         1327  ;   Exit:                   None.
                         1328  ;
                         1329  ;   Registers      used:    AF,  BC,  DE,   HL
                         1330  ;
                         1331  ;   Size:                   ROM  - 22  bytes
                         1332  ;                           RAM  - O  bytes
                         1333  ;
                         1334  ;   Comments:               This  version    of   READ  VRAM     its provided     for  stand    alone   operation.
                         1335  ;                           NOTE:  The   {OOH   bug   found     tn OS   7 has   been   corrected.
                         1336  ;
                         1337  ;   Comparision:            left  out  pascal     entry   point
                         1338  ;                           code  compacted
                         1339  ;                           100H  bug  fixed
                         1340  ;                           edited   for  documentation
                         1341  ;
   E01A                  1342  
   E01A  C5              1343                       PUSH  BC                             ;BC  has   the  number    of  bytes    to  xfer
   E01B  EB              1344                       EX    DE,HL                          ;HL<--vram     addr  ,DE<--source      address  .
   E01C  CDE1E7          1345                       CALL  SET READ                       ;pump   the  vram   addr    to  the   vdp
   E01F  69              1346                       LD    L,C                            ;save   C  (the   data_port_  addr)
   E020  C1              1347                       POP   BC                             ;restore    the   xfer  count
   E021  EB              1348                       EX    DE,HL                          ;HL<--source      address,port       ine
   E022  79              1349                       LD    A,C                               :SAVE    LOW  ORDER    OF  COUNT    INA 
   E023  48              1350                       LD    C,E                            ;  And   get  the   port   into   C
   E024  50              1351                       LD    0,8                            ;Get   HI  order    count    in OD
                         1352                                                            ;  to  free   up  B  for   tow   order   count
   E025  14              1353                       INC   D                                  >INCREMENT     HI  COUNT   TO   COVER 
                         1354                                                            ;  for   O  tn  DEC  D  after    tow   loop
   E026  47              1355                       LD    B,A                            ;Put   low   order   in  86 for   OUTI
   E027  B7              1356                       OR    A                              ;Check    if  tow   order   is   zero   the  first     time
   E028  2806            1357                       JR    Z,IN_DEC_HI_   BYTE            ;If   so  then   decrement     Hi  count    before     low   loop
   E02A                  1358  INPUT_LOOP:                                               
   E02A  EDA2            1359                       INI                                  ;DATA_PORT      = buffer   data      read   the  data     from   to    the   VDP
                         1360                                                            ;for   INI:   [C]}  <--  [HL],    B  =  B  -  1 amd    HL  =  HL   +   1
   E02C  00              1361                       NOP                                  ;delay    for   slow   VDP
   E02D  00              1362                       NOP                                  
   E02E  20FA            1363                       JR    NZ,INPUT  _LOOP                ;until    byte   count   low   (B  reg)    = O
   E030                  1364  IN_DEC_HI_BYTE:                                           
   E030  15              1365                       DEC   D                              ;byte   count    high   = byte    count    high   -   1
   E031  20F7            1366                       JR    NZ,INPUT    LOOP                   SUNTIL    BYTE   COUNT   HIGH    [A  REG]   =  O 
   E033  C9              1367                       RET                                  
                         1368  
                         1369  ;
                         1370  ;   Name:                 WRITE REGISTER
                         1371  ;
                         1372  ;   Function:             Writes  a data   byte   vaiue    to  a destred    VDP  registe:
                         1373  ;
                         1374  ;   Entry:                8 - register    number    to  write   to
                         1375  ;                         C - data  byte   value    to  be  written
                         1376  ;
                         1377  ;   Exit:                 if register   number    =  0  or  ft, the  respective    byte
                         1378  ;                         of the  VDP_MODE   WORD    is  updated.
                         1379  ;
                         1380  ;   Registers     used:   A,BC,E
                         1381  ;
                         1382  ;   Size:                ROM  - 27  bytes
                         1383  ;                         RAM - O  bytes
                         1384  ;
                         1385  ;   Comments:            This version    of  WRITE  REGITER      1s provided    for  stand    alone    operation.
                         1386  ;
                         1387  ;   Comparision:          left out  pascal    entry   point
                         1388  ;                        code  compacted
                         1389  ;                        edited   for  documentation
                         1390  
   E034                  1391  __WRITE_REGISTER:                                         
   E034  59              1392                       LD    E,C                            ;Move   data  to  E— register
   E035  3AFC29          1393                       LD    A,[VDOP_CTRL_PORT]             ;Get  the  control    port    value
   E038  4F              1394                       LD    C,A                            ;Put   in Cc
   E039  ED59            1395                       OUT   [C],E                          ;Output   data   value.
   E038  78              1396                       LD    A,B                            ;Get  port   #  INA
   E03C  F680            1397                       OR    80H                            ;Set  high   bit  for   277772?
   E03E  ED79            1398                       OUT   [C],A                          ;Out  to  VOP
   E040  78              1399                       LD    A,B                            ;Get  back   port  value
   E041  B7              1400                       OR    A                              ;Check   for  zero
   E042  78              1401                       LD    A,E                            ;Put  data   in  accumulator
                         1402  
   E043  2004            1403                       JR    NZ,CHK_REG   1                 ;1f  not  zero   then   see   if  register     1
   E045  32FD61          1404                       LD    [VDP_MODE_WORD],A              ;If  register    zero   was   written     to then
                         1405                                                            ; Save   data   in VDP_MODE    WORD
   E048  C9              1406                       RET   SEXIT                          
                         1407  
   E049                  1408  CHK_REG_1:                                                
   E049                  1409                       DEC   B                              ;Check   for  register     1  in  B
   E04A                  1410                       RET   NZ                                -IF  NOT  THEN   RETURN 
   E046                  1411                       LD    [VDOP_MODE  WORD+1],A             >IF  SO  THEN  STORE   DATA    IN  VOP_MODE    WORD?! 
   E04E                  1412                       RET   -EXIT                          
                         1413  
                         1414  
                         1415  
                         1416  ;     Name :                READ   REGISTER
                         1417  ;
                         1418  ;     Function:             Reads     a data     byte   value   from    the   Colecovision       CTRL  PORT.
                         1419  ;
                         1420  ;     Entry:                None.
                         1421  ;
                         1422  ;     Exit:                 A  -  data     byte   value    read   in
                         1423  ;
                         1424  ;     Registers     used:   A,C
                         1425  ;
                         1426  ;     Size:                 ROM   -   3 bytes
                         1427  ;                           RAM   -  O  bytes
                         1428  ;
                         1429  ;     Comments:             This   version       of  READ  REGISTER       is  provided     for   stand   alone     operation.
                         1430  ;                           This   routine       does   a direct    access      to  the   COLECOVISION       I/0   ports.
                         1431  ;
                         1432  ;     Comparision:          edited     for   documentation
                         1433  ;
   E04F                  1434  READ                 REGISTER:                                
   E04F  3AFC29          1435                       LD    A,[VOP_CTRL_PORT]              
   E052  4F              1436                       LD    C,A                            
   E053  ED78            1437                       IN    A,[C]                          ;get    the   data   from   CTRL_PORT
   E055  32FD63          1438                       LD    [VOP_STATUS      BYTE],A       ;Save    a  copy    of  VDP   status    data
   E058  C9              1439                       RET                                  
                         1440  
                         1441  
                         1442  ;
                         1443  ;   Name:               FILLVRAM
                         1444  ;
                         1445  ;   Function:           Fill a VRAM  memory  buffer  with a constant  byte value.
                         1446  ;
                         1447  ;   Entry:              A - constant  byte  vaiue to  be written
                         1448  ;                       DE - number  of  bytes itnthe  VRAM memory  buffer
                         1449  ;                       HL - starting   VRAM address  to be written  to
                         1450  ;
                         1451  ;   Exit:               None.
                         1452  ;
                         1453  ;   Registers    used:  AF, C, DE
                         1454  ;
                         1455  ;    Size:               ROM - 18 bytes
                         1456  ;                        RAM - O bytes
                         1457  ;                     -
                         1458  ;    Comments:           This version  of  FILL_VRAM  is provided  for stand alone operation.
                         1459  ;                        This routine  does  a direct  access to  the COLECOVISION I/O ports.
                         1460  ;
                         1461  ;    Comparision:        edited for  documentation
                         1462  ;                        uneeded call   to READREGISTER   taken  out
                         1463  
                         1464  
   E053                  1465  FILL_VRAM:                                                
   E059  F5              1466                       PUSH  AF                             ;Save the  data to fill with
   E05A  CDE1E9          1467                       CALL  SET_WRITE                      ;Sets the  ctrl port data and
   E05D  E1              1468                       POP   HL                             ;popping  AF into HL to restore the  fill  data
   E05E                  1469  FILL:                                                     ;repeat
                         1470                                                            ;  get back  a copy of the saved constant
   E05E  ED61            1471                       OUT   [C],,H                         ;  write  the constant out to the VRAM  buffer
   E060  18              1472                       DEC   DE                             ;  byte  count = byte count - 1
   E061  7A              1473                       LD    A,O                            ;until byte  count = O
   E062  B3              1474                       OR    E                              
   E063  20F9            1475                       JR    NZ,FILL                        
   E065  C9              1476                       RET                                  ;all done
                         1477  
                         1478  ;
                         1479  ;
                         1480  ;   Name:                  INIT TABLE
                         1481  ;
                         1482  ;   Function:              INIT TABLE     initializes     the addresses     cf  the  VRAM    tabies.
                         1483  ;                          The passed    address    is  converted    to  tre   correct    format    needed
                         1484  ;                          to setup    the  VOP  address    registers.     ‘he  following     tabie    codes
                         1485  ;                          are use   to   itndentify  which   table    address    is being    setup:
                         1486  ;
                         1487  ;                            O  - SPRITE    ATTRIBUTE    TABLE    (SAT)
                         1488  ;                            1  - SPRITE    GENERATOR    TABLE    (SGT)
                         1489  ;                            2  - PATTERN    NAME   TABLE         (PNT)
                         1490  ;                            3  - PATTERN    GENERATOR    TABLE   (PGT)
                         1491  ;                            4  - PATTERN    COLOR   TABEL        (PCT)
                         1492  ;
                         1493  ;   Entry:                A  -  table   code   (see  above)
                         1494  ;                         HL  -  table   address
                         1495  ;
                         1496  ;   Exit:                 None.
                         1497  ;
                         1498  ;   Registers     used:   AF,  BC,   HL,  IX,   IY
                         1499  ;
                         1500  ;   Size:                 ROM  -  99  bytes
                         1501  ;                         RAM  -  O  bytes
                         1502  ;
                         1503  ;   Comments:             This   version    of  INIT_TABLE    is  provided    for   stand   alone    operation.
                         1504  ;
                         1505  ;   Comparision:           jleft out  pascal    entry   point
                         1506  ;                         code  compacted
                         1507  ;                         edited   for   documentation
                         1508  ;
   E066                  1509  __INIT_TABLE:                                             
                         1510  
   E066  4F              1511                       LD    C,A                            
   E067  0600            1512                       LD    B,0                            
   E069  DD21FD64        1513                       LD    IX,VRAM_ADDR_TABLE             ;point    to  start   of  VRAM_ADOR_TABLE
   E06D  DD09            1514                       ADD   IX,BC                          ;add   in  the   index
   E06F  DD09            1515                       ADD   IX,BC                          
   E071  DD7500          1516                       LD    [IXX+0],L                      ;save   the  address
   E074  DD7401          1517                       LD    [IX+1],H                       
                         1518                                                            ;CHECK   VDP   GRAPHICS    MODE
   E077  3AF061          1519                       LD    A,[VDP_MODE    WORD]           ;'f  VDOP_MODE  WORD    bit   t   mode   bit   3   =  1
   E07A  CB4F            1520                       BIT   1,8                            
   E07C  2827            1521                       JR    Z,INIT_TABLE8O                 
                         1522                                                            ;   ts   graphics     mode   2,  look   for   PGT  or  PCT   first
   E07E  79              1523                       LD    A,C                            ;   get  the   table   code
   E07F  FE03            1524                       CP    3                              ;   if  table   code   =  PGT
   E081  2806            1525                       JR    Z,CASE  OF  GEN                ;      then  setup   PGT   address
   E083  FE04            1526                       CP    4                              ;      {f  table   code   = PCT
   E085  2810            1527                       JR    Z,CASE  OF  COLOR              ;      then  setup   PCT   address
   E087  181C            1528                       JR    INIT  TABLE8O                  ;     else   not   a special     case,   use   normal   setup
                         1529  
                         1530  ;
                         1531  ; special    case:   graphics   mode   2,  address    of  PGT
                         1532  ;
   E089                  1533  CASE_OF_GEN:                                              
   E089  0604            1534                       LD    B,4                            ;register   mumber  *  PGT   base  address    register
   E08B  70              1535                       LD    A,L                            ;if  PGT  address  =  QOOOH                                                                      
   E08C  64              1536                       OR    H                              
   E08D  2004            1537                       JR    NZ,CASE_OF_GEN_IO              
   E08F  0E03            1538                       LD    C,3                            ;   data  byte  value  for   address   OOOOH
   E051  1828            1539                       JR    INIT_TABLES0                   
   E053                  1540  CASE_OF_GEN_IO:                                           ;else    PGT address   <>  OOOOH
   E093  0E07            1541                       LD    C,7                            ;   data  byte  value  for   address   2000H
   E095  1824            1542                       JR    INIT_TABLES90                  ;endif
                         1543  ;
                         1544  ; special    case:   graphics   mode   2,  address    of  PCT
                         1545  ;
   E097                  1546  CASE_OF_COLOR:                                            
   E057  0603            1547                       LD    8,3                            ;register   number  =  PCT   base  address    register
   E059  7D              1548                       LD    AL                             ;if  PCT  address  =  QOOQOH
   E05A  64              1549                       OR    H                              
   E09B  2004            1550                       JR    NZ,CASE   OF  CLR10            
   E05D  0E7F            1551                       LD    C,7FH                          ;   data  byte  value  for   address   OOOOH
   E05F  161A            1552                       JR    INIT_TABLE90                   
   E0A1                  1553  CASE_OF_CLRIO:                                            ;else    PCT address   <>  OOOOH
   E0A1  0EFF            1554                       LD    C,OFFH                         ;   Gata  byte  value  for   address   2000H
   E0A3  1816            1555                       JR    INIT_TABLE90                   ;endif
                         1556  ;
                         1557  ; not  a  special    case  (i.e.  not   mode   2,  PGT  or    PCT)
                         1558  ;
   E0A5                  1559  INIT_TABLE8O:                                             ;base   address  = table   address    /  factor
   E0A5  FD21E0BF        1560                       LD    IY,BASE  FACTORS               ;potnt   to start  of  the   the  factor   table
   E0A5  FD05            1561                       ADD   IY,BC                          ;index   into the  table   by  the  table    code
   E0AB  FD05            1562                       ADD   IY,6C                          
   E0AD  FD7E00          1563                       LD    A,[IY+0]                       ;get  the  shift  count
   E0B0  FD4601          1564                       LD    B,[IY+1]                       ;get  the  register   number
   E0B3                  1565  DIVIDE:                                                   
   E083  CB3C            1566                       SRL   H                                  :SHIFT   HI-BYTE 
   E0B5  CB10            1567                       RR    L                                  :SHIFT   LO-BYTE 
   E0B7  3D              1568                       DEC   A                              ;shift   count  = shift   count   -  1
   E0B5  20F9            1569                       JR    NZ DIVIDE                      
   E0BA  4D              1570                       LD    C,L                                :GET  THE  DATA  BYTE  VALUE 
   E088                  1571  INIT_TABLE90:                                             
   E0BB  CDFD20          1572                       CALL  WRITE_REGISTER                 ;setup   the base  register
   E0BE  C9              1573                       RET                                  
                         1574  
                         1575  ;
                         1576  ; base factor  table, used  to calculate base  addresses
                         1577  ;
   E0BF                  1578  BASEFACTORS:                                              
   E0BF  07              1579                       DEFB  7                              ;table code O base factor
   E0C0  05              1580                       DEFB  5                              ;register 5, SAT base address
   E0C1  08              1581                       DEFB  11                             ;table code 1 base factor
   E0C2  06              1582                       DEFB  6                              ;register 6, SGT base address
   E0C3  0A              1583                       DEFB  10                             ;table code 2 base factor
   E0C4  02              1584                       DEFB  2                              ;register 2, PNT base address
   E0C5  06              1585                       DEFB  11                             ;table code 3 base factor
   E0C6  04              1586                       DEFB  4                          :REGISTER 4,PGT BASE ADDRESS 
   E0C7  06              1587                       DEFB  6                              ;table code 4 base factor
   E0C8  03              1588                       DEFB  3                              ;register 3, PCT base address
                         1589  
                         1590  ;
                         1591  ;   Name:                PUT _VRAM
                         1592  ;
                         1593  ;   Function:            Gets  a block   of  data   from   a  user    buffer   and  puts    itt into  VRAM.
                         1594  ;                       The  following    table   codes   are   used    to identify     which   VRAM  table
                         1595  ;                         isbeing   referenced:
                         1596  ;
                         1597  ;                          O  - SPRITE   ATTRIBUTE     TABLE      (SAT)
                         1598  ;                           1 - SPRITE   GENERATOR     TABLE      (SGT)
                         1599  ;                          2  - PATTERN    NAME   TABLE          (PNT)
                         1600  ;                          3  - PATTERN    GENERATOR    TABLE    (PGT)
                         1601  ;                          4  - PATTERN    COLOR   TABLE         (PCT)
                         1602  ;
                         1603  ;   Entry:               A -  table  code   (see   above)
                         1604  ;                        DE -  starting    index   into   the   table
                         1605  ;                        Hi -  address   of  user   buffer
                         1606  ;                        IY -  block   size  (or   byte   count)
                         1607  ;
                         1608  ;   Exit:                None.
                         1609  ;
                         1610  ;   Registers    used:   AF, DE,  HL,   IY
                         1611  ;
                         1612  ;   Routines    used:    SETCOUNT
                         1613  ;
                         1614  ;   Size:                ROM -  O bytes
                         1615  ;                        RAM -  O bytes
                         1616  ;
                         1617  ;   Comments:            This  version   of  PUT  _VRAM   is  provided    for   stand    alone  operation.
                         1618  ;
                         1619  ;   Comparision:         left  out  pascal   entry   point
                         1620  ;                        took  out  the  mux   sprites    capablity
                         1621  ;                        code  compacted
                         1622  ;                        edited  for  documentation
                         1623  ;
   E0C5                  1624  
   E0C5  CDE0D5          1625                       CALL  SET COUNT                      ;setup    the  actual    byte   count   and  the  absolute VRAM  address
                         1626  *                    CALL  WRITE  VRAM                    ;VRAM    data  =  user   buffer
                         1627  +                    RET                                  
   E0CC  C3FD1A          1628                       JP    WRITE  VRAM                    
                         1629  
                         1630  
                         1631  
                         1632  ;  Name::            GET_VRAM
                         1633  ;
                         1634  ;   Function:         Gets a block of data  from VRAM and  stores it  intoa user buffer.
                         1635  ;                     The following table  codes are used  to  itdentifwhich VRAM table
                         1636  ;                     is being referenced:
                         1637  ;
                         1638  ;                       O - SPRITE ATTRIBUTE  TABLE  (SAT).
                         1639  ;                       1 - SPRITE GENERATOR  TABLE  (SGT)
                         1640  ;                       2 - PATTERN NAME TABLE       (PNT)
                         1641  ;                       3 - PATTERN GENERATOR  TABLE (PGT)
                         1642  ;                       4 - PATTERN COLOR  TABEL     (PCT)
                         1643  ;
                         1644  ;   Entry:            A - table code (see  above)
                         1645  ;                     DE - starting index  into the table
                         1646  ;                     HL - address of user  buffer
                         1647  ;                     IY - block size (or byte  count)
                         1648  ;
                         1649  ;   Exit:             None.
                         1650  ;
                         1651  ;   Registers  used:  AF, DE, HL, IY
                         1652  ;
                         1653  ;   Routines  used:   SETCOUNT
                         1654  ;
                         1655  ;   Size:             ROM - O bytes
                         1656  ;                     RAM - O bytes
                         1657  ;
                         1658  ;   Comments:         This version of GET VRAM  is provided  for stand alone operation.
                         1659  ;
                         1660  ;   Comparision:      left out pascal entry  point
                         1661  ;                     code compacted
                         1662  ;                     edited for documentation
                         1663  
   E0CF                  1664  __GET_VRAM:                                               
   E0CF  CDE0D5          1665                       CALL  SETCOUNT                       ;setup  the actual byte count and the  absolute VRAM  address
                         1666                       CALL  READ_VRAM                      ;user buffer  = VRAM data
                         1667                       RET                                  
   E0D2  C3FD1D          1668                       JP    READ_VRAM                      
                         1669  
                         1670  ;
                         1671  ;  CALLED     BY   PUT_VRAM_     AND  GET  VRAM_
                         1672  ;
                         1673  ; SETS     BYTE   COUNT    AND  INDEX   FOR   WRITES     TO  AND   READS   FROM   VRAM.
                         1674  ;
                         1675  ;   TABLE                BYTES/ITEM
                         1676  ;   SPRITE   NAME               4
                         1677  ;   SPRITE   GEN                8
                         1678  ;   PATTERN    NAME             1
                         1679  ;   PATTERN    GEN              #
                         1680  ;   COLOR    (MODE     1)       1
                         1681  ;   COLOR    (MODE    2)        a
                         1682  ;
   E0D5                  1683  SET_COUNT                                                 
   E0D5  FDE5            1684                       PUSH  IY                             ;Save   count   on  stack
   E007  4F              1685                       LD    C,A                            ;Get  table   code    4
   E0D8  FE04            1686                       CP    4                              ;See   if color    table
   E0DA  2008            1687                       JR    NZ,NOT   COLOR   TBL_ACCESS    ;If  not   then  check    for  name    table
                         1688                                                            ;Color   Table
   E0DC  3AFD61          1689                       LD    A,[VOP_MODE    WORD]           ;Get   mode   word   to  check    graphics     type
   E0DF  E602            1690                       AND   02H                            ;Bit    1 indicates     mode   i  or  2
   E0E1  2814            1691                       JR    Z,ADD_TO_  BASE                ;If   mode   1  then  start    index    is  not   modif   ted
   E0E3  79              1692                       LD    A,C                            ;Get   table   code   back
                         1693                                                            ;Fall    through    to  multiply     by  8  for   mode   2.
   E0E4                  1694  NOT_COLOR_TBL_ACCESS                                      
   E0E4  FE02            1695                       CP    2                              ;Check    for  Name    table
   E0E6  280F            1696                       JR    Z,ADD  TO  BASE                ;If   so  then   don’t   modify    start    index
                         1697                                                            ;At   this  point    the   table   code    is:
                         1698                                                            ;   Sprite   attribute      table,    Sprite    gen   table,
                         1699                                                            ;  Pattern    gen   table,   or   Color   table     in  Mode   2
                         1700  
   E0E5  EB              1701                       EX    DE,HL                              -GET   COUNT    IN HL 
   E0E5  29              1702                       ADD   HL,HL                          ;*2
                         1703  
   E0EA  29              1704                       ADD   HL,HL                          ;*4
   E0EB  87              1705                       OR    A                              ;Check    for  Sprite    attr   table
   E0EC  2801            1706                       JR    Z,HAVE_CNT                     ;If   so  then   Index*4    is  complete
   E0EE  29              1707                       ADD   HL,HL                          ;If  not   then   Index*8     is  required
                         1708                                                            ;  this   is  for   the  pattern    gen   table,
                         1709                                                            ;  sprite   gen   table,    or  color    gen   table
                         1710                                                            ;  in  mode   2.
   E0EF                  1711  HAVE_CNT:                                                 
   E0EF  E5              1712                       EX    DE,HL                          ;Put   updated    index    in  DE
   E0F0  E3              1713                       EX    [SP],HL                        ;Get   count   off   stack
                         1714                                                            ;Put  address    of  RAM   buffer    on  stack
                         1715  
                         1716                                                            ;Now   modify    the  count    for:
                         1717                                                            ;  Sprite   attribute      table,   Sprite     gen   table,
                         1718                                                            ;  Pattern    gen   table,   or   Color   table     in  Mode   2
   E0F1  29              1719                       ADD   HL,HL                          
   E0F2  29              1720                       ADD   HL,HL                          
   E0F3  2801            1721                       JR    Z,HAVE_CNT2                    ;If  Sprite    attr   table    then   +4  {is  enoungh
                         1722                                                            ;  (the   zero   flag   is  still   set   from    earlier)
   E0F5  29              1723                       ADD   HT,HL                          ;Count    *8  for  remaining      tables
   E0F6                  1724  HAVE_CNT2:                                                
   E0F6  E3              1725                       EX    [SP],HL                        ;Save   updated    count    on  stack
                         1726                                                            ;Restore    RAM   buffer    off   stack
   E0F7                  1727  ADD_TOBASE:                                               
   E0F7  79              1728                       LD    A,C                            ;Get table code back
   E0F8  01FD64          1729                       LD    BC,VRAMADDR_ TABLE             ;Get top of address table
   E0FB  E5              1730                       PUSH  HL                             ;Save RAM buffer on stack
   E0FC  2600            1731                       LD    H,OOH                          ;Put table code tnto HL
   E0FE  6F              1732                       LD    L,A                            
   E0FF  29              1733                       ADD   HL,HL                          ;*2 to offset for addresses   in table
   E100  09              1734                       ADD   HT,BC                          ;Add to top of table
   E101  7E              1735                       LD    A,[HL]                         ;Low byte of VRAM table address
   E102  23              1736                       INC   HL                             
   E103  66              1737                       LD    H,[HL]                         ;High byte of VRAM table  address
   E104  6F              1738                       LD    L,A                            
   E105  19              1739                       ADD   HL,DE                          ;Add offset from start of  table
   E106  EB              1740                       EX    DE,HL                          ;Absolute VRAM address  in DE
   E107  E1              1741                       POP   HL                             ;Restore RAM buffer address
   E108  C1              1742                       POP   BC                             ;Restore Count into BC
                         1743                                                            ;Registers are now ready  for
                         1744                                                            ; a call to the basic READ/WRITE   VRAM routines
   E109  C9              1745                       RET                                  ;Exit
                         1746  
                         1747  ;*******************      CALC  OFFSET    *****************************************************************
                         1748  ;
                         1749  ;DESCRIPTION:         THIS  ROUTINE    CALCULATES     THE   PROPER    OFFSET     INTO  THE  NAME    TABLE
                         1750  ;                      FOR  THE  PATTERN     POSITION    GIVEN   BY  X PAT   POS,    Y_PAT   POS.     THE
                         1751  ;                      FORMULA   USED   IS:   OFFSET   =  32*Y  PAT  POS    +   XPAT   POS
                         1752  ;
                         1753  ;INPUT:               D     _PAT_POS
                         1754  ;                      E     _PaT_POS
                         1755  ;
                         1756  ;OUTPUT  -            DE    OFFSET
                         1757  ;
                         1758  ;RHSHSSEHASESHES  HEHEHE  ESAS       EHAH  EASE     EHH   EHH                                RE  KEERE EEE
                         1759  ;
   E10A                  1760  __CALC_OFFSET:                                            
   E10A  E5              1761                       PUSH  HL                             ;save   HL
   E108  CB7A            1762                       BIT   7,D                            ;1f   Y_PAT  POS     is minus
   E100  2804            1763                       JR    Z,ELSE_11                      
   E10F  26FF            1764                       LD    H,OFFH                         ;   extend     negative    sign
   E111  1802            1765                       JR    END_IF_11                      
   E113                  1766  ELSE_11:                                                  ;else
   E113  2600            1767                       LD    H,O                            ;   extend     positive    sign
   E115                  1768  END_IF_11:                                                ;endif
                         1769  
   E115  6A              1770                       LD    L,D                            ;OFFSET    =   32*Y PAT   POS    + X PAT   POS
   E116  29              1771                       ADD   HL,HL                            SHL=2*Y   PAT   POS 
   E117  29              1772                       ADD   HL HL                          ;     4+     .
   E118  29              1773                       ADD   HL,HL                            >     OF     * 
   E119  29              1774                       ADD   HL,HL                          ;   16       .
   E11A  29              1775                       ADD   HL,HL                             > ; 32s      °
                         1776  
   E116  C878            1777                       BIT   7,€                               > 1F  X_PAT_POS     IS  MINUS 
   E11D  2804            1778                       JR    Z,ELSE_12                      
   E11F  16FF            1779                       LD    D,OFFH                             > ; extend    negative     sign
   E121  1802            1780                       JR    END_IF_12                      
   E123                  1781  ELSE_12:                                                  ;else
   E123  1600            1782                       LD    0,0                            ;   extend    positive     sign
   E125                  1783  ENO_IF_12:           endif                                
                         1784  
   E125  19              1785                       ADD   HL,DE                          ;HL=32¢Y   PAT    POS   +  XPAT_POS
   E126  EB              1786                       EX    DE,HL                          
   E127  EF              1787                       POP   HL                             ;restore    HL   intact
   E128  C6              1788                       RET                                  
                         1789  
                         1790  ; ********************    PX TO.PTRN.  POS  ***************************************
                         1791  ;DESCRIPTION:        DIVIDES   REG DE BY  8B, IF SIGNED   RESULT   >  127  THEN   E  >=  MAX  SIGNED
                         1792  ;                   POSITIVE   NUMBER.  IF RESULT   <  -128,  THEN  E      MIN   NEGATIVE    NUM
                         1793  ;INPUT:              DE =  16  BIT SIGNED  NUMBER
                         1794  ;OUTPUT:             DE/8  <  -128     —E =  -128
                         1795  ;        -128   <= DE/8   <=+127      E  = DE/8
                         1796  ;        +127   <  DE/8               E  = +127
                         1797  ;eeeeeee SESH  EHHEHEH  EHH   EHEHEERE  EEEEEE HEHEHE REESE   EAREEHE HEHEHE  HERES  EEE EES
                         1798  ;
   E129                  1799  __PX_TO_PTRN_POS:                                         
                         1800  
   E129  E5              1801                       PUSH  HL                             ;HL  USED  TO  TEST  MAGNITUDE
                         1802  ;
   E12A  C5              1803                       PUSH  BC                             ;B  WILL  BE  USED  AS  A  COUNTER   IN  THE   DIVIDE
   E12B  0603            1804                       LD    B,3                            
   E120                  1805  PX_2_P_P_1:                                               ;(THIS   IS  THE START   OF  THE   DIVIDE   LOOP)
   E120  CB2A            1806                       SRA   D                              ;16  BIT  SHIFT  LEFT
   E12F  CB18            1807                       RR    E                              
   E131  10FA            1808                       DJNZ  PX_2 P_P_1                     ;DIVIDE   BY  8 LOOP
   E133  C1              1809                       POP   BC                             ;RESTORE   BC  TO  OLD  VALUE
                         1810  ;
   E134  21FF80          1811                       LD    HL,OFF80H           -SET   HL TO  -128 
   E137  CB7A            1812                       BIT   7,0                            ;1S  RESULT   OF DIVIDE    NEGATIVE?
   E139  2006            1813                       JR    NZ,NEGTV                       
                         1814  ;
   E138  19              1815                       ADD   HL,DE                >IF DE-128   < O  [FRNC]  RETURN 
   E13C  E1              1816                       POP   HL                   -SAME   AS [IF  DE<=127    RETURN] 
   E13D  00              1817                       RET   NC                             
   E13E  1E7F            1818                       LD    E,7FH                          ;1F  >  128,  THEN  E  >=  MAX  SIGNED   +  NUM.
   E140  C9              1819                       RET                                  
                         1820  ;
   E141  2600            1821  NEGTV:               LD    H,OOH                          ;SET   HL TO  128
                         1822  ;
   E143  19              1823                       ADD   HL,DE                IF  DE+128   >= O  RETURN 
   E144  E1              1824                       POP   HL                             ;same   as (IF  DE>=-128    RETURN)
   E145  08              1825                       RET   C                              
   E146  1E80            1826                       LD    E,80H                          ;IF  <  -128,  THE  E      MIN  SIGNED   -  NUM.
   E148  C9              1827                       RET                                  
                         1828  
              <OO7F>     1829  DEL                  EQU   7FH                            ;ASCII code for   it
                         1830  ;ASCII_GEN          EQU      LOC_INALPHA      ist byte of  generator  for  NUL
                         1831  ;
                         1832  ; _ LOAD  ASCII
                         1833  ;
                         1834  ;     Loads  the  ASCII  character generators into VRAM at  the
                         1835  ;     current  pattern   generator table (NOTE - INITTABLE   must
                         1836  ;    have   been  called  prior to this).  Only the characters
                         1837  ;     from  the space   to the DEL (20h to 7Fh) are loaded.
                         1838  ;
                         1839  ;Input   Parameters:
                         1840  ;   NONE
                         1841  ;
                         1842  ;Returns:
                         1843  ;   A,   8C, HL,  DE are  destroyed
                         1844  ;
                         1845  ;  Falls   into _PUT_ASCII
                         1846  ;
   E149                  1847                                                            ;
                         1848                                                            ;LO       HL,([PATTRNGENTBL];get base of  current  generator    table
   E149  ED5BF06A        1849                       LD    DE,[PATTRNGENT8L]              ;get base of  current  generator    table
                         1850                                                            ;LD       DE,OOH+8        ;Offset into  it where  SPACE  will   be
                         1851                                                            ;ADD      HL.DE
                         1852                       EX    DE,HL                          ;leave VRAM address   in DE
   E140  210000          1853                       LD    HL,OOH                         ;want to start  with  the nu)!
   E150  010080          1854                       LD    BC,[DEL-OOH+1]                 ;load the entire  ASCII  set (0. .7F)
                         1855  ;
                         1856  ; fall   thru to  PUT_ASCII
                         1857  ;:
                         1858  
                         1859  ;
                         1860  ;  — PUT_ASCII
                         1861  ;
                         1862  ;       Copys ea specified  number of ASCII    character generators    into VRAM.
                         1863  ;       Swaps  to ROM that  contains the  generators   then  swaps  back,  keeps
                         1864  ;       track of  callers  stack and uses  a   tocal stack  that  is known  to
                         1865  ;       be in RAM  when the  ROM is swapped    in.
                         1866  ;
                         1867  ;Input  Parameters:
                         1868  ;  HL  - Character  to tst  load (generally    in rangeO.  .FFH)
                         1869  ;  BC  - Number  of characters  to load  (Not   the number  of bytes)
                         1870  ;  DE  - Address  in VRAM  to load the  ist  generator
                         1871  ;
                         1872  ;  A,  BC, HL,  DE, IX  are  destroyed
                         1873  ;
                         1874  ;  Calis  WRITE _VRAM
                         1875  ;         SWITCH  _MEM
                         1876  ;
   E153                  1877  
   E153  29              1878                       ADD   HL,HL                          ;multiply  char  to  start  loading  by  8
   E154  29              1879                       ADD   HL,HL                          ;SO  can use  it as  an offset   into the
   E155  29              1880                       ADD   HT HL                          ;ASCII  generator
   E156  C5              1881                       PUSH  BC                             ;save  number  of chars   desired
                         1882                                                            ;LD       BC,ASCII_GEN
                         1883                                                            ;LD       BC,([LOC_IN_ALPHA})
                         1884                                                            ;ADD      HL.BC              ;now HL points   to the  ist generator    desired
   E157  E3              1885                       EX    [SP],HL                        ;get  number  of chars  desired
   E158  29              1886                       ADD   HL,HL                          ;and  multiply  by  8
   E159  29              1887                       ADD   HL,HL                          ;   since each  generator   is 8  bytes
   E15A  29              1888                       ADD   HL,HL                          ;      long
   E15B  E3              1889                       EX    [SP],HL                        ;get  back pointer   into  ASCII  generators
   E15C  C1              1890                       POP   BC                             ;get  number  of chars  times  8
                         1891  
   E15D  00210000        1892                       LD    IX,OOOOH                       ;   to use to  save  callers  SP
   E161  DD39            1893                       ADD   IX,SP                          
   E163  51FE6E          1894                       LD    SP,TEMP_STACK                  ;set  stack  into known  RAM
   E166  DDE5            1895                       PUSH  IX                             ;save  callers  SP
                         1896  
   E168  3AFD6E          1897                       LD    A,[CUR_BANK]                   ;remember  which  bank  setting   we
   E16B  F5              1898                       PUSH  AF                             ;    are in
   E16C  3AFC17          1899                       LD    A,[MEM_CNFGOO]                 ;get  value  to let  us get  at the  ALPHA   roms
                         1900  
   E16F  C5              1901                       PUSH  BC                             ;count  would  get  destroyed  by  SWITCH MEM
   E170  CDFD14          1902                       CALL  SWITCHMEM                      
   E173  C1              1903                       POP   BC                             
                         1904  
   E174  D5              1905                       PUSH  DE                             
   E175  ED5B0102        1906                       LD    DE,[LOC_IN_ ALPHA]             
   E179  19              1907                       ADD   HL,DE                          
   E17A  D1              1908                       POP   DE                             
                         1909  
   E178  CDFD1A          1910                       CALL  WRITE_VRAM                     
                         1911  
   E17E  F1              1912                       POP   AF                             ;get  back callers   mem configuration
   E17F  CDFD14          1913                       CALL  SWITCH_MEM                     
                         1914  
   E182  E1              1915                       POP   HL                             ;get  callers  SP
   E183  F9              1916                       LD    SP,HL             -AND RESTORE IT 
   E186  C9              1917                       RET   >                              ;and back to  caller
                         1918  
                         1919  ;
                         1920  ;    Switch_mem:  memory bank  switching  routine
                         1921  ;
                         1922  ;    Inputs:
                         1923  ;                 A = Appropriate   tnput from  SWITCH TABLE
                         1924  ;
                         1925  ;                  Example:
                         1926  ;     Switch Table  Offset    Memory  configuration
                         1927  ;    “eweaeeweweeeewveaeewreeweereerwrtenreweenwweenwrnawxenenWuewewweeaewvnweeeeenwweexe
                         1928  ;
                         1929  ;              -          Boot  ROM and  Alpha  Roms
                         1930  ;              -          Intrinsic   RAM (OOOOH  thru  7FFFH)
                         1931  ;                         Expansion   memory (OOOOH   thru 7FFFH)
                         1932  ;              -          OS_7  and  Intrinsic  RAM (2000H   thru 7FFFH)
                         1933  
                         1934  
                         1935  
                         1936  
                         1937  
                         1938  
                         1939  ;   *¢+¢Note: The values in  the table  are subject   to change  in future
                         1940  ;             releases of ADAM  hardware.
                         1941  ;
                         1942  ;   For an example  of the use  of SWITCH MEM   see PORT COLLECTION    below.
                         1943  ;
                         1944  ;
                         1945  ;    Outputs:
                         1946  ;                  CUR_BANK,  a defined  memory  location  will  contain
                         1947  ;                  the updated  input  parameter  for  applications  and
                         1948  ;                  EOS routines  which  need to  determine  which
                         1949  ;                  memory space  is currently   active.
                         1950  
   E165                  1951  SWITCH               MEM                                  
   E185  47              1952                       LD    B A                            ;SAVE THE  PORT DATA   TO WRITE
   E186  3AFC27          1953                       LD    A [MEMSWITCH  PORT]            ;GET THE  PORT NUMBER
   E189  4F              1954                       LD    CCA                            
   E18A  ED41            1955                       OUT   [CJ»B                          ;SWITCH  MEMORY BANKS
   E18C  78              1956                       LD    AB                             
   E18D  32FD6E          1957                       LD    [CUR_BANK],A                   ;REMEMBER  WHAT WAS   SWITCHED  TO.
   E190  C9              1958                       RET                                  
                         1959  ;
                         1960  ;
                         1961  ;    Port collection must  be  calied  during initialization
                         1962  ;    It switches to OS7 ROM  grabs  the  ports and switches back
                         1963  ;
                         1964  
   E191                  1965  PORT                 COLLECTION:                                
   E191  3AFD6E          1966                       LD    A,[CUR_BANK]                   ;GET THE CURRENT BANK
   E194  F5              1967                       PUSH  AF                             
                         1968  ;
   E195  5AFC1A          1969                       LD    A,[MEMCNFGO3]                  ;SWAP IN THE OS
   E198  CDFD14          1970                       CALL  SWITCH_MEM                     
   E19B  21FC29          1971                       LD    HL,PORTTABLE+2                 ;HL POINTS TO THE PORT   TABLE
                         1972  ;
   E19E  3A1D43          1973                       LD    A,[01043H]                     ;VDP CONTROL PORT
   E1A1  77              1974                       LD    [HL],A                         
   E1A2  23              1975                       INC   HL                             
                         1976  ;
   E1A3  3A1D47          1977                       LD    A,[01D47H]                     ;VDP DATA PORT
   E1A6  77              1978                       LD    [HL],A                         
   E1A7  23              1979                       INC   HL                             
                         1980  ;
   E1A8  3A114B          1981                       LD    A,[0114BH]                     ;CONTROLLER O
   E1AB  77              1982                       LD    [HL],A                         
   E1AC  23              1983                       INC   HL                             
                         1984  ;
   E1AD  3A1151          1985                       LD    A,[01151H]                     ;CONTROLLER 1
   E1B0  77              1986  .                    LD    [HL],A                         
   E181  23              1987                       INC   HL                             
                         1988  ;
   E1B2  3A1157          1989                       LD    A,[01157H]                     ;CONTROLLER STROBE SET
   E1B5  77              1990                       LD    [HL],A                         
   E186  23              1991                       INC   HL                             
                         1992  ;
   E1B7  3A1168          1993                       LD    A,[01168H]                     ;CONTROLLER STROBE RESET
   E1BA  77              1994                       LD    [HL],A                         
   E1BB  23              1995                       INC   HL                             
                         1996  ;
   E1BC  3A01BE          1997                       LD    A,[O018EH]                     ;SOUND PORT
   E1BF  77              1998                       LD    [HL],A                         
   E1C0  FF              1999                       POP   AF                             
   E1C1  CDFD14          2000                       CALL  SWITCH_MEM                     
   E1C4  C9              2001                       RET                                  
                         2002  
                         2003  ;
                         2004  ;  Name:              WRSPR_ATTRIBUTE
                         2005  ;
                         2006  ;  Function:          Transfers  the  loca!  copy of  the sprit¢ attribute     table
                         2007  ;                      to VRAM.   WR_SPR_ATTRIBUTE    will also reorder    the
                         2008  ;                      sprite  table  to reduce  Sth  sprite priority  problems.
                         2009  ;
                         2010  ;  Entry:             DE - address  of  Loca:  Sprite  Table
                         2011  ;                     HL - address  of  Priority  table
                         2012  ;                      & - mumber  cf  sprites  to he  transfered (length    of  Loca!   Sprite
                         2013  ;                            table divide    by 4
                         2014  ;  Exit:              None.
                         2015  ;
                         2016  ;  Registers   usec:  AF, BC,  DE, Hi.
                         2017  ;
                         2018  ;  Data   structures  accessed:
                         2019  ;                     VRAM_ADDR_TABLE   (SPRITEATTRIBL)   for the starting     address
                         2020  ;                     of the  sprite  attribute  table  in VRAM.
                         2021  ;
                         2022  ;                     PORT PTR_TABLE   (CTRL_PORT_ PTR,  DATAPORT_PTR)     for
                         2023  ;                     VDP port  access.
                         2024  ;
                         2025  ;                     Local  Sprite  Table  - User defined  memory  image   of
                         2026  ;                     the sprite  attribute   table
                         2027  ;
                         2028  ;                     Priority  Table  - User  defined  sprite priority    list
                         2029  ;                     for the  transfer  of  the sprite  attributes
                         2030  ;
                         2031  ;  Size:              ROM  - xx bytes
                         2032  ;                     RAM  - xx bytes
                         2033  ;
                         2034  ;  Comments:
                         2035  ;
                         2036  ;  Comparision:       left out  pascal  entry  point
                         2037  ;                     added  register  parameters   in place of defined    memory  pointers
                         2038  ;                     code compacted
                         2039  ;                     edited  for documentation
                         2040  ;
   E1C5                  2041  WR                   _SPR_ATTRIBUTE                                
                         2042  ;                                                      Initialize  VOP  address    pointer
   E1C5  F5              2043                       PUSH  AF                             
   E1C6  E5              2044                       PUSH  HL                             
   E1C7  2AFD64          2045                       LD    HL,[SPRITEATTRTBL ]            
   E1CA  CDE1E5          2046                       CALL  SET_WRITE                      
   E1CD  E1              2047                       POP   HL                             
   E1CE  F1              2048                       POP   AF                             
   E1CF  47              2049                       LD    B,A                            
                         2050                                                            ;-B = Sprite Count
                         2051                                                            ;-C = port address
                         2052                                                            ;-DE = address  of  Local   Sprite   Attribute  Table
                         2053                                                            ;-HL = address  of  Priority   table
                         2054                                                            ;-VDOPis initialized    to  appropriate    address
                         2055  
   E100                  2056  LOOP_EVERYSPRITE:                                         
                         2057  
                         2058  ;*                Index  to sprite   with the next  highest  priority
                         2059  
   E1D0  7E              2060                       LD    A,[HL]                         ;Get current sprite   as defined  by the  priority table
   E1D1  87              2061                       ADD   A,A                            ;*2 Multiply by  an  attribute  entry (4)
   E1D2  87              2062                       ADD   A,A                            ;*4
                         2063  
   E1D3  23              2064                       INC   HL                             ;Index to next  location   in priority table
   E1D4  E5              2065                       PUSH  HL                             ;Save for next  sprite
                         2066  
   E1D5  6F              2067                       LD    L,A                            ;Offset into the  Local  Sprite  Table by  the current priority
   E1D6  2600            2068                       LD    H,O                            
   E1D5  19              2069                       ADD   HL,DE                          
                         2070  
                         2071  
   E1D9  78              2072                       LD    A,B                            ;Save sprite count   tm Acc.
   E1DA  0604            2073                       LD    8,4                            ;Set count for  write  to VRAM
                         2074                                                            ;C has port address
                         2075                                                            ;HL has the pointer   to a sprite’s  attributes
   E1DC                  2076  LOOPEVERY            BYTE                                 
   E1DC  EDA3            2077                       OUTI                                 ;Output a byte
   E1DE  00              2078                       NOP                                  ;Wait for VDP to  catch  up  (worst case)
   E1DF  00              2079                       NOP                                  
   E1E0  20FA            2080                       JR    NZ,LOOP_EVERY  BYTE            
                         2081  
   E1E2  47              2082                       LD    B,A                            ;Restore sprite  count  to 8B register
   E1E3  EF              2083                       POP   HL                             ;Restore index  into  the priority  table
   E1E4  10EA            2084                       DJNZ  LOOP_EVERY SPRITE              ; If more sprites   left then  loop back
                         2085  
   E1E6  C9              2086                       RET                                  ;Else exit
                         2087  
                         2088  ;
                         2089  ; Name:       SET_READ / SET_WRITE
                         2090  ;
                         2091  ; Function:   Initiates the VDP for read or writes.
                         2092  ;
                         2093  ; Entry:      HL - VRAM  address to start read / writes
                         2094  ;
                         2095  ; Exit:       C register contains the VDP_DATA_PORT value
                         2096  ;             HL remains unchanged
                         2097  ;
                         2098  ; Registers used: AF, BC, HL,
                         2099  ;
                         2100  ; Data structures accessed:
                         2101  ;
                         2102  ;             PORT_TABLE (CTRL_PORT_PTR, DATA_PORT_PTR) for
                         2103  ;                    VDP  port access.
                         2104  ;
                         2105  ; Size:       ROM - xx bytes
                         2106  ;             RAM - xx bytes
                         2107  ;
                         2108  ; Comments:
                         2109  ;
                         2110  ; Comparison:
                         2111  ;
   E1E7                  2112  SET_READ:                                                 
   E1E7  AF              2113                       XOR   A                              ;Clear accumulator  for later OR  which
                         2114                                                            ; Getermines a  read or write
                         2115  
   E1E8  C2              2116                       DEFB  OC2H              :THIS IS THE BEGINNING  OF A JP  NZ WHICH 
                         2117                                                            ; will never be  true but leaves  the
                         2118                                                            ; accumulator  intact over the  next
                         2119                                                            ; two bytes (  the LD A,40H  is decoded
                         2120                                                            ; as the last  two bytes of the  jump
   E1E9                  2121  SETWRITE:                                                 
   E1E9  3E40            2122                       LD    A,40H                          ;Set bit to tell  VDP that write  is requested
                         2123  
   E1EB  ED4BFC29        2124                       LD    BC,[VDP_CTRL_PORT]             ;Get BOTH port  addresses
   E1EF  ED69            2125                       OUT   [C],L                          ;Output low 8 bits  of address
   E1F1  84              2126                       OR    4H                             ;OR read/write  bit (Bit 6) into  the high    8 bytes
   E1F2  ED79            2127                       OUT   [CJ,A                          ;Output result
   E1F4  48              2128                       LD    C,B                            ;Put DATA_PORT  value into the  C register
                         2129  
   E1F5  C9              2130                       RET                                  ;Exit to caller
                         2131  
                         2132  ;CONTROLLER SOFTWARE
                         2133  ;
                         2134  ;**********************************************
                         2135  ;*
                         2136  ;*  DECODER TABLE FOR  THE  KEYBOARD
                         2137  ;*
                         2138  ;**********************************************
   E1F6                  2139  DEC_KBD_TBL                                               
   E1F6  0F              2140                       DEFB  KBD_NULL                       ; NULL ENTRY
   E1F7  06              2141                       DEFB  6                              ; *°6’
   E1F5  01              2142                       DEFB  1                              ; ft’
   E1F5  03              2143                       DEFB  3                              ; °3°
   E1FA  09              2144                       DEFB  9                              ; *9’
   E1FB  00              2145                       DEFB  O                              ; °O’
   E1FC  0A              2146                       DEFB  10                             ; fe!
   E1FD  0C              2147                       DEFB  12                             ; Purple Action  Controller  key (third  one down)
   E1FE  02              2148                       DEFB  2                              ; °2°
   E1FF  08              2149                       DEFB  11                             ; fw?
   E200  07              2150                       DEFB  7                              ; ‘7’
   E201  0D              2151                       DEFB  13                             ; Blue Action  Controller  key (fourth  (or last)  one down
   E202  05              2152                       DEFB  5                              ; ‘5’
   E203  04              2153                       DEFB  4                              ; 14!
   E204  08              2154                       DEFB  8                              ; ‘8’
   E205  0F              2155                       DEFB  KBDO_NULL                      ; NULL ENTRY
                         2156  
              <OOOF>     2157  KBD_NULL             EQU   OFH                            
              <OOOF>     2158  KBD_MASK             EQU   OFH                            ;MASK  FOR  INPUT DATA BYTE
              <O040>     2159  FIREMASK             EQU   40H                            
              <0040>     2160  ARM_MASK             EQU   40H                            
              <OOOF>     2161  JOY_MASK             EQU   OFH                            
                         2162  
                         2163  
                         2164  
                         2165  __DECODER                                                 
                         2166  ;           Will read all the data, from both segments, for a given  controller
                         2167  ;           All data  isreturned in regtsters          .
                         2168  ;           Segment O data is returned the same as with 0S-7
                         2169  ;
                         2170  ;     NOTE - some operations are done in an odd order so that a certain
                         2171  ;            number of cycles (T states) pass between port addressing.
                         2172  ;            Turns off interupts if they were on at entry time for
                         2173  ;            195 T states (approx. 54.5 micro secs), the iterupts
                         2174  ;            are reenabled after this time if they were on before.
                         2175  ;
                         2176  ;     Callers  -  The input parameters are different than 0OS-7and
                         2177  ;                 both segments are returned so only one call is  required
                         2178  ;                 for all the data from a given controller.
                         2179  ;                 The values returned are the same for segment O  (H, L,  E)
                         2180  ;                 but segment 1 values are returned in B and OD.
                         2181  
                         2182  ;StackUsage:
                         2183  ; Uses 2 words (pushes only)
                         2184  ;
                         2185  ;Input Parameters:
                         2186  ;   A  - controller number, O or 1
                         2187  
                         2188  ;Returns:
                         2189  ;    H  - fire button data
                         2190  ;    L  - joystick data
                         2191  ;    6  - arm button data
                         2192  ;    C  - raw data for segment O, (joystick, fire)
                         2193  ;    D  - keyboard data
                         2194  ;    E  - spinner count data
                         2195  ;    A  - raw data for segment 1, (keyboard, arm, super controller  buttons)
                         2196  ;
                         2197  ;    SPIN SWxCT   - reset to O after read
                         2198  ;
                         2199  ;    strobe port left in the reset condition
                         2200  ;
                         2201  ;-Date:
                         2202  ; 9/24/83   11:14    JKL
                         2203  ;
                         2204  
   E206                  2205  DECODER:                                                  
   E206  4F              2206                       LD    CA                             ;Save   controller      #
   E207  ED57            2207                       LD    A,1                            ;get   current    state    of   interupts,    on/off,     into   P/V   flag
   E209  F5              2208                       PUSH  AF                             ;and   save   for   later    so  can   turn  them   back   on   if  needed
                         2209  
   E208  79              2210                       LD    A,C                            ;Restore     controller     #
   E20C  ED4BFC2D        2211                       LD    BC,[STROBE_SET_PORT]           ;C<--SET     PORT   ,B<--RST     PORT
   E210  ED79            2212                       OUT   [C],A                          ;STROBE    10   SEGMENT     1 (SET)
   E212  50              2213                       LD    0,B                            ;SAVE   RESET    PORT
   E213  21FE58          2214                       LD    HL,SPIN    SWO   CT            ;potnt   at   spinner     count    for  controller     O
   E216  ED4BFC2B        2215                       LD    BC,[CONTROLLER_O_PORT]         ;C<--PORT    O,   B<--PORT    1
   E21A  B7              2216                       OR    A                              ;A contains      controtter      number
   E218  2002            2217                       JR    NZ,GOT_CORRECT_CONTROLLER_IN_C ;
   E21D  23              2218                       INC   HL                             ;Point    to  spinner     for  ctrir    1
   E21E  48              2219                       LD    C,,B                           ;C<--PORT   1
   E21F                  2220  GOT_CORRECT_CONTROLLER_IN_C:                                      
   E21F  AF              2221                       XOR   A                              
   E220  5E              2222                       LD    E,[HL]                         ;HAVE    SPIN   SWITCH    COUNT
   E221  77              2223                       LD    [HL],A                         ;>RESET    COUNT
   E222  42              2224                       LD    B,D                            ;>B<--RST    PORT
   E223  E078            2225                       IN    A,[C]                          ;READ    DATA   FROM   SEG    1
   E225  2F              2226                       CPL                                  
                         2227  ;
   E226  2600            2228                       LD    H,O                            
   E228  6F              2229                       LD    LA                             ;HL<--offset       into   DEC  _KBD_TBL
   E229  79              2230                       LD    A,C                            ;Swap    RST  PORT/DATA_    PORT
   E22A  48              2231                       LD    C,8                            
   E228  E079            2232                       OUT   [C],A                          ;STOBE    TO   SEG O    (reset)
   E22D  4F              2233                       LD    C,A                            ;C<--DATA      PORT
   E22E  F1              2234                       POP   AF                             ;get   back    entry   state    of   interupt    reg
   E22F  E2E233          2235                       JP    PO,LEAVE_THEM_OFF              
   E232  FB              2236                       EI                                   ;turn    interrupts     back    on  only   if  they   were   on  entry
   E233                  2237  LEAVE_THEM_OFF:                                           
   E233  7D              2238                       LD    A,L                            
   E234  F5              2239                       PUSH  AF                             ;save    raw   data   seg   !
   E235  E640            2240                       AND   ARM_MASK                       ;Test    sleeve
   E237  47              2241                       LD    B,A                            ;>HAVE  ARM   DATA       (in  B)
   E238  70              2242                       LD    A,L                            
   E239  E60F            2243                       AND   KBD_MASK                       ;isolate     KBD   data
   E23B  6F              2244                       LD    L,A                            
   E23C  D5              2245                       PUSH  DE                             ;Save   spin    switch    count    on  stack   (reg   E)
   E23D  11E1F6          2246                       LD    DE,DEC_KBD_TBL                 ;Get   top   of  keypad     decoder    table
   E240  19              2247                       ADD   HL,DE                          ;point    to  DEC  KBD_TBL      entry
   E241  D1              2248                       POP   DE                             ;Restore     Spinner     count    (reg  EF)
   E242  56              2249                       LD    D,[HL]                         ;HAVE  KEYBOARD      DATA
   E243  E078            2250                       IN    A,[C]                          ;segment     O  data
   E245  2F              2251                       CPL                                  
                         2252  ;
   E246  F5              2253                       PUSH  AF                             ;save   raw   data
   E247  6F              2254                       LD    L,A                            
   E248  E640            2255                       AND   FIRE  MASK                     ;isolate     fire   data
   E24A  67              2256                       LD    H,A                            ;HAVE   FIRE  DATA
   E248  70              2257                       LD    A,L                            
   E24C  E60F            2258                       AND   JOY MASK                       ;isolate     joystick     data
   E24E  6F              2259                       LD    L,A                            ;HAVE   JOY   DATA
   E24F  F1              2260                       POP   AF                             ;get   back   raw   data   for   seg   0
   E250  4F              2261                       LD    C,A                            ;C  =  raw   data   segment     O
                         2262  
   E252  C9              2263                       RET                                  
                         2264  
                         2265  ;
                         2266  ;
                         2267  ;
                         2268  ;   Used   to fill  a  table of  values   for  the 2 controllers
                         2269  ;   Does  some  debouncing    if called   twice   insuccession
                         2270  ;
                         2271  ;   NOTE   - Does  not  return  at bottom   of  code, return    ts  in middie
                         2272  ;            Interupts   will  be off  for  a  while when  cal!   to  DECODE   is  performec.
                         2273  ;
                         2274  ;   Callers   - This  has  different   input   parameters  than   OS-7  and
                         2275  ;               the  controller   map  ts  ordered  differently.
                         2276  ;
                         2277  ;
                         2278  ;Stack Usage:
                         2279  ;  will  use  4 words   (2 pushes,  2  call)
                         2280  ;
                         2281  ;Calis:
                         2282  ;  _DECODER
                         2283  ;  DEBOUNCE
                         2284  ;  READ_N_DEBOUNCE      (a routine   that  is  nested itn _POLLER)
                         2285  ;
                         2286  ;Input  Parameters:
                         2287  ;  IX  - pointer  to  ist  byte  of users   controller   map  (10  bytes)
                         2288  ;   A  - controller   enabled   and spinner    enable
                         2289  ;          bit  O  - set  if want  controller    O enabled
                         2290  ;          bit  1  - set  if want  controller    t enabled
                         2291  ;          bit  7  - set  if want  spinner   enabled  for  controllers     which  are  enabled
                         2292  ;
                         2293  ;Returns:
                         2294  ;
                         2295  ;  Data  in users   controller   map  is  like  this off  of  entry   IX value
                         2296  ;             IX+O   - joystick   O
                         2297  ;             IX+1   - fire  O
                         2298  ;              IX+2   - arm  O
                         2299  ;             IX+3     keyboard   O
                         2300  ;              IX+4   - spinner   count  O
                         2301  ;              IX+5   - joystick   1
                         2302  ;              IX+6   - fire  1   
                         2303  ;              IX+7   - arm  1
                         2304  ;              IX+8   - keyboard   1
                         2305  ;              IX+9   - spinner   count  1
                         2306  ;
                         2307  ;   IX -  points  to  1 byte  past  users   data  table of  highest   enabled    controller
                         2308  ;
                         2309  ;
                         2310  ;   all  but  IY - destroyed
                         2311  ;
                         2312  ;Date:
                         2313  ;  9/24/83     11:14     JKL
                         2314  ;
                         2315  
              <OOO1>     2316  CONTROLLER_O_MASK    EQU   1H                             
             <OO0O1>     2317  CONTROLLER_1_BIT     EQU   1                              
              <OOO7>     2318  SPINNER_ENABLE_BIT   EQU   7                              
                         2319  
   E253                  2320  __POLLER:                                                 
   E253  21FE5A          2321                       LD    HL                             
   E256  4F              2322                       LD    C,A                            
   E257  E601            2323                       AND   CONTROLLER_0_MASK              
   E259  2823            2324                       JR    Z,NOT_CONTROLLER_0             ;If not  then check   to see  if controller    1  is
   E258  3D              2325                       DEC   A                              
   E25C  CDE264          2326                       CALL  READ_N_DEBOUNCE                
   E25F  CB49            2327                       BIT   CONTROLLER_1_BIT,C             ;see ifcontroller   1 is active
   E261  C5              2328                       RET   Z                              
   E262                  2329  POLL_CONTROLLER_1:                                        ;getdata for controller    1
   E262  3E01            2330                       LD    A,01H                          
   E264                  2331  READ_N_DEBOUNCE:                                          
   E264  C5              2332                       PUSH  BC                             
   E265  E5              2333                       PUSH  HL                             
   E266  C0E206          2334                       CALL  __DECODER                      
   E269  4C              2335                       LD    C,H                            
   E26A  70              2336                       LD    A,L                            
   E268  E1              2337                       POP   HL                             
   E26C  CDE28B          2338                       CALL  DEBOUNCE                       
   E26F  C1              2339                       POP   BC                             
   E270  CB79            2340                       BIT   SPINNER                        
   E272  2807            2341                       JR    2,NEXT_IX                      
   E274  78              2342                       LD    A,E                            
   E275  DD8600          2343                       ADD   A,[IX+0]                       
   E278  DD7700          2344                       LD    [IX+0],A                       
   E27B  DD23            2345  NEXT_IX:             INC   IX                             
   E270  C9              2346                       RET                                  
                         2347  
                         2348  
   E27E  CB49            2349                       BIT   CONTROLLER_1_BIT,C             ;see if controller  1 itsenabled
   E260  C8              2350                       RET   Z                              
   E281  110004          2351                       LD    DE,0004H                       
   E284  19              2352                       ADD   HL,DE                          
   E265  13              2353                       INC   DE                             
   E286  DD19            2354                       ADD   IX,DE                          
   E288  C3E262          2355                       JP    POLL_CONTROLLER   1            
                         2356  
                         2357  ;
                         2358  ;DEBOUNCE
                         2359  ;           This  wilL  check     for  equal  data on two passes,    and  if
                         2360  ;           the  data  its  the   same  then  the users buffer   is  updated.
                         2361  ;
                         2362  ;           This  is  done   by   check  for  equal data, if   the  data  is
                         2363  ;           different   on   each    call  then the data on   this  call  is
                         2364  ;           stored  so  that    the   next  call can use this   new  data.
                         2365  ;           If the  data    is  equa!   then  the data is stored    with  the
                         2366  ;           ni bit  (bit    7)  set   so that  the next calli  will  yield
                         2367  ;           different   data    (IE   there  could never be   a match  on  the
                         2368  ;           next  cal)).
                         2369  ;
                         2370  ;Stack   Usage:
                         2371  ;   1 word   (subroutine     cali)
                         2372  ;
                         2373  ;Input    Parameters:
                         2374  ;   HL  -  PoInter   to debounce      buffer
                         2375  ;   IX  -  Potnter   to users     controller   map
                         2376  ;   A   -  joystick   data
                         2377  ;   B   -  arm data
                         2378  ;   C   -  fire  data
                         2379  ;   D   -  keyboard   data
                         2380  ;
                         2381  ;Returns:
                         2382  ;   HL    - PoInting   to   next   buffer   (entry value +  4)
                         2383  ;   IX    - Pointing   to   next   data  area  (entry value   + 4)
                         2384  ;   A  is  changed
                         2385  ;   No  others   are  modified
                         2386  ;
                         2387  ;   Calls   self  as  a nested     subroutine   CHECK
                         2388  ;
                         2389  ;Date:
                         2390  ; 9/24/83       11:14       JKL
                         2391  ;
                         2392  ;
   E28B                  2393  DEBOUNCE:                                                 
   E288  CDE297          2394                       CALL  CHECK                          ;debounce    joystick   data
   E28E  79              2395                       LD    A,C                            ;debounce    fire  data
   E26F  CDE297          2396                       CALL  CHECK                          
   E292  78              2397                       LD    A,B                            ;debounce    arm  data
   E293  CDE297          2398                       CALL  CHECK                          
   E296  7A              2399                       LD    A,D                            ;debounce    keyboard   data
                         2400                                                            ;fall   thru  to  check   (return   imp!ied)
   E297                  2401  CHECK                                                     
   E297  BE              2402                       CP    [HL]                           ;see  if  data   was the   same  as  last   time
   E298  2005            2403                       JR    NZ,NOT   SAME                  
                         2404  
   E29D  F680            2405                       OR    80H                            ;set  hi_order    bit  if  same,  so  not  equal    on   next   cal!
   E29F                  2406  NOT_SAME                                                  
   E29F  77              2407                       LD    [HL],A                         ;update   local   debounce   buffer
   E2A0  DD23            2408                       INC   IX                             ;point   to  next  buffer   location
   E2A2  23              2409                       INC   HL                             ;        in  debounce   buffer   as  wel!
   E2A3  C9              2410                       RET                                  
                         2411  
                         2412  ;
                         2413  ;UpdateSpinner   - Controller   spin   switch interrupt  service routine
                         2414  ;
                         2415  ;  This routine  processes   the  spinner  switch interrupt  and updates
                         2416  ;    the data needed   by  both DECODER   and POLLER
                         2417  ;
                         2418  ; Ram area used:  Updates   SPIN _SWO_CNT  and SPIN SW1 CNT
                         2419  ;
                         2420  ; The spinner switch   maskable   interrupt  ts RST  38H
                         2421  ;
                         2422  ; Destroys AF, BC,  HL
                         2423  ;
             <O0020>     2424  DIR_MASK             EQU   00 1000008                     ;bit 5 tells us  the direction
              <0004>     2425  INTBIT               EQU   4                              ;bit that tells which   spinner   interrupted
                         2426  
   E2A4                  2427  __UPDATE_SPINNER                                          
   E2A4  ED4BFC2B        2428                       LD    BC,[CONTROLLER_0_PORT]         ;Get port values  for both  controllers
   E2A8  ED78            2429                       IN    A,[C]                          ;Input data from  controller   O
   E2AA  21FE58          2430                       LD    HL,SPIN SWO_CT                 ;Poitntto spinner  update  data
   E2AD  CB67            2431                       BIT   INT_BIT,A                      ;Was this the controller   that   interrupted   ?
   E2AF  2007            2432                       JR    NZ,GET_CONTROLLER_1            ;If not then check  controller    1
   E281  E620            2433                       AND   DIR_MASK                       ;Check direction  bit
   E283  2002            2434                       JR    NZ,INCREMENT_0_OIRECTION       ;If set then tncrement   direction
   E285  35              2435                       DEC   [HL]                           ;Else decrement direction
   E2B6  35              2436                       DEC   [HL]                           ;Decrement once more  to  fall  through   tncrement
                         2437  
   E287                  2438  INCREMENT_0          DIRECTION:                                
   E287  34              2439                       INC   [HL]                           ;Increment direction
                         2440  
   E288                  2441  GET_CONTROLLER_1                                          
   E2B8  48              2442                       LD    C,B                            ;Get controller  1 port  into  C
   E289  ED78            2443                       IN    A,[C]                          ;Get controller  1 data
   E286  23              2444                       INC   HL                             ;Point HL to controller   1 update   area
   E2BC  CB67            2445                       BIT   INT_BIT,A                      ;Is thIs the controller   that  interrupted    me?
   E2BE  C0              2446                       RET   NZ                             ;Return if not, Also  don’t   assume
                         2447                                                            ; either controller  if  no bit  is  set
   E2BF  E620            2448                       AND   DIR_MASK                       ;Check direction  bit
   E2C1  2002            2449                       JR    NZ,INCREMENT_1_DIRECTION       ;I1fset then go  increment  direction
   E2C3  35              2450                       DEC   [HL]                           ;Else decrement direction
   E2C4  C9              2451                       RET                                  ;Then return
                         2452  
   E2C5                  2453  INCREMENT_1_DIRECTION                                      
   E2C5  34              2454                       INC   [HL]                           ;Increment direction
   E2C6  C9              2455                       RET                                  ;Exit
                         2456  
                         2457  
                         2458  
                         2459  ;SESS   H SESS HEH HEHEHE HHS HEHEHE  HEHEHE  HEHE EEE EHH  HEHEHE   HEHEHE  EEESESEEHHEEEEE      HE HES
                         2460  
                         2461  ;                             NOTES TO SOUND PROGRAMMERS
                         2462  
                         2463  ;     The only differences between the OS7 version and this ADAM version
                         2464  ;     are transparent to the game programmer and important to the
                         2465  ;     sound programmer. Formerly CALL’s to PLAY_SONGS and SND_MANAGER
                         2466  ;     were necessary to update the sounds. Now a CALL to SOUNDS runs
                         2467  ;     the same code.   Formerly CALL’s to LEAVE_EFFECT and EFXOVER were
                         2468  ;     needed to end a SPECIAL EFFECT.  Now EFFECT_OVER runs the same code.
                         2469  ;     Independent CALL’s to PLAY_SONGS, SNO  MANAGER, LEAVE_EFFECT and
                         2470  ;     EFXOVER do not run in this module as before!!!!!
                         2471  
                         2472  ; PAC  OOO  EEE   OOOO  EERE   SEE   EEEEERESESEDERESSEREHEREESSEOREFEEEE             ORES    EEE EEERS
                         2473  
                         2474  ;          Operating     system     sound   routine    EQUATES
                         2475  
             <OOOF >     2476  OFF                  EQU   0FH                            ;Off,  no   sound
                         2477  
                         2478  ;          Special    byte   O  codes
                         2479  
              <OOFF>     2480  INACTIVE             EQU   OFFH                           
                         2481  ;@@e@  SEFFECT               EQU               62
                         2482  ENDSDATA             EQU   O                              
                         2483  
                         2484  ;          Offsets    within    an   SxDATA    song  data    area
                         2485  
                         2486  ;@ee@  CH                    EQU               Oo
                         2487  ;@e@   SONGNO                EQU               O
                         2488  ;@@@   NEXTNOTEPTR           EQU               1
              <0003>     2489  FREQ                 EQU   3                              
              <0004>     2490  ATN                  EQU   4                              
              <0004>     2491  CTRL                 EQU   4                              
             <0005 >     2492  NLEN                 EQU   5                              
                         2493  ;@e@e  FPS                   EQU               6
                         2494  FPSV                 EQU   6                              
              <0007>     2495  FSTEP                EQU   7                              
                         2496  ;Oe     ALEN                 EQU               8
              <0008>     2497  ASTEP                EQU   8                              
                         2498  ;@@e@  APS                   EQU               9
              <0009>     2499  APSV                 EQU   9                              
                         2500  
                         2501  ;          song   end  codes
                         2502  
                         2503  ;@ee@  CHOEND                EQU               00010000B
                         2504  ;@ee@  CHIEND                EQU               01010000B
                         2505  ;@e@@  CH2END                EQU               10010000B
                         2506  ;@e@e@ CH3END                EQU               11010000B
                         2507  ;@@@   CHOREP                EQU               00011000B
                         2508  ;@e@e@ CHIREP                EQU               01011000B
                         2509  ;@@@   CH2REP                EQU               10011000B
                         2510  ;@@e@  CH3REP                EQU               11011000B
                         2511  
                         2512  ;          channel    numbers,     87   -B6
                         2513  
                         2514  ;@e@e@ CHO                   EQU               O
                         2515  ;@eeCH1             EQU        01000000B
                         2516  ;@eeCH2             EQU        10000000B
                         2517  ;ee@CH3             EQU        11000000B
                         2518  
                         2519  
                         2520  
                         2521  ;,SSeS S SHE SESE  HEHEHE  SHES  EH HERS
                         2522  ;-2          FREQ  SWEEP                 *
                         2523  ;,SSSSS  SSH   SEHHEHEHE   KES  EHHEHEED
                         2524  
                         2525  ;-See  Users’    Manual      for  description
                         2526  ;-RETs   2 SET:    {f   note   over
                         2527  ;-RETs   2 RESET:      if  sweep    in  progress     or  note    not  over
                         2528  
   E2C7                  2529  FREQ_SWEEP                                                
                         2530  
                         2531  ;         *   if  freq    not   swept,    dec   NLEN   and   RET   [setting     Z  flag]
                         2532  
   E2C7  DD7E07          2533                       LD    A,[IX+FSTEP]                   ;check     for   no  sweep    code
   E2CA  87              2534                       OR    A                              ;SET   Z  flag   if  FSTEP    =  O
   E2CB  2009            2535                       JR    NZ,L20                         ;if  PSW   is  zero   note    not   to   be  swept
   E2C0  0D7E05          2536                       LD    A,[IX+NLEN]                    ;dec   NLEN   and
   E200  30              2537                       DEC   A                              ;SET   Z flag    if  NLEN   =  O
   E201  C8              2538                       RET   Z                              ;leave    if  note   over   with    Z  flag     SET
   E202  D07705          2539                       LD    [IX+NLEN],A                    ;store   decremented       NLEN
   E2D5  C9              2540                       RET                                  ;RET   with   Z  flag   RESET    [note    not    over]
                         2541  
                         2542                       ENDIF                                
                         2543  
                         2544  ;          ¢  sweep     going.    so   dec   FPSV
                         2545  
   E206                  2546  L20                                                       
   E206  DDE5            2547                       PUSH  IX                             ;point   HL   to  FPSV
   E208  E1              2548                       POP   HL                             
   E2D9  110006          2549                       LD    DE,FPSV                        
   E20C  19              2550                       ADD   HT,DE                          
   E200  CDE355          2551                       CALL  LOCL_DECLSN                    ;dec   FPSV
                         2552  ;ees %    JR           NZ,L21                  -if  PSW   is  zero   FPSV   has    timed    out
   E2E0  C0              2553                       RET   NZ                             ;Added   u0S
                         2554  
                         2555  ;             *  dec    NLEN   and   leave    if  sweep    is  over
                         2556  
   E2E1  CDE369          2557                       CALL  LOCL_MSNTOLSN                  ;reload    FPSV   from   FPS
   E2E4  28              2558                       DEC   HL                             ;point    to   NLEN   [#  steps    in   the   sweep]
   E2E5  7E              2559                       LD    A,[HL]                         ;dec   NLEN    and
   E2E6  3D              2560                       DEC   A                              ;SET    Z flag    {tf NLEN   =  O
   E2E7  C8              2561                       RET   2                              ;leave   if   sweep   over   with    Z   flag    SET
                         2562  
                         2563  ;               *  sweep     not  over,    so   add   FSTEP   to  FREQ
                         2564  
   E2E8  77              2565                       LD    [HL],A                         ;store    decremented      NLEN
   E2E9  28              2566                       DEC   HL                             ;poitnt   HL
   E2EA  28              2567                       DEC   HL                             ;to   FREQ
   E2EB  DD7E07          2568                       LD    A,[IX+FSTEP]                   ;A   = FSTEP    [two’s    complement       step    size]
   E2EE  CDE374          2569                       CALL  LOC_ADD816                     ;FREQ    = FREQ    + FSTEP
   E2F1  23              2570                       INC   HL                             ;point    HL   to  hi  FREQ
   E2F2  CB96            2571                       RES   2,[HL]                         ;RESET    82   itn hi  FREQ    in  case    add    caused    >  10  bit   FREQ
   E2F4  F6FF            2572                       OR    OFFH                           ;RESET    Z  flag,    sweep   not    over    yet
                         2573  
                         2574                       ENOIF                                
                         2575  ;@@@  121
   E2F6  C9              2576                       RET                                  
                         2577  ;       ENO FREQSWE
                         2578  
                         2579  
                         2580  ;, eet  eeeeereeeeeeeeeeeeeeseres
                         2581  ;*            ATN_SWEEP                  *
                         2582  ; ee   eeeresereeeeeeereeesesers
                         2583  
                         2584  ;See   User's     Manual!   for  description
                         2585  ;RETs     Z  SET:    tf byte    8  is  O  [means     sweep     is  over,    or   note    was    never   swept]
                         2586  ;RETs     Z  RESET:     if sweep    in  progress
                         2587  
   E2F7                  2588  ATN_SWEEP                                                 
                         2589  
                         2590  ;            *  RET   with   Z  SET   if  byte    8  =  00
                         2591  
   E2F7  DD7E58          2592                       LD    A,[1X+8]                       ;check    byte    8  for   no   sweep     code
   E2FA  B7              2593                       OR    A                              ;Z2  1s  set   if   byte   8   = O
   E2FB  C8              2594                       RET   2                              ;leave     if  Z  set,    sweep    not    going
                         2595  
                         2596  ;            *  sweep   going,    so   dec   APSV
                         2597  
   E2FC  DDE5            2598                       PUSH  IX                             ;point    HL   to   APSV
   E2FE  E1              2599                       POP   HL                             
   E2FF  110009          2600                       LD    DE,APSV                        
   E302  19              2601                       ADD   HL,DE                          
   E303  CDE355          2602                       CALL  LOCL  DECLSN                   ;dec   APSV     [LSN   of   byte    9]
                         2603  ;*eee8        JR         NZ,L22                   ;1f  PSW    ts  zero    APSV    has   timed     out
   E306  C0              2604                       RET   NZ                             ;Added    u0S
                         2605  
                         2606  ;            *  dec   ALEN   to  see   if  sweep     over
                         2607  
   E307  CDE369          2608                       CALL  LOCL  MSNTOLSN                 ;reload      APSV   from    APS
   E30A  28              2609                       DEC   HL                             ;point     to  ALEN     [4  of   steps     in   the  sweep]
   E30B  CDE355          2610                       CALL  LOCL_DECLSN                    ;dec   ALEN     [LSN   byte    8]
   E30E  2815            2611                       JR    Z,L23                          ; if  PSW    is  non-zero      sweep    not    over    yet
                         2612  
                         2613  ;            *  add   ASTEP   to  ATIN
                         2614  
   E310  7E              2615                       LD    A,[HL]                         ;>MSN   A  =  ASTEP
   E311  E6F0            2616                       AND   OF OH                          ;mask    USN
   E313  5F              2617                       LD    E,A                            ;E   =  ASTEP       O
   E314  28              2618                       DEC   HL                             ;point     HL  to   ATN
   E315  2B              2619                       DEC   HL                             
   E316  28              2620                       DEC   HL                             
   E317  2B              2621                       DEC   HL                             
   E318  7E              2622                       LD    A,[HL]                         ;>MSN   A  =  ATN
   E319  E6F0            2623                       AND   OF OH                          ;A   =  ATN      Oo
   E31B  83              2624                       ADD   A,E                            ;MSN    A  =  [ASTEP     +  ATN]       Oo
   E31C  5F              2625                       LD    E,A                            ;E   =  [ASTEP    +   ATN]       O
   E310  7E              2626                       LD    A,[HL]                         ;A   =  ATTN.    freq    or   CTRL
   E31E  E60F            2627                       AND   OFH                            ;smask   old   ATN      A  =0      freq     or   CTRL
   E320  B3              2628                       OR    E                              ;OR   in   new   ATN
   E321  77              2629                       LD    [HL],A                         ;store     updated      value   back     into    song   data    area
   E322  F6FF            2630                       OR    OF FH                          ;RESET     Z  flag.     sweep    not  over     yet
                         2631  ;*ee08        JR         L22
   E324  C9              2632                       RET                                  ;Added     uO0S
                         2633  
                         2634  ;            ELSE       Z2 flag   is  SET:     sweep    over
                         2635  
   E325                  2636  L23                                                       
   E325  3600            2637                       LD    [HL],0                         ;set byte 8  to  O to indicate  end  sweep
                         2638  
                         2639  ;       ENDIF
                         2640  ;       ENDIF
                         2641  
                         2642  ;@ee@122
   E327  C9              2643                       RET                                  
                         2644  
                         2645  ;       END ATNSWEE
                         2646  
                         2647  
                         2648  
                         2649  ;seSSSSS SSS SHH HEHESSEHTSEHHHEEEES
                         2650  ;°8        UPATNCTRL                +
                         2651  ; SSSSSHSHEHESSS  EES       EHEE EES
                         2652  
                         2653  ;Perform  single    byte  update    of  the   snd  chip  notse   contro!    register      or  any
                         2654  ;attenuation    register.    IX  is  passed    pointing    to byte    O of  a  song   data    area,    MSN
                         2655  ;register   C  = formatted    channel    attenuation     code.
                         2656  
   E328                  2657  UPATNCTRL                                                 
   E328  DD7E04          2658                       LD    A,[1X+4]                       ;MSN   A  = ATN,   LSN  may   be  CTRL   data
   E328  C861            2659                       BIT   4,C                            ;test   for   AITN
                         2660                                                            ;>{f   PSW  is  non-zero    ATN   is  to  be  sent,
                         2661                                                            ; move    it  to  the  LSN
   E32D  2804            2662                       JR    Z,L24                          
   E32F  0F              2663                       RRCA                                 ;Swap   nibbles
   E330  0F              2664                       RRCA                                 
   E331                  2665                       RRCA                                 
   E332  0F              2666                       RRCA                                 ;°>LSN  A  = ATN
                         2667  
                         2668  ;        ENDIF
                         2669  
   E333                  2670  L24                                                       
   E333  E60F            2671                       AND   OFH                            ;mask   MSN
   E335  B1              2672                       OR    C                              ;4   = formatted    registers       ATN   or  CTRL
                         2673  ;sees     CALL       OUT_TO_SOUNO   PORT       ;Output   ATN  or  CTRL   data
                         2674  ;Seeses   RET
   E336  C3E600          2675                       JP    QUT _TO_SOUND   PORT           ;output   ATN  or  CTRL   data
                         2676  
                         2677  
                         2678  
                         2679  ;,F8teseseseeeeereseeeeeeeeese
                         2680  ;*          UPFREQ                    *
                         2681  ;,Ses  eeeereseeeeeeereeeresesese
                         2682  
                         2683  ;Perform    double    byte   update     of  a sound   chip    frequency      register.       IX   its passed
                         2684  ;pointing     to  byteO   of   a  song   data  area,   MSN    register     D  =  formatted      channel!
                         2685  ;frequency     code.
                         2686  
   E339                  2687  UPFREQ                                                    
   E339  DD7E03          2688                       LD    A,[IX+FREQ]                    ;A =  F2  F3   F4  FS   F6   F7  FB  FIO
   E33C  E60F            2689                       AND   OFH                    7A =   0   O     O   O  F6   F7  FB  FQ 
   E33E  B2              2690                       OR    D                              ;A =   formatted      reg/#      F6  F7   FB  FO
   E33F  CDE600          2691                       CALL  OUT_TO_  SOUND    PORT     =   ;output   first    freq   byte
   E342  D07E03          2692                       LD    A,[IX+FREQ]                    ;A =  F2  F3   F4  FS  F6    F7  F8  FO   again
   E345  E6F0            2693                       AND   OFOH                   :A =  F2  F3   F4  F5    0    0   0    O 
   E347  57              2694                       LD    DA                             ;save  in  D
   E348  DD7E04          2695                       LD    A,[IX+FREQ+1]                  ;LSN  A  =O     O  FO  Fi
   E348  E60F            2696                       AND   OFH                    “A=    0   0    0   0    0    OFO    FI! 
   E34D  82              2697                       OR    D                              ;A =  F2  F3   F4  FS    O    O  FOF!
   E34E  0F              2698                       RRCA                                 ;Swap  nibbles
   E34F  0F              2699                       RRCA                                 
   E350  0F              2700                       RRCA                                 
   E351  0F              2701                       RRCA                                 ;A =   O   O   FO  F1  F2   F3   F4  F5
                         2702  ;*e%%       CALL       OUT_TO_SOUND     PORT     ;output     2nd   [most    significant]       freq    byte
                         2703  ;eee        RET
   E352  C3E600          2704                       JP    OUT_TO_SOUND_PORT              ;output     2nd   [most    significant]       freq    byte
                         2705  
                         2706  
                         2707  
                         2708  ;eSSSESHHHSSSESEEHHESESHSEES
                         2709  ;¢       LOCL_DECLSN       *
                         2710  ;SSSSSHESSHSSSHESSSHHHSHEEOS
                         2711  
                         2712  ;Without affecting the MSN, decrement  the LSN of  the  byte   pointed to by   HL.
                         2713  ;HL remains the same.
                         2714  ;RET with Z flag set if dec LSN results  in O, reset   otherwise.
                         2715  ;RET with C flag set if dec LSN results  in -f,  reset  otherwise.
                         2716  
   E355                  2717  __DECLSN:                                                 
   E355                  2718  LOCL_DECLSN                                               
   E355  AF              2719                       XOR   A                              
   E356  ED67            2720                       RRD                                  ;& = 0    LSN [HL]
   E358  D601            2721                       SUB   1               :2 FLAG  SET [TF DEC  TO O,C  FLAG IF DEC   TO  -!1 
   E35A  F5              2722                       PUSH  AF                             ;save  Z and C flags
   E358  ED6F            2723                       RLD                                  ;[Ht}) = old MSN    new  LSN
   E350  F7              2724                       POP   AF                             ;restore  Z and  C flags.   A    O   new LSN
   E35E  C9              2725                       RET                                  
                         2726  
                         2727  
                         2728  
                         2729  ;eeeeeeeseeeesetesreoeseseresese
                         2730  ;*       LOCL_DECMSN       *
                         2731  ;eeeeeeseseaseesesrereeresee
                         2732  
                         2733  ;Without affecting the LSN, decrement the MSN of the byte potnted to by HL.
                         2734  ;HL remains the same.
                         2735  ;RET with Z flag set if dec MSN results in O, reset otherwise.
                         2736  ;RET with C flag set if dec MSN results im -1, reset otherwise.
                         2737  
   E35F                  2738  DECMSN                                                    
   E35F                  2739  LOCLDECMSN                                                
   E55F  AF              2740                       XOR   A                              
   E360  ED6F            2741                       RLD                                  ;A = O   MSN [HL]
   E362  D601            2742                       SUB   1                              ;2 flag set if dec to O, C flag set if dec  -i
   E364  F5              2743                       PUSH  AF                             ;save Z and C flags
   E365  ED67            2744                       RRD                                  ;{HtL)= new MSN   old LSN
   E367  F7              2745                       POP   AF                             ;srestoreZ and C flags, A =0    new MSN
   E368  C9              2746                       RET                                  
                         2747  
                         2748  
                         2749  
                         2750  ;,tHeeeeeseceseseeeesereeress
                         2751  ;*       LOCL_MSNTOLSN     :
                         2752  
                         2753  
                         2754  ;Copy MSN of the byte pointed to by HL to tne iSN of that byte      Hi  remains
                         2755  ;the same.
                         2756  
   E369                  2757  MSNTOLSN                                                  
   E369                  2758  LOCi_MSNTOLSN                                             
   E369  7E              2759                       LD    AA[HT]                         ;A = MSN   LSN to be changed
   E36A  E6F0            2760                       AND   OFOH            >A = MSN   0   
   E36C  47              2761                       LD    8A                             ;save in B
   E360  0F              2762                       RRCA                                 ;Swap nibbles
   E36E  0F              2763                       RRCA                                 
   E36F  0F              2764                       RRCA                                 
   E370  0F              2765                       RRCA  7A = 0   MSN                   
   E371  B0              2766                       OR    8                              ;& = MSN   MSN
   E372  77              2767                       LD    [HIL],AA                       ;(HtL]= MSN   MSN
   E373  C9              2768                       RET                                  
                         2769  
                         2770  
                         2771  
                         2772  ;5SSSSeSHEHESSSHEHHEHEHEHHEEE
                         2773  ;*       LOC_aDD816        e
                         2774  ; SSS     SSSHSHEHEEHEEEEE HE
                         2775  
                         2776  ;Adds 8 bit two’s complement signed vaiue passed in A to the 16 bit    location
                         2777  ;pointed to by HL.
                         2778  
   E374                  2779  ADDB16                                                    
   E374                  2780  LOC_ADDB16                                                
   E374  0600            2781                       LD    B,0                            ;set B for positive value inA
   E376  CB7F            2782                       BIT   7,A                            ;1f A is positive
   E378  2801            2783                       JR    Z,POS                          ;skip
                         2784  ;eee8    LD  b,0FFh                    7A 16 neg: extend sign bit thru 8
   E57A                  2785                       DEC   B                              ;Added u0S
   E378                  2786  POS                                                       
   E376  BE              2787                       ADD   A,[HL]                         ;do 8 bit add [and set Carry]
   E37C  77              2788                       LD    [HL],A                         ;store result into LSB 16 bit number
   E370  23              2789                       INC   HL                             ;put SB
   E37E  7E              2790                       LD    A,[HL]                         ;into A
   E37F  88              2791                       ADC   A,B                            ;A = MSB + Carry + B [8B{tsO or FF)
   E380  77              2792                       LD    [HL],A                         ;store result into MSB
   E381  28              2793                       DEC   HL                             ;re-point HL to LSB 16 bit number
   E382  C9              2794                       RET                                  
                         2795  
                         2796  
                         2797  
                         2798  ; eeeeeeveseereseereseresretes
                         2799  ;*     PT_IX_TO_SxDATA     +
                         2800  ;,Seeeeeeeeseraeeeeseseeeresers
                         2801  
                         2802  ;SONGNO passed in 8.       
                         2803  ;Potnt IX to byte O tn SONGNO‘s song data area.
                         2804  ;:RETwith both DE and IX potnting to SxDATA,
                         2805  ;HL pointing to MSB SxDATA entry itnLST_OFSND ADORS.
                         2806  
   E383                  2807  PT_IX_TO_SxDATA                                           
                         2808  
                         2809  ;       * IX & DE := addr of byte O itnSONGNO’s song  data  area,
                         2810  ;       HL pointing to MSB SxDATA entry in LST_OFSND_ADDRS.
                         2811  
   E363  2AFE6E          2812                       LD    HL,[PTR_TO_LST_OF_SNOD_ADDRS]  ;poftntHL to  start  LST_OF_SNO_ADORS
   E386  26              2813                       DEC   HL                             ;init HL for addition
   E387  28              2814                       DEC   HI                             
   E386  48              2815                       LD    C,,8            :FORM 4 ¢ SONGNO IN C 
   E389  0600            2816                       LD    B,O                            
   E36B  CB01            2817                       RLC   C                              
   E38D  CB01            2818                       RLC   C                              
   E36F  98              2819                       ADD   HL,BC           :HL PTS TO SXDATA’S ENTRY  IN LST_OF SND ADORS 
   E390  5E              2820                       LD    E,[HT]                         ;move addr SxDATA to IX thru  DE
   E391  23              2821                       INC   HL                             
   E392  56              2822                       LD    D,[HT]                         
   E393  05              2823                       PUSH  DE                             
   E394  DD              2824                       POP   IX                             
   E396  C5              2825                       RET                                  
                         2826  
                         2827  
                         2828  
                         2829  ;,seeteeeeasereseereeresesece
                         2830  ;*      AREA SONG   _IS         «
                         2831  ; eeeeeeeeeseeseeeereseseresce
                         2832  
                         2833  ;The address   of  byte  0  of a song  data   area   is passed    in  IX.   The  song  number  of
                         2834  ;the song  using   that  area  is returned    in  A  [OFFH   {f  inactive].     If a  special
                         2835  ;effect was  using   that   area, 62   is returned    in  A  and  HL  {ts returned   with the
                         2836  ;address of  the   special   sound  effect  routine.
                         2837  
   E397                  2838  AREA_SONG_IS                                              
   E397  DD7EC0          2839                       LD    A,[1IX+0]          7A  := CHA      SONGNO   OR  62,OR  A  := FF 
   E59A  FEFF            2840                       CP    OFFH                           
   E39C  CB              2841                       RET   2                              ;leave   with   A =  FF  if  area   inactive
   E39D  E63F            2842                       AND   00111111B          SMASK  CHA  
   E39F  FE5E            2843                       CP    62                             
   E3A1  C0              2844                       RET   NZ                             ;leave   with  A  =  SONGNO   if  not  a  special  effect   [62]
                         2845  
                         2846  ;       special   effect,    so set  Hl to  addr   effect,    stored  in   bytes  1&2
                         2847  
   E3A2  DDE5            2848                       PUSH  IX                             ;point   HL  to  byte   1
   E3A4  E1              2849                       POP   HL                             
   E3A5  23              2850                       INC   HL                             
   E3A6  5E              2851                       LD    E,[HL]                         ;save  LSB   effect   addr   ine
   E3A7  23              2852                       INC   HL                             ;HL  to  byte  2
   E3A8  56              2853                       LD    D,[HL]                         ;save  MSB   effect   addr   inoO
   E3A9  EB              2854                       EX    DE,HL                          ;HL  :=  addr  special    effect
   E3AA  C9              2855                       RET                                  
                         2856  
                         2857  ;       END  UTIL
                         2858  
                         2859  
                         2860  
                         2861  
                         2862  ;:*      INIT_SOUND         ‘
                         2863  
                         2864  
                         2865  ;See Users’ Manuai for description;   includes ENTRY POINT ALLOFF
                         2866  ;addr iST_OFSND_ADDRS  passed   in HL
                         2867  ;n = # of song data areas to   init, passed in B
                         2868  
                         2869  ;       *¢* Sound chip register   code EQUATES **-*
                         2870  
                         2871  ;       Tone generator frequency   and attenuation formatted register   codes
                         2872  
             <OO08O>     2873  SRIFRQ               EQU   100000008        -BIT7 = 1,BIT6-4 = TONE GEN  1 FREQ  CODE 
              <O090>     2874  SRIATN               EQU   100100008                      ;BIT7 = 1, BIT6-4 = TONE GEN  1 ATTN  CODE
              <OOAO>     2875  SR2FROQ              EQU   101000008                      ;BIT7 = 1, BIT6-4 = TONE GEN 2  FREQ  CODE
              <OOBO>     2876  SR2ATN               EQU   101100008        -BIT7 = 1,BIT6-4 = TONE GEN 2  ATTN  CODE 
              <OOCO>     2877  SR3FRQ               EQU   110000008        -BIT7 = 1,BITG-4 = TONE GEN 3  FREQ  CODE 
              <QODO>     2878  SR3AIN               EQU   110100008                      ;BIT7 = 1, BITG-4 = TONE GEN  1 ATTN  CODE
                         2879  
                         2880  ;       Noise generator control!  and attenuation formatted register   codes
                         2881                       .                                    
              <OOEO>     2882  SRNCTL               EQU   111000008                      ;BIT7 = 1, BIT6-4 = NOISE GEN  CONTROL  CODE
              <OOFO>     2883  SRNATN               EQU   111100008                      ;BIT7 = 1, BIT6-4 = NOISE GEN  ATTN  CODE
                         2884  
   E3AB                  2885  
                         2886  ;eee INITSOUND
                         2887  
                         2888  ;    :  ¢ inittalize PTR_TO_LST_OF  SND _ADORS with value passed  in  HL
                         2889  
   E3AB  22FE6E          2890                       LD    [PTR_TO_LST_OF_SND_ADDRS],HL   
                         2891  
                         2892  ;       * store inactive code   at byte O of each of the n data  areas  [B  = n)
                         2893  
   E3AE  23              2894                       INC   HL                             ;pt HL to song 1 data area entry   in LST_OF_SND_ADDRS
   E3AF  23              2895                       INC   HL,                            
   E380  5E              2896                       LD    —,[HL]                         ;pt DE to byte 0 in first song  data  area
   E381  23              2897                       INC   HL                             
   E382  56              2898                       LD    0D[HL]                         
   E3B3  EB              2899                       EX    DEHL                           ;pt HL to byte O in first song  data  area
   E3B4  11000A          2900                       LD    DE,10                          ;set DE for 10 byte increment
   E387  3EFF            2901                       LD    A,OFFH                         ;Added u0S
   E389                  2902  B1:                                                       
   E3B9  77              2903                       LD    [HL],A                         ;Geactivate area  *** Added u0S
   E3BA  19              2904                       ADD   HL,DE                          ;pt HL to byte O next area (10  bytes  away)
   E3BB  10FC            2905                       DJNZ  B1                             ;do this for the n (passed in B)  data  areas
                         2906  
                         2907  ;       *¢store end of data  area  code (0) at first byte after  last  song  data  area
                         2908  
   E3BD  3600            2909                       LD    [HL],0                         ;store end of data area code  in byte  O data   area  n+   1
                         2910  
                         2911  ;       * set the 4 channel! data  area pointers to a dummy, inactive   data  area
                         2912  
   E3BF  21E3E6          2913                       LD    HL,DUMAREA                     ;point HL to inactive byte below  [after   the  RET]
   E3C2  22FE70          2914                       LD    [PTR TOS ON _O],HL             ;store addr DUMAREA at PTR_TOS  ON  _O
   E3C5  22FE72          2915                       LD    [PTR_TO_SON _1],HL             ;store addr DUMAREA at PTR_TO_S ON 1
   E3C8  22FF            2916                       LD    [PTR_TO_SON 2],HL              ;store addr f  ‘REA at PTR_TO_S ON  2
   E3CB  22FE76          2917                       LD    [PTR_TO_SON_3],HL              ;store addr  DUMAREA at PTR TO SON  3
                         2918  
                         2919  ;       *  initializeSAVECTRL
                         2920  
                         2921  ;eeses   LD      A,OFFH          ;note: this  ts only time MSN SAVE CTRL  will be non zero,
                         2922  ;*see¢                           ;Out uOS (loaded  earlier)
                         2923  
   E3CE  32FE78          2924                       LD    [SAVE CTRL],A                  ;thus ensuring  PLAYSONGS  will output  ist real CTRL data
   E301                  2925  __TURN_OFF_SOUND:                                         
                         2926  ;@e@eALLOFF
                         2927  
                         2928  ;       * turn off all 4 sound generators
                         2929  
   E3D1  3AFC2F          2930                       LD    A,[SOUNODPOR]                  ;Added u0S
   E3D4  4F              2931                       LD    C,A                            ;Added u0S
   E305  3E5F            2932                       LD    A,OFF+SRIATN                   ;form off code  for tone generator  1
   E307  E079            2933                       OUT   [C],A                          ;send {ftout
   E309  3EBF            2934                       LD    A,OFF+SR2ATN                   ;form off code  for tone generator  2
   E308  E079            2935                       OUT   [C],A                          ;send it out
   E300  3EDF            2936                       LD    A,OFF+SR3ATN                   ;form off code  for tone generator  3
   E3DF  E079            2937                       OUT   [C],A                          ;s8endit out
   E5E1  3EFF            2938                       LD    A,OFF+SRNATN    :FORM OFF CODE  FOR NOISE GENERATOR,N 
   E3E3  ED79            2939                       OUT   [C],A                          ;send it out
   E3E5  C9              2940                       RET                                  
                         2941  
   E3E6  FF              2942  DUMAREA              DEFB  INACTIVE                       
                         2943  
                         2944  ;       END INITSOU
                         2945                                                            ;
                         2946  
                         2947  
                         2948  eeeeeeeeeeeresereseeeeereees                                      
                         2949  ;*        JUKE  _BOX               ‘
                         2950  ,EEE                 eeereeesreeeseeereeereees                                
                         2951  
                         2952  ;see  Users’  Manual!   for  description
                         2953  ;SONGNO  passed  in   B
                         2954  
   E3E7                  2955  PLAY                 _IT                                  
   E3E7                  2956  JUKE                 BOX                                  
                         2957  
                         2958  ;        * RET   if  song   already    in progress
                         2959  
   E3E7  C5              2960                       PUSH  BC                             ;save  SONGNO  on  stack
   E3E8  CDE383          2961                       CALL  PT_IX_TO_SXDATA                ;point   IX to SONGNO’s   song  data  area
   E3EB  D07E00          2962                       LD    A,[1XX+0]                      ;A  := CH#  [if any]     SONGNO   [if any]
   E3EE  E65F            2963                       AND   3FH                  >A  := 0 O SONGNO 
   E5F0  C1              2964                       POP   BC                             ;B  := SONGNO
   E3F1  B8              2965                       CP    8                              ;test   ifalready    in progress
   E3F2  C8              2966                       RET   2                 '   IF   SO,LEAVE 
                         2967  
                         2968  ;        *  load  first   note   and  set  NEXT_NOTE  PTR   [thru  LOAD  NEXT_NOTE]
                         2969  
   E3F3  DD7000          2970                       LD    [1X+0],B                       ;store  SONGNO  in  byte  O
   E5F6  2B              2971                       DEC   HL                    >-HL  LEFT BY  PT_IX_TO_SXDATA     POINTING   TO  MSB  SXDATA 
   E3F7  2B              2972                       DEC   HL                             ;-entry   in LST_OF_SNO_ADDRS     point  Ht  to  note  list
   E3F8  56              2973                       LD    D,[HT]                         ;"Starting  addr  entry   in  LST_OF_SND_ADDRS     and  save   this
   E3F9  28              2974                       DEC   HL                             ;-addr  in DE
   E3FA  5E              2975                       LD    E,[HL]                         ;DE  now has  the  initial   value  for  NEXT _NOTE_PTR
   E3FB  007301          2976                       LD    [IX+1],€                       ;set  NEXT_NOTE PTR   for  first   note  in  song
   E3FE  007202          2977                       LD    [I1X+2],D0                     
   E401  CDE4F2          2978                       CALL  LOAD  _NEXT_NOTE               ;load  note,  byte  0 :=  CH#  SONGNO,   set  new  NEXT NOTE  PTR
   E404  1874            2979                       JR    UP_CH_DATA_PTRS                ;new  song, so  update   channel!  data  ptrs
                         2980                                                            ;
                         2981  ;        END  JUKEBOX
                         2982  
                         2983  
                         2984  
                         2985  ;FSSeeeeeeee eee eeaeeee eeeeese
                         2986  ;*      PLAY SONGS  _          *
                         2987  ;,Seeeeeseseseseeseeeeseseeeseeeens
                         2988  
                         2989  ;       **¢  Sound  chip  register   code  EQUATES
                         2990  
                         2991  ;@@@ WHITE        EQU        00000 1008     ;BIT2  =  1, white  noise   code
                         2992  ;@@e@PERIOD       EQU        000000008      ;BIT2  = O,  periodic   noise   code
                         2993  ;@@e@NSRHI        EQU        000000008      :B:TO-1  Set  for  highest   noise    shift   rate   {N/512]
                         2994  ;ee@@NSRMED       EQU        0000000  18    ;BITO-1  Set  for  medium   noise   shift    rate   [N/1024]
                         2995  ;ee@ NSRLOW       EQU        000000  108    ;BITO-1  Set  for   lowest  noise   shift    rate   [N/2048]
                         2996  ;ee@ NSRTG3       EQU        000000  11B    :BITO-1  Set  for  shift   from   tone  gen   3  output
                         2997  
   E406                  2998  SOUNDS                                                    
                         2999  ;@e@@PLAYSONGS   _
                         3000  
                         3001  ;       * output   CH! attenuation     and frequency
                         3002  
   E406  3E9F            3003                       LD    A,OFFTSRIATN                   ;format  CH!  OFF  byte   into A
   E408  0F90            3004                       LD    ,C,SR1IATN                     ;format  MSN  C  for  CH1iattenuation
   E40A  1680            3005                       LD    D,SRIFRO                       ;format  MSN  O  for  CHi frequency
   E40C  DD2AFE72        3006                       LD    IX,[PTR_TO_S   ON  _1]         ;point   IX  to byte  O  data  area   of  song   for  CH!
   E410  CDE456          3007                       CALL  TONEOUT                        
                         3008  
                         3009  ;       * output   CH2 attenuation     and frequency
                         3010  
   E413  3EBF            3011                       LD    A,OFF+SR2ATN                   ;format  CH2  OFF  byte   into A
   E415  0EB0            3012                       LD    C,SR2ATN            :FORMAT  MSN  C  FOR CH2,ATTENUATION 
   E417  16A0            3013                       LD    D,SR2FRO                       ;format  MSN  D  for CH2  frequency
   E419  DD2AFE74        3014                       LD    IX,[PTR_TO_S   ON 2]           ;point  IX  to  byte  O  data  area   of  song   for  CH2
   E410  CDE456          3015                       CALL  TONE_OUT                       
                         3016  
                         3017  ;       * output   CH3 attenuation     and frequency
                         3018  
   E420  3EDF            3019                       LD    A,OFF+¢SR3ATN                  ;format  CH3  OFF  byte  into  A
   E422  0ED0            3020                       LD    C,SR3ATN            >FORMAT  MSN  C  FOR CH3  ATTENUATION 
   E424  16C0            3021                       LD    D,SR3FROQ           >FORMAT  MSN  D  FOR CH?  FREQUENCY 
   E426  0D2AFE76        3022                       LD    ,IX,[PTR_TO_S  ON  3]          ;potnt  IX  to  byte  O data   area   of  song   for  CH3
   E42A  CDE456          3023                       CALL  TONE_OUT                       
                         3024  
                         3025  ;       * output   CHO [noise]   ATN   [and CTRL,   if  different   from   last   time]
                         3026                       .                                    
   E42D  3EFF            3027                       LD    A,OFF+SRNATN                   ;>format CHO  OFF  byte  into  A
   E42F  0EF0            3028                       LD    C,SRNATN                       ;format  MSN  C for  CHO  attenuation
   E431  DD2AFE70        3029                       LD    IX,[PTR_TO_S_  ON _O]          ;point  IX  to  byte  O data   area   of  song   for  CHO
   E435  DD5E00          3030                       LD    E,[1X+0]                       ;look for  inactive    code,  OFFH
   E436  1C              3031                       INC   3=€                            ;this  sets  Z  flag   if E  = OFFH
   E439  2005            3032                       JR    NZ,LS                          ;{f PSW  1s zero   song  data  area  is   inactive
   E43B  CDE60D          3033                       CALL  OUTTO  SOUND   PORT            ;turn  off  CHO
   E43E  1825            3034                       JR    L6                             ; SND_MANAGER
                         3035  
                         3036  ;       ELSE
                         3037  
   E440                  3038  L5                                                        
   E440  CDE328          3039                       CALL  UPATNCTRL                      ;send  out  current   ATN
   E443  DD7E04          3040                       LD    &,EIUX4+CTRL]                  ;LSN  A  = current   CTRL  data
   E446  E60F            3041                       AND   OFH                            ;mask  MSN
   E448  21FE78          3042                       LD    HL,SAVE CTRL                   ;point  to  last CTRL    data  sent
   E448  BE              3043                       CP    [HT J                COMPARE   
   E44C  2817            3044                       JR    7,16             >IF PSW   IS ZERO  CTRL  HAS   NOT  CHANGED     [DONE] 
   E44E  77              3045                       LD    [HLJ],A                        ;SAVE CTRL   = new  CTRL   data
   E44F  0EE0            3046                       LD    C,SRNCTL                       ;send  new CTRL  data
   E451  CDE328          3047                       CALL  UPATNCTRL                      
   E454  160F            3048                       JR    L6                   SNO_ MANAGER 
                         3049  
                         3050  ;         ENDIF
                         3051  ;         ENDIF
                         3052  
   E456                  3053  TONE                 OUT                                  
   E456  DD555E00        3054                       LD    E,[1X+0]                       ;look   for  inactive  code,   OFFH
   E459  1C              3055                       INC   E                              ;this  sets  Z  flag   if  E = OFFH
   E45A  2003            3056                       JR    NZ,L7                          ;if  PSW  is zero  song    data  area    is  inactive
                         3057  ;#448      CALL      OUT_TO_  SOUND PORT     =;turn off  CHx
                         3058  ;*ees      JR      ~—~6t8s
   E45C  C3E60D          3059                       JP    OUT_TO_SOUND_PORT              ;turn  off  CHx
                         3060  
                         3061  ;         ELSE  send  out  current    ATN and  FREQ
                         3062  
   E45F                  3063  L7                   .                                    
   E45F  C0E328          3064                       CALL  UPATNCTRL           :SEND  OUT  ATTENUATION 
   E462  C3E339          3065                       JP    UPFREQ                         ;send  out  frequency
                         3066  *EE8                 CALL  UPFREQ                         ;send  out  frequency
   E465                  3067  L8                                                        
                         3068  SESS                 RET   -                              
                         3069  ;         ENDIF
                         3070  ;eeeeeeeeeeseseseeeeerereseese
                         3071  
                         3072  ;:¢      SNO_MANAGER         ‘
                         3073  
                         3074  
                         3075  ;See Users’ Manual  for description
                         3076  
   E465                  3077  16                                                        
   E465                  3078  SNO_MANAGER                                               
                         3079  
                         3080  ;       * IX  :* addr of song  #1  data  area  [SiDATA]
                         3081  
   E465  0601            3082                       LD    B,1               :PT  IX  TO BYTE  O SONG   DATA  AREA  FOR  SONG 14 
   E467  CDE383          3083                       CALL  PT_[X_TO_SXDATA                
                         3084  
   E46A                  3085  LI                                                        ;LOOP  until  end  of  song  data   areas
   E46A  3E00            3086                       LD    A,ENOSDATA                     ;check  for  end  of  song  data  areas
   E46C  D0BE00          3087                       CP    [1X+0]            :SET  Z FLAG  IF  INACTIVE 
   E46F  C8              3088                       RET   ZZ                :LEAVE   [Z SET],IF  ALL  DATA  AREAS   HAVE BEEN  PROCESSED 
                         3089  
                         3090  ;       * process  active song   data areas
                         3091  
   E470  CDE4CD          3092                       CALL  PROCESSDATA_AREA               ;   update   counters   or call   effect  get  next  note
                         3093  
                         3094  ;       * point  IX to byte  O next  song  data  area
                         3095  
   E473  11000A          3096                       LD    DE,10                          
   E476  DD19            3097                       ADD   IX,DE                          
   E478  18F0            3098                       JR    LF                             ;REPEAT  LOOP
                         3099  
                         3100  
                         3101  
                         3102  ;Seeeeeaeeeeseeeeeeeeeseserss
                         3103  ;*     UP_CH DATA   _PTRS       -
                         3104  
                         3105  
                         3106  ;For each active   data  area,   starting    with   SIDATA  and  proceeding     in order,    toad
                         3107  ;the associated   channel!  data   area  pointer    [PTR_TO_S  ON x}   with   the  address    of
                         3108  ;byte O.This  routine    is called    by JUKE BOX,    when  a  song  starts   and
                         3109  ;PROCESSDATA_AREA     when  the  channel    using  a  data  area  has  changed    as  a  result   of
                         3110  ;calling LOAD_NEXT_NOTE     [this   happens   when   a song  finishes    and  when   it switches
                         3111  ;back and forth   between   noise   and   tone notes].
                         3112  
   E47A                  3113  UP_CHDATA            _PTRS                                
   E47A  DDE5            3114                       PUSH  IX                             ;Save  curent   IX
   E47C  21E3E6          3115                       LD    HI,DUMAREA                     ;set  all  4 ch  data  ptrs   to dummy    inactive    area
   E47F  22FE70          3116                       LD    [PTR_TO_S  ON  _O],HL          
   E482  22FE72          3117                       LD    [PTR_1O_  SON  1],HL           
   E485  22FE74          3118                       LD    [PTR_TO_S  ON  2],HL           
   E488  22FE76          3119                       LD    [PTR _TO_S ON  3],HL           
   E48B  0601            3120                       LD    A                              ;set  IX  to byte   O SIDATA
   E480  CDE383          3121                       CALL  PTIX_TO_SXDATA                 ;RETS  with   IX addr  byte  O  song   1
                         3122  
   E490                  3123  L2                                                        ;LOOP  until   end  of song  data   areas
   E490  DD7E00          3124                       LD    A,[1IX+0]                      ;test  for  end  of  song  data  araes
   E493  87              3125                       OR    A                              ; #00   CP        ENDSDATA
   E494  281F            3126                       JR    Z,O00NE_SNOMAN                 ;leave  loop   if all  data  areas   checked
                         3127  
                         3128  ;       *  {f area  active,   set   appropriate    channel!  data  area   pointer
                         3129  
   E496  3C              3130                       INC   A                              ; #888    cP         INACTIVE            ;check   for  inactive    data   area:   don’t  up date   ptr if  so
   E497  2815            3131                       JR    Z,,L9                          ;tf PSW   is non-zero   area   is active:    update    channe!   data  ptrs
   E499  DD7E00          3132                       LD    A,[1X+0]                       ;get  CHW  in  A
   E49C  E6C0            3133                       AND   OCOH                           ;87  - BE   tn  A   = CHA
   E49E  07              3134                       RLCA                                 ;form  CH¥   *  2   inaA,  t.e.,   the  offset   from
   E49F  07              3135                       RLCA                                 ;PTR_TO  S ON_O    of  the   channel    data  area   pointer
   E4A0  07              3136                       RLCA  >THAT  POINTS    TO  CHANNEL    CH” 
   E4A1  5F              3137                       LD    E,A                            ;add  offset   to addr  of  PTR_TO_S  ON_O
   E4A2  1600            3138                       LD    0,0                            
   E4A4  21FE70          3139                       LD    HL,PTR  TO   _SON  O           
   E4A7  19              3140                       ADD   HL,DE                          ;-HLpoints   to   proper   channel    data   area   pointer
   E4A8  DDE5            3141                       PUSH  IX                             ;store  this  song   data  area’s   byte   O   addr    there
   E4AA  D1              3142                       POP   DE                             
   E4A8  73              3143                       LD    [HL],€                         
   E4AC  23              3144                       INC   HL                             
   E4A0  72              3145                       LD    [HL],O                         
                         3146  
                         3147  ;       ENOIF
                         3148  
                         3149  ;       ¢ point   IX to  byte  O  next   song  data  area
                         3150  
   E4AE                  3151  9                                                         
   E4AE  11000A          3152                       LD    DE,10                          
   E4B1  D019            3153                       ADD   IX,DE                          
   E483  1806            3154                       JR    L2                    -REPEAT  LOOP 
                         3155  
   E485                  3156  DONESNOMAN                                                
   E485  0DE1            3157                       POP   IX                             ;restore   Ix
                         3158  ;@@@ L112
   E487  C9              3159                       RET                                  
                         3160  
                         3161  
                         3162  
                         3163  ;SESS SSHHSESHER SHESHEHEEEE
                         3164  ;¢      LEAVE_EFFECT
                         3165  ;SPSS  SSSSHHHESSESHEHEHEEEEE
                         3166  
                         3167  ;LEAVEEFFECT,  called by a special sound effect routine when it’s finished,
                         3168  ;restores the SONGNO of the song to which the effect note belongs to B5 - BO  of
                         3169  ;sbyte 0 in the effect’s data area, and loads bytes 1 and 2 with the address  of
                         3170  ;-the next note inthe  song.  The address of the 1 byte SONGNO (saved by the
                         3171  ;effect when first called) is passed in DE.  The 2 byte address of the next  note
                         3172  ;-in the song. also saved by the effect, is passed in HL.  IX is assumed to  be
                         3173  ;pointing to byte O of the data area to which the song number is to be restored.
                         3174  ;Bits 7 and 6 of the saved SONGNO are ignored, and therefore may be used by  the
                         3175  ;effect to store flag information during the course of the note.
                         3176  
   E468                  3177  __EFFECT_OVER                                             
                         3178  ;@@@ LEAVEEFFECT
   E488  007501          3179                       LD    [IXX+T4],B                     ;LSB NEXT_NOTEPTR     LSB addr next note  in song
   E4B8  DD7402          3180                       LD    [IX+2],H                       ;MSB NEXTNOTE PTR  := MSB addr next note  in song
   E4BE  1A              3181                       LD    A,[0E]             >= =X=XSONGNO [I,E,,THE SAVED,ORIGINAL  SONGNO] 
   E46F  E63F            3182                       AND   O3FH               :® O O SONGNO 
   E4C1  47              3183                       LD    B,A                := 0 O SONGNO [B NOW = ORTGINAL SONGNO] 
   E4C2  DD7E00          3184                       LD    A,[1X+0],= CHA   62 [ALL EFFECT NOTES HAVE SONGNO  =  62] 
   E4C5  E6C0            3185                       AND   0C0H                  CH¥ O00 0000 
   E4C7  B0              3186                       OR    B                     CHA   SONGNO 
   E4C8  DD7700          3187                       LD    [IX+0],A                       ;restore the song number
   E4CB  1816            3188                       JR    EFXOVER                        
                         3189  
                         3190  
                         3191  
                         3192  ;eeeeeeeeereaeeseseeresereees
                         3193  ;*    PROCESS   DATA_AREA           *
                         3194  ;Steerer eserregeeseoeueeeeees
                         3195  
                         3196  ;See  Users’   Manual    for   description
                         3197  ;Terminology:     SFX   2  address    of  sound  effect     routine
                         3198  
   E4CD                  3199  PROCESS              DATA_AREA                                
   E4CD  CDE397          3200                       CALL  AREA_SONG_IS                   ;return    area’s    SONGNO     in A   [and   addr   SFX  in  HL]
   E4D0  FEFF            3201                       CP    INACTIVE                       ;test   for   inactive     code
   E4D2  C8              3202                       RET   Z                              ;RET,   no   processing      if  area   inactive
                         3203  
                         3204  ;         *  if special     effect,    call   it to   process     the  data   area
                         3205  
   E403  FE5E            3206                       CP    62                             ;test   for   special     sound   effect
   E4D5  2005            3207                       JR    NZ,L10                         ;1f  PSW    is zero    data   area   used   by  sound   effect
   E4D7  110007          3208                       LD    DE,7                           ;pt  HLto    SFX+7,    starting    adr   of   the  effect’s     cod  e
   E4DA  19              3209                       ADD   HL,DE                          
   E4DB  E9              3210                       JP    [HL ]                 -DO  1  PASS   THRU    EFFECT,RET   FROM   EFFECT 
                         3211  
                         3212  ;          ENDIF
                         3213  
                         3214  ;         * else   process     a non-effect     note
                         3215  
   E4DC                  3216  L10                                                       
   E40C  CDE2F7          3217                       CALL  ATN_SWEEP                      ;process     atn  sweep    data,    if  any
   E4DF  CDE2C7          3218                       CALL  FREQ  SWEEP                    ;proc   frq   sweep   data,     if any,    &  note  dura    timer  s
      :                  3219  SEE                  JR    NZ,L12                         ;'f  PSW   {ts zero    note   is  over
   E4E2  C0              3220                       RET   NZ                             
   E4E3                  3221  EFXOVER                                                   
   E4E3  DD7E00          3222                       LD    A,[IX+O]                       ;A  := CH#                 this   note
   E4E6  F5              3223                       PUSH  AF                             ;save  on    stack
   E4E7  CDE4F2          3224                       CALL  LOAD_NEXT   NOTE               ;load  data    for   next   note
   E4EA  C1              3225                       POP   BC                             ;B  := CHA       SONGNO    previous     note
   E4EB  DD07E00         3226                       LD    A,[1X+0]                       ;A  :® CHA#      SONGNO    new   note   [may   be  inactive]
   E4EE  B8              3227                       CP    8                              ;check    against    new   note’s    CHé#     SONGNO
                         3228  ESE                  JR    Z,L12                 >1F  PSW   IS  NON-ZERO     CHANGE    TO/FROM     TONE/EFX/NOISE 
   E4EF  C8              3229                       RET   Z                              
   E4F0  1888            3230                       JR    UP_CH_DATA_PTRS                ;to  maintain     data   area    priority     system
                         3231  
                         3232  ;         ENDIF
                         3233  ;         END  SNOMAN
                         3234  
                         3235  
                         3236  
                         3237  ;eee  eeeeeereeeeeseseeeeseges
                         3238  ;*        LOAD  _NEXT  NOTE           .
                         3239  ;eeeeeseeeereseseeseeeeeeees
                         3240  
                         3241  ;see   Users’    Manual    for  description
                         3242  ;SFX   refers    to  the   beginning     address     of  a  special     sound   effect    routine
                         3243  
   E4F2                  3244  LOAD_NEXT_NOTE                                            
                         3245  
                         3246  ;          *  deactivate     area,    save   SONGNO    on   stack
                         3247  
   E4F2  D07E00          3248                       LD    A,[1X+0]                       ;A  :=  byte   O
   E4F5  E63F            3249                       AND   00111111B                      ;mask   CH#,    if  any
   E4F7  F5              3250                       PUSH  AF                             ;save   SONGNO    on   stack
   E4F8  0D3600FF        3251                       LD    [IX+O0],INACTIVE               ;deactivate      area
                         3252  
                         3253  ;          *  A  :®  header    new   note
                         3254  
   E4FC  DD6E01          3255                       LD    L,[1X+1]               -HL   := ADDR    NEW   NOTE    IN ROM 
   E4FF  DD6602          3256                       LD    H,[1X+2]                       
   E502  7E              3257                       LD    A,[HL]                -A   :=  HEADER    NEW   NOTE 
                         3258  
                         3259  ;          *  save   header    of  new   note   in  song    on  stack    and   load    its  data  CASE     note    type
                         3260  
   E503  47              3261                       LD    B,A                            ;save    header    new   note    in  B
   E504  CB66F           3262                       BIT   5,A                            ;test    for   rest
   E506  281C            3263                       JR    Z,L13                          ;1f   PSW   is  non-zero     note    is  a  rest
                         3264  
                         3265  ;@@@   REST
  E5008  C5              3266                       PUSH  BC                             ;save    header    on   stack
   E505  E6IF            3267                       AND   000111118                      ;mask    al!   but   duration     bits
                         3268  
                         3269  ;          *  set   up NEXT_NOTE     PTR
                         3270  
   E508  23              3271                       INC   HL                             ;HL   =  address     of  the   header    of  the   note    after     this   note
   E50C  0D7501          3272                       LD    [IXX+T],B                      ;Store    in  NEXT_NOTE     PTR
   E50F  DD7402          3273                       LD    [1X+2],H                       
                         3274  
                         3275  ;          *  move   this   note’s    data   and   fill   in   bytes   where    necessary
                         3276  
   E512  D03604F0        3277                       LD    [ IX+ATN],OFOH                 ;set   atn   off
   E516  DD7705          3278                       LD    [ IX+NLEN],A                   ;NLEN    :=  5  bit   duration
   E519  DD360700        3279                       LD    [ IX+FSTEP],O                  ;indicate      freq   not   to  be  swept
   E51D  DD360800        3280                       LD    [ IX+ASTEP],0                  ;indicate      atn   not  to   be  swept
   E521  C3E55EC         3281                       JP    MODBO                          
                         3282                       .                                    
                         3283  ;          ENOIF
                         3284  
   E524                  3285  L13                                                       
   E524  CB67            3286                       BIT   4,8                    -TEST    FOR  END 
   E526  280E            3287                       JR    Z,L14                          ;if  PSW    is  non-zero     end   of  song
    528  CB5F            3288                       BIT   3,A                            ;test    for   repeat
  E552A  2804            3289                       JR    2,ENONOREP                     ;1f  PSW    is  non-zero     repeat    song
                         3290  ;@@@   ENDREP
   E52C  CT              3291                       POP   BC                             ;B  :=  SONGNO
   E52D  C3E°~           3292                       JP    JUKE  BOX                      ;to  reload     is*   note   of   this   song
                         3293  
                         3294  ;       RET                           ; to PROCESS  DATA   _AREA,  don’t   save  header
                         3295  ;       ENDIF
                         3296  
   E530                  3297  ENONOREP                                                  
   E530  5EFF            3298                       LD    A,INACTIVE                     
   E532  F5              3299                       PUSH  AF                             ;Save   inactive   code   to end  song
   E533  C3E55EC         3300                       JP    MODBO                          ;to  load  byte   O
                         3301  
                         3302  ;       ENDIF
                         3303  ;       -  test  for  special   sound  effect
                         3304  
   E536                  3305  L14                                                       
   E536  E63C            3306                       AND   001111008           SMASK   IRRELEVANT    BITS 
   E538  FE04            3307                       CP    00000  1008                    ;test   for  BS  - B2  = OOO!
   E53A  2027            3308                       JR    NZ,L15                         ;1f  PSW  is  zero  note   is a  special   effect
                         3309  ;e@@ EFFECT
   E53C  FDE1            3310                       POP   IY                             ;TY  :=  SONGNO
   E53E  F0E5            3311                       PUSH  IY                             ;put  SONGNO   back  on  stack
   E540  C5              3312                       PUSH  BC                             ;Save  header   on  stack   NEXT_NOTE  PTR    := SFX,  DE  :=  SFX
   E541  23              3313                       INC   HL                             ;-pt  HL  to  next  byte   [LSB  addr  SFX]
   E542  5E              3314                       LD    E,[HT]                         ;-E  :*  LSB  SFX
   E543  DD7301          3315                       LD    [IXX+1],€                      ;-put  LSB  of  SFX   in byte   1 of  SxDATA   ([NEXT_NOTE_PTR]
   E546  23              3316                       INC   HL                             ;"pt  HL  to  MSB  SFX
   E547  56              3317                       LD    D,[HL]                         ;-D  :=  MSB  SFX
   E548  DD7202          3318                       LD    [IXX+2],D                      ;-put  MSB  SFX   in byte   2 of  SxDATA
   E548  23              3319                       INC   HL                             ;point   HL  to next   note  [after   this  new  note]
   E54C  FDE5            3320                       PUSH  IY                             ;A  :2 SONGNO
   E54E  FI              3321                       POP   AF                             
   E54F  D5              3322                       PUSH  DE                             ;1Y  :=  SFX
   E550  FDE1            3323                       POP   IY                             
   E552  11&E558         3324                       LD    DE,PASS1                       ;create   “CALL   [IV]"  with  RET  to  PASS1  by  storing
   E555  D5              3325                       PUSH  DE                             ;PASS1  on  the  stack
   E556  FDE5            3326                       JP    [LY]                           ;ist  7 bytes   SFX  will  save   addr  next  note  &  SONGNO
   E558                  3327  PASS!                                                     
   E558  110007          3328                       LD    DE,7                           ;in same   fashion,   create   a  “CALL  (1Y+7)*
   E558  FD1I9           3329                       ADD   IY,DE                          ;to allow   SFX  to  load   initial  values
   E55D  11E55EC         3330                       LD    DE,MODBO                       ;RET   to  MODBO
   E560  05      .       3331                       PUSH  DE                             
   E561  FDE5            3332                       JP    [IY]                           
                         3333  
                         3334  ;      ENDIF
                         3335  
                         3336  ;       - 1f  here,  note   is type  0  - 3
                         3337  
   E563                  3338  L15                                                       
   E563  C5              3339                       PUSH  BC                             ;Save   header   on  stack
   E564  78              3340                       LD    A,B                            ;A  :=  fresh  copy   header
   E565  E603            3341                       AND   000000  1 1B                   ;mask   all  but  type  number
   E567  87              3342                       OR    A                              ;test   for  type  O
   E568  2020            3343                       JR    NZ,L16              7          ;if PSW   is zero  note   is  type  O: fixed   freq  and  atn
                         3344  
                         3345  ;@ee TYPEO                                   ;5e@t up NEXT_NOTE   PTR
   E56A  23              3346                       INC   HL                             ;next   note  [after   this  new  note]   ts 4 bytes   away,
   E56B  23              3347                       INC   HL                             ;point   HL  to  it     .
   E56C  23              3348                       INC   HL                             
   E56D  23              3349                       INC   HL                             
   E56E  007501          3350                       LD    [IX+T],B                       ;put  addr    in NEXT_NOTE_PTR
   E571  DD7402          3351                       LD    [IX+2],H                       
                         3352  
                         3353  ;          * move    new   note   data    and   fill   in  bytes   where    necessary
                         3354  
   E574  28              3355                       DEC   HL                             ;point   HL  back    to  ist  ROM   data    to  move,   NLEN
   E575  110005          3356                       LD    DE,O5                          ;point   DE  to  destination:       bytes    5,  4,   and  3
   E578  CDE6003         3357                       CALL  DE TO  DEST                    
   E57B  010003          3358                       LD    BC  3                          ;move  3  bytes
   E57E  EDB5            3359                       LDDOR                                
   E580  DD0360700       3360                       LD    [IX+FSTEP],0O                  ;set  for   no  freq   sweep
   E584  00360800        3361                       LD    [IX+ASTEP],0                   ;set  for   no  atn   sweep
   E588  1862            3362                       JR    MODBO                          
                         3363  
                         3364  ;          ENDIF
                         3365  
   E5BA                  3366  Li6                                                       
   E5BA  FE0!            3367                       CP    1                              ;test  for   type    1
   E58C  201A            3368                       JR    NZ,L17                         ;if  PSW  is  zero    note   is   type   1:  swept
                         3369                                                            ;  freq,   fixed    attenuation
                         3370  ;e@e@   TYPE!                                         ;  set  up   NEXT_NOTE    PTR
   E5BE  110006          3371                       LD    DE,6                    :NOTE  AFTER    THIS   NOTE    IS  6 BYTES    AWAY, 
   E591  19              3372                       ADD   HL,DE                          ;pt  HL  to  it
   E592  007501          3373                       LD    [IX+T],B                       ;Store    in  NEXT_NOTE    PTR
   E595  007402          3374                       LD    [IX+2],H                       
                         3375  
                         3376  ;          *  move    new  note    data    and  fill    in bytes    where    necessary
                         3377  
   E598  2B              3378                       DEC   HL                             ;point   HL   back   to   ist  ROM   data   to   move,   FSTEP
   E599  1C              3379                       INC   E                              ;E;  point    DE  to  destination:       bytes    7   - 3
   E59A  CDE6603         3380                       CALL  DE TO  DEST                    
  E559D  010005          3381                       LD    BC,5                           ;move   5  bytes
   E5A0  EDB5            3382                       LDDR                                 
   E5A2  DD3660800       3383                       LD    [IX+ASTEP],0                   ;set   for  no   atn  sweep
   E5A6  1844            3384                       JR    MODBO,                         
                         3385  
                         3386  ;          ENDIF
                         3387  
   E5AB                  3388  117                                                       
   E5A5  FE02            3389                       CP    2                              ;test   for   type   2                                 
   E5AA  2026            3390                       JR    NZ,TYPE3                       ;if  PSW   is  zero   note    is  type   2:   fixed    freq,  swept  attenvation
                         3391  ;@e@e   TYPE2                                         ;set   up  NEXT  _NOTE  PTR
   E5AC  110006          3392                       LD    DE,6                           ;pt  HL  to   note   after    this   note,    since    it’s  6 bytes   away,
   E5AF  19              3393                       ADD   HL,DE                          ;pt  HL  to   it  by  adding    6
   E5B0  FI              3394                       POP   AF                             ;A  :=  header    this   note   [CH¢      SONGNO   }
   E5B1  F5              3395                       PUSH  AF                             ;put   back   on  stack
   E5B2  E6C0            3396                       AND   110000008                      ;mask   SONGNO,     leaving    CHA
   E584  2001            3397                       JR    NZ,L18                         ;1f  PSW   is  zero   this    its a  noise   note,     which  is  only  5  ROM    bytes     iong
   E586  28              3398                       DEC   HL                             ;SO  move   HL  back    1 byte
                         3399  
                         3400  ;          ENDIF
                         3401  
   E587                  3402  118                                                       
   E587  007501          3403                       LD    [IX+1],T                       ;put   addr   in  NEXT_NOTE_PTR
   E5BA  DD7402          3404                       LD    [1X+2],H                       
                         3405  
                         3406  ;          *  move    new  note   data     and  fill   int      ‘s  where   necessary
                         3407  
   E5BD  2B              3408                       DEC   HL                             ;pointHi back   to  ist  ROM  data   to move,  APS
   E5BE  1E09            3409                       LD    E,9                            ;point DE to  destination:     bytes   9,8,5  - 3
   E5C0  CDE603          3410                       CALL  DETO DEST                      
   E5C3  010002          3411                       LD    BC,2                           ;move 2 bytes
   E5C6  EDBB            3412                       LDDR                                 ;when done,  DE  points   to  FSTEP,   HL to  ROM NLEN
   E5C8  AF              3413                       XOR   A                              
   E5C9  12              3414                       LD    [DE],A                         ;FSTEP := O  for  no  freq  sweep
   E5CA  16              3415                       DEC   DE                             ;pt DE to RAM   NLEN
   E5CB  1B     .        3416                       DEC   DE                             
  E55CC  0E03            3417                       LD    C,3                            ;     last  3 ROM  bytes    if this   is a noise  note,   garbage
   E5CE  EDB5            3418                       LDDR                                 ;will be loaded   into   byte  3,  buts  that’s  OK
   E500  181A            3419                       JR    MODBO                          
                         3420  
                         3421  ;        ENOIF
                         3422  
                         3423  ;       if here,   note  is  type  3:  swept fred,  swept   attenuation
                         3424  
   E502                  3425  TYPE3                                                     ;set up NEXT NOTE   PTR
   E502  110008          3426                       LD    DE,8                           ;snoteafter  this  note   is  8 bytes   away,
   E5D5  19              3427                       ADD   HL,DE                          ;pt HL to  it
   E506  007501          3428                       LD    [IXX4+4],0                     ;put addr  in NEXT_NOTE   PTR
   E509  DD7402          3429                       LD    [1X+2],H                       
                         3430  
                         3431  ;       * move  new  note  data   and  fill in bytes   where   necessary
                         3432  
   E5DC  28              3433                       DEC   HL                             ;point HL back   to  ist  ROM  data   to move,  APS
   E5DD  DDE5            3434                       PUSH  ~=E'IK                         ;point DE to  destination:     bytes   9 - 3
  E5D0F  FDE1            3435                       POP   IY                             ;I1Y:= addr  byte  O   [and DE  =  6]
    E5E  1C              3436                       INC   E                              ;DE  :9
   E5E2  FDI5            3437                       ADD   IY,DE                          ;IY  :=addr  byte  9   [APS]
   E5E4  FDE5            3438                       PUSH  LY                            A 
  E55E6  D1              3439                       POP   DE                             ;DE  :=addr  APS
   E5E7  010007          3440                       LD    BC,7                           ;move 7 bytes
   E5EA  EDB5            3441                       LDDR                                 
                         3442  
                         3443  ;       * modify   byte O  basis   header  new note
                         3444  
   E5EC                  3445  MODBO                                                     
   E5EC  DDE5            3446                       PUSH  IX                             ;pt HL to byte   O
   E5EE  E1              3447                       POP   HL                             
   E5EF  FI              3448                       POP   AF                             ;A := header  new  note
   E5F0  CI              3449                       POP   BC                             ;B :2=SONGNO                                             
   E5F1  FEFF            3450                       CP    INACTIVE            -TEST FOR  INACTIVE    [SONG  OVER,AS DETECTED   ABOVE] 
   E5F3  C8              3451                       RET   Z                              
   E5F4  57              3452                       LD    D,A                            ;save header   in D
   E5F5  E63F            3453                       AND   3FH                            ;Rid channel  bits
   E5F7  FE04            3454                       CP    04                  -SPECIAL EFFECT 
   E5F9  2002            3455                       JR    NZ,L20_ LOAD  _NEX             
   E5FB  063E            3456                       LD    B,62                           
                         3457  
   E5FD                  3458  L20_LOAD_NEX:                                             
   E5FD  7A              3459                       LD    A,D                            ;restore A  to  header
   E5FE  E6C0            3460                       AND   OCOH                -A  :=CHA    GOQOOO0OO00O 
   E600  B0              3461                       OR    B                              ;A  :=mew CH#     SONGNO
   E601  77              3462                       LD    [HL],A                         ;store back  in  byte  O
                         3463  
                         3464  ;         ENDIF
                         3465  
                         3466  ;@ee@ 119
   E602  C9              3467                       RET                                  
                         3468  
   E603                  3469  DETO_DEST                                                 ;DE  passed = offset  from byte  0,  RETed w  addr  byte  offset
   E603  DDE5            3470                       PUSH  _—IX                           
   E605  FDE1            3471                       POP   IY                             ;1Y     addr byte  O [and DE  = offset]
   E607  FD19            3472                       ADD   IY,DE                          ;1Y     addr byte  O + offset
   E609  FDE5            3473                       PUSH  —SI‘TY                         
   E608  D1              3474                       POP   DE                             ;DE     addr of destination   byte  in SxDATA
   E60C  C9              3475                       RET                                  
                         3476  
                         3477                       END   LOADNEX                        
                         3478  
                         3479  
                         3480  ;5 rrr                      rr      re        rrre  ee ee  ee   eee  ee eeee ee   eee
                         3481  ;
                         3482  ;  Out_to_sound_    port
                         3483  ;                   input:   a=sound   port   data  to  output
                         3484  ;                  register    usage:  n.a.
                         3485  ;
   E60D                  3486  OUT_TO_SOUND_PORT:                                        
   E600  C5              3487                       PUSH  BC                             ;SAVE  BC
   E60E  47              3488                       LD    B,A                            ;THE  IDEA   IS  TO  GET  THE
   E60F  3AFC2F          3489                       LD    A,[SOUNDPORT ]              —  ; INDIRECT    PORT  ADDRESSING
   E612  4F              3490                       LD    C,A                            ;THRU  THE   PORT   TABLE  IN   EOS
   E613  ED41            3491                       OUT   [C],8                          
   E615  78              3492                       LD    A,B                            
                         3493                       POP   BC                             
   E617  C9              3494                       RET                                  
                         3495  ;
                         3496  ;,SSRSHS ST SSSR  SSSCESTESTSS  SSSSS SSSSS SSS SSSSS SSS STS SSS  SsSlsessSessssrze
                         3497  ;»SSSSSSSSESSSSSSPSSSSESSSSSSSSS       SSS SPSSTssssssescssessssssezseeszer=2et2zee2
                         3498  ;,BBSSPSSSSECTPTPSFESSSSSSSSSSP SHSSS STSST SSSSSSSSTessersersesstestsseeexse22eze22222
                         3499  ;
                         3500  
                         3501  
                         3502                                                            ;GLB         _  QUERY    FILE,       SET    FILE,      MAKE    FILE
                         3503                                                            ;GLB         __FILE    QUERY
                         3504                                                            ;EXT          FCB  _HEAD   _ADDR,FCB_       DATA_ADOR
                         3505                                                            ;EXT          SCAN_FOR    FILE
                         3506                                                            ;EXT         BLOCKS    REQ,USER        BUF   ,USER    NAME
                         3507                                                            ;EXT         BUF  START    ,BUF    END
                         3508                                                            ;EXT         STRCMP    ,BASECMP
                         3509                                                            ;EXT         NEW   HOLE   SIZE,NEW         HOLE   START,HOLE        FILE    NAME
                         3510                                                            ;EXT         EOS   YEAR,EOS      MONTH,EOS        DAY
                         3511                                                            ;EXT         BLK_STRT_PTR,VOL            BLK   S2           -DLS(8/29/83)
                         3512                                                            ;EXT         READ_BLOCK.,WRITE           BLOCK,CHECK        IF   OIRECTORY
                         3513                                                            ;EXT         DIR_BLOCK_NO,FOUND             AVAIL    ENTRY
                         3514                                                            ;EXT         FILENAME     CMPS
                         3515  
                         3516  ;3m        nm  ee        enenn       we  me  mn      ee me re  mem ewe  nee  ree       nee     ee eneeen
                         3517  ;
                         3518  ;    QUERY    FILE     --  Read     the   file’s      directory        entry.     (USES     STRCMP     FOR   FILE    NAME     COMPARISIONS)
                         3519  ;    FILE    QUERY     --   SAME   AS   ABOVE      BUT    SETS    UP   SCAN  _FOR_FILE       FOR    BASE    COMPARES        (  USES      BASECMP    )
                         3520  ;
                         3521  ;  CALLING     PARAMETERS:        Device     number       in  A
                         3522  ;                                 address     of     name    string      in  DE
                         3523  ;                                 address       of   buffer      in  HL
                         3524  ;
                         3525  ;  EXIT    PARAMETERS:       if   no  errors       --   Z  =   1;  A   =  0;  BCDE     =  file’s     start     block:
                         3526  ;                                  Girectory         entry     in  caller’s      buffer
                         3527  ;                            if   errors      --   Z  =   0;  A   =  error    code;      DE  =   junk;
                         3528  ;                                  caller’s        buffer     undef    ined
                         3529  ;
                         3530  ;seer  ccc  ccc  rr rrr rte         et        rt      er rr          er    re          ee er re     eee
                         3531  
   E618                  3532  __FILE_QUERY:                                             
   E618  37              3533                       SCF                                  ;  THIS    ENTRY    DOES    NOTHING      MORE     THAN    SET   CARRY     FLAG
   E619  1802            3534                       JR    QUEER,                         
                         3535  
   E618                  3536  __QUERY_FILE                                              
   E61B  37              3537                       SCF                                  ;  THIS    ENTRY     CLEARS     CARRY     FLAG
   E61C  3F              3538                       CCF                                  
   E61D                  3539  QUEER:                                                    
   E610  E5              3540                       PUSH  HL                             ;SAVE     REG’‘S
   E61E  D0E5            3541                       PUSH  IX                             
                         3542  
   E620  F5              3543                       PUSH  AF                                              ] 
                         3544  
   E621  3801            3545                       JR    C,SET     UP_A      -          ;  DID    WE  COME     IN  AT   FILE   QUERY
      -                  3546  
   E623  AF              3547                       XOR   A                              ;  USE   STRCMP     FOR    FILE    NAME     COMPARE
   E624                  3548  SET_UP_A:            !                                    
   E624  32FD0D8         3549                       LD    [FILENAME_CMPS],A              ;  O  =  COMPARE      COMPLETE       FILE    NAME
                         3550                                                            ;  NOT   O   -  COMPARE      ONLY    THE    BASE
   E627  FI              3551                       POP   AF                             
      .                  3552  
   E628  22FE06          3553                       LD    [USER_BUF  ],HL                ;SAVE     USER’S     DATA    ADDRESS
                         3554  
   E62B  0D2AFDFD        3555                       LD    IX,[FCB_HEAD      ADDR]        ;POINT     TO   SYSTEM’S       FCB
   E62F  62              3556                       LD    H,D                            ;GET    NAME    POINTER      IN   HL
   E630  68              3557                       LD    L,E                            
   E631  CF       B      3558                       CALL  SCAN_FOR_FILE                  ;LOOK     IN  TH’     ‘RECTORY
   E634  2017            3559                       JR    NZ,Q_ERROR                     ;BRANCH IF ERROR RETURNED
                         3560  
   E636  D5              3561                       PUSH  DE              >SAVE START BLOCK OF FILE 
   E637  C5              3562                       PUSH  BC                             
                         3563  
   E638  ED5BFE06        3564                       LD    DE,[USERBUF ]                  ;GET BUFFER ADDRESS IN DOE
   E63C  DD6E21          3565                       LD    L,[1IX+FCPOINTER]              ;GET ADDR OF ENTRY IN  HL
   E63F  DD6622          3566                       LD    H,[IX+FCB_POINTER+1]           
   E642  010017          3567                       LD    BC,OIR_ENT_LENGTH-3            ; SET BYTE COUNT TO  LOAD  ONLY  VALID INFO  THAT
                         3568                                                            ; THAT WAS STORED ON THE  DEVICE
                         3569  
   E645  EDB0            3570                       LDIR                                 ;COPY DATA TO CALLER’S BUFFER
                         3571  
   E647  C1              3572                       POP   BC                             ;GET FILE’S START BLOCK
   E648  D1              3573                       POP   DE                             
                         3574  
   E649  AF              3575                       XOR   A                              ;SHOW NO ERROR
   E64A  32FD08          3576                       LD    [FILENAME_CMPS],A              ; DEFAULT FOR SCAN FOR  FILE
   E64D                  3577  Q_ERROR:                                                  
   E64D  DDE!            3578                       POP   IX                             ;sRESTOREREG‘S
   E64F  E1              3579                       POP   HL                             
   E650  C9              3580                       RET                                  
                         3581  
                         3582  
                         3583  ;5 r rr                  rrr       rts     tern          ttre              ~atte
                         3584  ;
                         3585  ;   SET FILE    --   Re-write    the  file’s   directory    entry.
                         3586  ;
                         3587  ; CALLING  PARAMETERS:      Device    number    in A
                         3588  ;                           address    of  name   string   in DE
                         3589  ;                           address    of  buffer    in HL
                         3590  ;
                         3591  ; EXIT  PARAMETERS:      tf no  errors    --  2  = 1; A  =  0;
                         3592  ;                             directory    entry   updated
                         3593  ;                        if errors    --  2  = 0;  A =  error   code;
                         3594  ;                             directory    entry   unchanged
                         3595  ;
                         3596  ;5mm                       rr   rn       re  mere   ees crest e reece  sow mere teen
                         3597  
   E651                  3598  SET                  FILE                                 
   E651  C5              3599                       PUSH  BC                             ;SAVE  REG’S
   E652  D5              3600                       PUSH  DE                             
   E653  E5              3601                       PUSH  HL                             
   E654  DDE5            3602                       PUSH  IX                             
   E656  22FE06          3603                       LD    [USER BUF],HL                  ;SAVE  ADDR  OF   USER’S   DATA
                         3604  
   E659  DD2AFDFD        3605                       LD    IX,[FCB_HEAD_ADDR]             ;POINT  TO  SYSTEM’S     FCB
                         3606  
   E65D  62              3607                       LD    H,D                            ;GET  STRING   ADDRESS    IN  HL
   E65E  68              3608                       LD    AE                             
   E65F  CDEF05          3609                       CALL  SCAN_FOR  FILE                 ;GET  THE  DIR  ENTRY
   E662  2026            3610                       JR    NZ,S_ ERROR                    ;BRANCH   IF ERROR
                         3611  
   E664  2AFE066         3612                       LD    HL,[USER  BUF  ]               ;GET  BUFFER   ADDRESS
   E667  DD5E21          3613                       LD    E,[IX+FCB_   POINTER]          ;GET  ENTRY  ADDR    IN  DE
   E66A  DD5622          3614                       LD    D,[IX+FCB_POINTER+1]           
   E660  010017          3615                       LD    BC,DIR_ENT_LENGTH-3            ;SET BYTE   COUNT
   E670  EDB0            3616                       LDIR                                 ;COPY  THEIR   BUFFER   TO   BLOCK   BUFFER
                         3617  
   E672                  3618  TAPE_TIMED_OUT:                                           
   E672  DD7E17          3619                       LD    A,[IX+FCB_DEVICE]              ;SET   DEVICE  NUMBER
   E675  2AFD0FF         3620                       LD    HI,[FCB_DATA_ADOR]             ;GET  ADDR  OF  MY  BUFFER
   E678  DD5E19          3621                       LD    E,[IX+FCB_BLOCK]               ;GET  BLOCK   ADDRESS    IN  BCDE
   E67B  D056IA          3622                       LD    D,[IX+FCB_BLOCK+1]             
   E67E  DD4E1B          3623                       LD    C,[IX+FCB_BLOCK+2]             
   E681  DD461C          3624                       LD    B,[1X+FCB_BLOCK+3]             
   E684  CDFIE6          3625                       CALL  WRITE_BLOCK                    ;RE-WRITE   THE   DIRECTORY     BLOCK
                         3626  
   E687  2001            3627                       JR    NZ,WRITE_ERRORS                
   E689  AF              3628                       XOR   A                              ;SHOW  NO  ERRORS
                         3629  
   E68A                  3630  WRITE                ERRORS:                                
   E68A                  3631  SERROR                                                    
                         3632  
   E68A  DDE!            3633                       POP   IX                             ;RESTORE   REG‘S
  E68BC  ET              3634                       POP   HL                             
   E68D  DI              3635                       POP   DE                             
   E68E  C1              3636                       POP   BC                             
   E68F  C5              3637                       RET                                  
                         3638  
                         3639  
                         3640  ;Br           rr          rt        rr      cer     rere  rrr       -----------
                         3641  ;
                         3642  ;  _MAKE  FILE:   creates  a  file  in  the directory.
                         3643  ;
                         3644  ;  ENTRY  PARAMETERS:   called  with  device   ID  in A:  address   of name
                         3645  ;                  string   in HL;  file  size   (in bytes)   in  BC DE.
                         3646  ;
                         3647  ;   NOTE:    IF FILE SIZE   = O (BC  DE),  THEN  THE  REMAINDER    OF THE  TAPE IS
                         3648  ;            ALLOCATED  TO THE  FILE
                         3649  ;
                         3650  ;  EXIT  PARAMETERS:  CONDITION   FLAGS
                         3651  ;                       Z    -   NO  ERRORS
                         3652  ;                     NZ     -   ERRORS
                         3653  ;                                 A  = ERROR   CODE
                         3654  ;
                         3655  ;        ALL  REGISTERS  ARE  PRESERVED   EXCEPT  AF
                         3656  ;                                       
                         3657  ;5mm   rrr             rr     rrr    rr   en  rr   rn nn   rere en rereeee  ----
                         3658  
              <0000>     3659  FOUND_ENTRY          EQU   O                              ; BIT   INOICATING   DELETED   FILE FOUND  FOR  OVERLAYING
                         3660  
   E690                  3661  _MAKE_FILE                                                
   E690  FDE5            3662                       PUSH  IY                             ;SAVE  REGISTERS
   E692  DDE5            3663                       PUSH  IX                             
   E694  E5              3664                       PUSH  HL                             
   E695  D5              3665                       PUSH  DE                             
   E696  C5              3666                       PUSH  BC                             
                         3667  
   E697  DD2AF0FD        3668                       LD    IX,[FCB_HEAD_ADDR]             ;POINT  TO  SYSTEM   FCB
   E69B  DD36  1800      3669                       LD    [IX+FCB_MODE],0         >  INIT  IT IN  CASE   IT WAS SET 
                         3670  
   E69F  007717          3671                       LD    [IX+FCB_DEVICE],A              ;SAVE  DEVICE  NUMBER
   E6A2  22FE10          3672                       LD    [USER_NAME],HL                 ;SAVE  POINTER   TO  NAME
                         3673  
   E6A5  78              3674                       LD    A,B                            ; CHECK   IF TO  ALLOCATE   REST  OF TAPE
  E66A6  B1              3675                       OR    C                              
   E6A7  200A            3676                       JR    NZ,GOT_ FILE SIZE              ; NOPE,  GOT  SIZE
                         3677  
   E6A9  78              3678                       LD    A,E                            
   E6AA  B82             3679                       OR    D                              
   E6AB  2006            3680                       JR    NZ,GOT FILE  SIZE              
   E6AD  DDCBI5EE        3681                       SET   MODEREMAINDER   _BIT,[IX+FCB_   MODE] ;  FLAG  IT
                         3682  
   E681  1820            3683                       JR    SET_UP_DIR                     
                         3684  
                         3685  
                         3686  ;   SINCE  WE ARE  CALLED  WITH  A BYTE  COUNT,   DIVIDE  IT  BY  1024
                         3687  ;   (SHIFT  RIGHT  10 BITS)  TO  GET  A BLOCK  COUNT.
                         3688  
   E6B3                  3689  GOT_FILE_SIZE:                                            
   E6B3  5A              3690                       LD    E,D                            ;D0  A QUICK   SHIFT  BY  8
   E6B4  51              3691                       LD    D,C                            
   E6B5  48              3692                       LD    C,B                            
   E6B6  0600            3693                       LD    B,O                            
   E6B8  CB39            3694                       SRL   C                              ;SHIFT  ONE  MORE
   E6BA  CB1A            3695                       RR    D                              
   F6BC  CBTB            3696                       RR    E                              
   E6BE  CB39            3697                       SRL   CC                             ;THEN  ONE   LAST   TIME
   E6C0  CBIA            3698                       RR    A]                             
   E6C2  CB1B            3699                       RR    E                              
                         3700  
                         3701  ; FOR THIS   TO BE  A LEGAL   FILE   SIZE,   IT  MUST  FIT   INTO  DE.
                         3702  
   E6C4  79              3703                       LD    A,C                            ;CHECK   FOR  TOO  BIG
   E6C5  B7              3704                       OR    A                              
   E6C6  C2E992          3705                       JP    NZ,TOO  BIG                    ;JUMP   IF TOO   BEEG,   SENOR
   E6C9  13              3706                       INC   DE                             ;ROUND   UP  IN  CASE  THERE   WAS   A FRACTION
   E6CA  78              3707                       LD    A,E                            ;CHECK   FOR  TOO  BIG  AGAIN
   E6CB  B2              3708                       OR    D                              
   E6CC  CAE992          3709                       JP    Z2,T0BIG                       
   E6CF  ED53FE0C        3710                       LD    [BLOCKS  REQ],DE               ;ELSE  SAVE   THE  BLOCK   COUNT
                         3711  
   E6D3                  3712  SET_UP_DIR:                                               
   E603  110000          3713                       LD    DE,O                           ; ZERO  OUT   HI  ADDRESS
   E6D6  ED53FE0E        3714                       LD    [BLOCKS  _REQ+2],DE            
   E6DA  ED53FDD9        3715                       LD    [DIR_BLOCK_NO],DE              
   E6DE  AF              3716                       XOR   A                              
   E6DF  32FDDB.         3717                       LD    [FOUND_AVAIL_ENTRY],A          
                         3718  
   E6E2  DD361901        3719                       LD    [IX+FCB_BLOCK],1               ;INIT  NUMBER    OF  FIRST   DIR  BLOCK
   E6E6  DD771A          3720                       LD    [IX+FCB_BLOCK+1],A          ZERO   IT  OUT 
   E6E5  0D771B          3721                       LD    [IX+FCB_BLOCK+2],A             
   E6EC  DD771C          3722                       LD    [IX+FCB_BLOCK+3],A             
                         3723  
   E6EF  DD360001        3724                       LD    [IX+FCB_START_BLOCK],1         ;INIT  NUMBER    OF  FIRST   DIR  BLOCK
   E6F3  DD770E          3725                       LD    [IX+FCB_START_BLOCK+1],A       
   E6F6  D0D770F         3726                       LD    [IX+FCB_START   BLOCK+2],A     
   E6F9  0D7710          3727                       LD    [IX+FCB_START   BLOCK+3],A     
      7                  3728  
   E6FC  ED5BF0FF        3729                       LD    DE,[FCB_DATA_ADDR]             ;INIT   POINTER    TO BUFFER
   E700  007321          3730                       LD    [IX+FCB_POINTER],€             
   E703  007222          3731                       LD    [IX+FCB_POINTER+1],0           
                         3732  
   E706  ED53FE08        3733                       LD    [BUF_START],DE                 ;ALSO   INIT   HERE  WITH   SAME
   E70A  210400          3734                       LD    HL,1024                        ;CALC   ADDR   OF  END  OF  BUFFER   TOO
   E700  19              3735                       ADD   HL,DE                          
   E70E  22FE0A          3736                       LD    [BUF_END],HL                   ;AND   SAVE  IT
                         3737  
                         3738  ;THIS LABEL   NOT  USED  IN THIS   ROUTINE,    NOT  DECLARED    GLOBAL
                         3739  ;REMOVED  BECAUSE   IT CONFLICTS    WITH   IDENTICAL    LABEL   ELSEWHERE
                         3740  ;READ_TIMEOUT:
   E711  DD7E17          3741                       LD    A,[IX+FCB_DEVICE]              ;GET  PARAMETERS     FROM  FCB
   E714  DD6E2!          3742                       LD    L,[IX+FCB_POINTER]             
   E717  DD6622          3743                       LD    H,[IX+FCB  POINTER+1]          
   E71A  DD5E19          3744                       LD    E,[IX+FCB  BLOCK]              
   E710  DD56IA          3745                       LD    0,[1X+FCB_BLOCK+1]             
   E720  DD4E18          3746                       LD    C,[IX+FCB_BLOCK+2]             
   E723  DD461C          3747                       LD    B,[IX+FCB_BLOCK+3]             
   E726  C0F178          3748                       CALL  READBLOCK                      ;THEN   READ   THE  FIRST   BLOCK
                         3749  
   E729  C2E989          3750                       JP    NZ,MAKE_ERROR                  IF  ERROR 
                         3751  
   E72C                  3752  SET_UP_FCB:                                               
   E72C  \F0FF           3753                       LD    IY,[FCB _DATA_ADDR]            ;POINT       THE  BUFFER
                         3754  
   E730  F07E0C          3755                       LD    A,[IY+VOL_DIRSIZE]             ;GET   THE   DIR  SIZE    BYTE
   E733  E67F            3756                       AND   7FH                            ;ZERO   THE   PERM   BIT
                         3757                       INC   A                        :BECAUSE    WE   START    IN  BLOCK    1 
                         3758                       DEC   A                              ;TO  SOLVE    PICKET    FENCE    PROBLEM
   E735  007710          3759                       LD    LIX+FCB_LAST       BLOCK],A    ;SET   THE   LAST   BLOCK    #
   E738  D0D36  1E00     3760                       LD    [IX+FCB_LAST_BLOCK+1],0        ;OTHER    BYTES    WILL   BE  ZERO
   E73C  0036   1F00     3761                       LD    [ IX+FCB_LAST_BLOCK+2],0       
   E740  DD362000        3762                       LD    [I1X+FCB_LAST_BLOCK+3],0       
                         3763  
   E744  CDF035          3764                       CALL  CHECK_IF_DIRECTORY             ;  CHECK    IF  DIRECTORY     EXISTS
   E747  C2E989          3765                       JP    NZ,MAKE_ERROR                  
                         3766  
   E74A  0626            3767                       LD    B,ENT_PER_BLOCK-       1       ;INIT   ENTRY    COUNT,    ALLOW   FOR   vOL   ID
                         3768  
   E74C                  3769  NEXT_ENT                                                  
   E74C  D0D6E 21        3770                       LD    L,[IX+FCB_POINTER]             ;GET   CURRENT    POINTER
   E74F  D06622          3771                       LD    H,[IX+FCB_POINTER+1]           
   E752  11001A          3772                       LD    DE,DIR_ENT_LENGTH              ;GET   LENGTH     OF  AN  ENTRY
   E755  19              3773                       ADD   HL,DE                          ;ADVANCE    POINTER     TO  NEXT   ENTRY
   E756  007521          3774                       LD    [IX+FCB_POINTER],L             ;AND   SAVE   IT  AGAIN
   E759  007422          3775                       LD    [IX+FCB_POINTER+1],H           
                         3776  
   E75C                  3777  CHECK_ENT                                                 
   E75C  DD06E21         3778                       LD    L,[IX+FCB_POINTER]             ;GET   POINTER    INTO    IY  THE   LONG   WAY
   E75F  DD6622          3779                       LD    H,[IX+FCB_POINTER+1]           
   E762  E5              3780                       PUSH  HL                             
   E763  FDE1            3781                       POP   IY                       SFT!  
                         3782  
   E765  FD7E0C          3783                       LD    A,[IY+DIR_ATTR]                ;GET   THE  ATTRIBUTE      BYTE   FOR   THIS   ENTRY
   E768  4F              3784                       LD    C,A                            ;SAVE   IT  HERE    FOR  NOW
   E769  CB47            3785                       BIT   ATTR_HOLE     BIT,A            ; CHECK    IF  HOLE
   E768  C2E807          3786                       JP    NZ,FOUND  _HOLE                ;BRANCH    IF   IT‘S   A  HOLE!!!    << ewereaxaz
                         3787  
   E76E  DDCB   186E     3788                       BIT   MODE  REMAINDER      BIT,[IX+FCB_MODE] ;  DO  WE   ALLOCATE     REST   OF   TAPE?
   E772  2037            3789                       JR    NZ,0_FILE                      ; YUP,   DON’T    BOTHER    CHECKING
                         3790  
   E774  CB51            3791                       BIT   ATTR_DEL_BIT,C                 ;IS  IT  A  DELETED     FILE?
   E776  2824            3792                       JR    Z,ACTIVE    FILE               ;NOPE,   AN   ACTIVE   ONE
                         3793  
                         3794  ;             LET’S     LOOK   FOR   DELETED     FILE   TO  USE
                         3795  
   E778  FD6E  11        3796                       LD    L,[1¥+DIR_MAX_LENGTH]          ;  GET   ALLOCATED     SIZE
   E77B  FD6612          3797                       LD    H,[IY+DIR_MAX_LENGTH#1]        
                         3798  
   E77E  ED5BFE0C        3799                       LD    DE,[BLOCKS   REQ]              ;  MIN  NO  OF   BLOCKS    NEEDED
   E782  87              3800                       OR    A                              ;clear    carry    flag
   E783  ED52            3801                       SBC   HL,DE                          ;  WILL   WE  FIT?)
   E785  3824            3802                       JR    C,D  FILE                      ;  NOPE,   LOOK    FOR  ANOTHER     ENTRY
                         3803  
   E787  21F0DB          3804                       LD    HL,FOUND   AVAIL    _ENTRY,FLAG   BYTE 
   E78A  CB46            3805                       BIT   FOUND_ENTRY,[HL]               ;  DO  WE  ALREADY     HAVE   FIRST    FIT?
   E78C  201D            3806                       JR    NZ,D_FILE                              YUP,DON’T    EVEN   CONSIDER     THIS   ONE 
                         3807  
   E78E  CBC6            3808                       SET   FOUND_ENTRY,[HL  ]             
   E790  DD5E   19       3809                       LD    E,[1X+FCB_BLOCK]               ;GIT   BLOCK   NO   OF  THIS   DIRECTORY
   E793  DD561IA         3810                       LD    D,[1X+FCB_BLOCK+1]             
                         3811  
   E796  ED53FDD9        3812                       LD    [OIR_BLOCK_NO],DE              ; SAVE  IT
   E79A  180F            3813                       JR    D_FILE                         
                         3814  
                         3815  
                         3816  ; IF THIS  IS  A REAL FILE,  WE  CAN  SEE  IF  ITS NAME MATCHES    THE
                         3817  ; ONE  WE ARE  ABOUT TO MAKE   --  IT’S AN  ERROR  IF SO.
                         3818  
   E79C                  3819  ACTIVE_FILE:                                              
   E79C  DD5E21          3820                       LD    E,[IX+FCB_ POINTER]            ;POINT TO  THIS  ENTRY
   E79F  005622          3821                       LD    OD[IX+FCB_POINTER+1]           
   E7A2  2AFE10          3822                       LD    HL,[USER_NAME]                 ;POINT  TO DESIRED  NAME
   E7A5  CDF054          3823                       CALL                                 ;COMPARE  THE  BASE OF  THE   FILENAMES
   E7A8  CAE996          3824                       JP    Z,FILE_EXISTS                  ;BRANCH   IFTHEY’RE   THE  SAME
   E7A8                  3825  DFILE                                                     
   E7AB  109F            3826                       DJNZ  = NEXT_ENT                     ;ELSE  GO TO NEXT  ENTRY   (IF  IT  EXISTS)
                         3827  
   E7AD  2AFE08          3828                       LD    HL,[BUF_START]                 ;IF NOT  RESET  FCB  FOR NEXT   BLOCK
   E780  007521          3829                       LD    [IX+FCB_POINTER],L             
   E7B3  007422          3830                       LD    [IX+FCB_POINTER+1],H           
   E7B6  003419          3831                       INC   [IX+FCB_BLOCK]                 ;INC  THE BLOCK  -- NO  CARRY   OUT
                         3832  
                         3833  ; DO 4-BYTE   COMPARE OF FCB BLOCK    VS FCB_LAST  BLOCK   TO SEE
                         3834  ; IF THERE’S   MORE FILE LEFT.
                         3835  
   E789  DD7E20          3836                       LD    A,[IX+FCB_LAST_BLOCK+3]        ;COMPARE MS  BYTES
   E7BC  0DBE 1C         3837                       CP    [IX+FCB_BLOCK+3]               
   E7BF  DAE7FD          3838                       JP    C,FULL_DIR                     ;BRANCH  IF BLOCK   IS LARGER
   E7C2  0D7E1F          3839                       LD    A,[IX+FCB_LAST_BLOCK+2]        ;COMPARE  NEXT  BYTES
   E7C5  DDBE1B     .    3840                       CP    [IX+FCB_BLOCK+2]               
   E7C8  DAE7FD          3841                       JP    C,FULL_DIR                     ;BRANCH  IF BLOCK   IS LARGER
   E7CB  D07E1E          3842                       LD    A,[IX+FCB_LAST_BLOCK+1]        ;COMPARE  NEXT  BYTES
   E7CE  DDBE1A          3843                       CP    [IX+FCB_BLOCK+1]               
   E7D1  DAE7FD          3844                       JP    C,FULL_DIR-                    ;BRANCH  IF BLOCK  IS  LARGER
   E7D4  DD7E1D          3845                       LD    A,[IX+FCB_LAST_BLOCK+0]        ;COMPARE  LS  BYTES
   E707  DDBE19          3846                       CP    [1X+FCB_BLOCK+0]               
   E7DA  DAE7FD          3847                       JP    C,FULL_DIR                     ;BRANCH  IF BLOCK  IS  LARGER
                         3848  ; IF WE  FALL  OUT, FCB_BLOCK  <=  FCB_LAST  BLOCK.
   E700                  3849  DOREAD               AGAIN:                                
                         3850  
   E7DD  0D7E17          3851                       LD    A,[IX+FCB_DEVICE]              ;SET  UP THE  PARAMETERS
   E7E0  DD66E21         3852                       LD    L,[IX+FCB_POINTER]             
   E7E3  DD6622          3853                       LD    H,[IX+FCB_POINTER+1]           
   E7E6  DD5E19          3854                       LD    E,[IX+FCB_BLOCK]               
   E7E9  DD561A          3855                       LD    D,[1X+FCB_BLOCK+1]             
   E7EC  DD4E18          3856                       LD    C,[IX+FCB_BLOCK+2]             
   E7EF  DD461C          3857                       LD    B,[IX+FCB_BLOCK+3]             
   E7F2  C0F17B          3858                       CALL  READ_BLOCK                     ;AND READ  THE  NEXT BLOCK   OF  ENTRIES
   E7F5  C2E989          3859                       JP    NZ,MAKE_ERROR                  ; NOPE,  A REAL  ERROR
                         3860  
   E7F8                  3861  NOTIMEOUT:                                                
   E7F8  0627            3862                       LD    B,ENTPER  BLOCK                ;SET  THE ENTRY  COUNTER
   E7FA  C3E75C          3863                       JP    CHECK_ENT                      ;AND GO  CHECK  THE NEW  ENTRY
                         3864  
   E7FD                  3865  FULLDIR:                                                  
   E7FD  21FDDB          3866                       LD    HL,FOUND AVAIL  _ENTRY         
   E800  5               3867                       BIT   FOUND_ENTRY,[HL]               ‘E WE FOUND   AN  ENTRY? 
   E802  CAEQ9A          3868                       JP    Z,FULL_DIR_EXIT                ; NOPE,  EXIT
   E805  1807            3869                       JR    USE_ENTRY                      ; YUP,  CREATE   NEW   ENTRY    THERE
                         3870  
                         3871  ; ARRIVE   HERE   WHEN  WE’VE   FOUND   THE  HOLE   ENTRY   IN  THE  OIRECTORY.
                         3872  ; IV  IS  STILL   POINTING   TO  THE  ENTRY    IN  THE  BUFFER.
                         3873  
   E807                  3874  FOUND_HOLE                                                
   E807  21FDD8          3875                       LD    HL,FOUND  _AVAIL_ENTRY         
   E50A  CB46            3876                       BIT   FOUND ENTRY,[HL]               ; HAVE  WE  FOUND    A DELETED     ENTRY   WE  COULD  USE?
   E50C  2864            3877                       JR    Z,USE_HOLE                     ; NOPE,  STICK    IT  IN  THE   END
                         3878  
   EB0E                  3879  USE                  ENTRY:                                
   E60E  CB56            3880                       RES   FOUND_ENTRY,[HL ]              ; RESET  FOR   NEXT   TIME
                         3881  
   E810  DD6E19          3882                       LD    L,[1X+FCB_BLOCK]               ; GET THE   CURRENT    BLOCK                                                             '
   E813  DD66IA          3883                       LD    H,[IX+FCB_BLOCK+   1]          
                         3884  
   E816  ED5BF0D9        3885                       LD    DE,[OIR_BLOCK_NO]              ; BLOCK  NO  WHERE    WE  HAVE   ENTRY    TO  USE
   E5TA  87              3886                       OR    A                              ;Clear  carry   flag
   E@1B  ED62            3887                       SBC   HL,DE                          ; SAME  BLOCK?
                         3888  
   E81D  2AFE05          3889                       LD    HL,[BUF  START]                ; POINT  TO  START    OF  BLOCK
   E820  0076521         3890                       LD    [IX¢FCB_ POINTER],L            
                         3891                       LD    [IX+FCB_POINTERT1],H           
                         3892                       )                                    
   E826  2624            3893                       JR    Z,GOT_BLOCK                    ; YUP,  DON’T    NEED   TO  READ   IN   ANOTHER   BLOCK
                         3894  
   E828  007319          3895                       LD    [IX+FCB_BLOCK],E               ;  GET THIS   BLOCK
   E828  D0721A          3896                       LD    [IX+FCB_BLOCK+1],D             
                         3897  
   E82E  010000          3898                       LD    BC,O                           
   E831  D07E17          3899                       LD    A,[IX+FCB_DEVICE    ]          ;  DEVICE  ID
                         3900  
   E834  C0F178          3901                       CALL  READ_BLOCK                     
   E837  C2E9869         3902                       JP    NZ,MAKE ERROR                  
   EB3A  1810            3903                       JR    GOT_BLOCK                      ;  READ  IN  NEW  DIRECTORY
                         3904  
   E83C                  3905  NEXT_DIR:                                                 
   E83C                  3906  TOOSMALL:                                                 
   E83C  DD66E21         3907                       LD    L,[IX+FCB_POINTER]             ;  GET POINTER    TO  DIR   ENTRY
   E53F  006622          3908                       LD    H,[IX¢FCB_POINTER+1]           
                         3909  
   E842  11001A          3910                       LD    DE,OIR_ENT_LENGTH              ;  LENGTH  OF   ENTRY
                         3911  
   E845  19              3912                       ADD   HL,DE                          ;  POINT  TO  NEXT   ENTRY
                         3913  
   E846  007521          3914                       LD    [IX+FCB_POINTER],L             
   E849  007422          3915                       LD    [1X+FCB_POINTER+1],H           
                         3916  
   E84C                  3917  GOTBLOCK:                                                 
   E64C  E5              3918                       PUSH  HL                             
   E84D  F0E1            3919                       POP   IY                             
                         3920  
   EB4F  F0CB0C56        3921                       BIT   ATTRDEL   BIT,[1Y+#DIR   ATIR] ;  IS  IT  DELETED?
   E853  26EE7           3922                       JR    Z,NEXT_DIR                     ; NOPE,    LOOK   FOR   ANOTHER   DLETED    ENTRY
                         3923  
   E855  F06E11          3924                       LD    L,[1Y+DIR MAX  LENGTH]                  - GET   ALLOCATED     AMOUNT    OF  DELETED   FILE 
   E858  FD66612         3925                       LD    H,[1Y+DIR_MAX_LENGTH+      1]  
                         3926  
   E858  ED5BFE0C        3927                       LD    DE,[BLOCKS  REQ]               ; MIN   AMOUNT    NEEDED
                         3928  
   E65F  E5              3929                       PUSH  HL                             
   E660  87              3930                       OR    &                              ;Clear  carry    flag
   E861  ED52            3931                       SBC   HL,DE                          ; WILL   IT  FIT?
   E863  E1              3932                       POP   HL                             
                         3933  
   E864  3806            3934                       JR    C,TOO_SMALL                    ; NOPE,   TRY  ANOTHER    ONE
                         3935  
   E866  22FE0C          3936                       LD    [BLOCKS  REQ],HL               ; FORCE   ALLOCATED     AMOUNT
                         3937  
   E869  CDE5EF          3938                       CALL  LOAD_NEW_ENTRY_INFO            
                         3939                       '                                    
   E56C  C2E989          3940                       JP    NZ,MAKE  ERROR                 
                         3941  
   E66F  C3E971          3942                       JP    TIME_TO_WRITE                  
                         3943  
                         3944  ; COMPARE    FCB_BLOCK   TO  FCB LAST   BLOCK.     GO   TO MORE  BLOCKS
                         3945  ; IF  FCB _LAST  BLOCK   > FCB BLOCK.
                         3946  
   E872                  3947  USE_HOLE:                                                 
   E872  007EIC          3948                       LD    A,[ IX+FCB_BLOCK+3]            
   E676  D0BE20          3949                       CP    [IX+FCB_LAST_BLOCK+3]          
   E678  3B61E           3950                       JR    C,MORE  BLOCKS                 
   E87A  0D7E18          3951                       LD    A,[IX*FCB_BLOCK+2]             
   E870  DDBE IF         3952                       CP    [IX+FCB_  LAST  BLOCK+2]       
   E880  3816            3953                       JR    C,MORE_BLOCKS                  
   E882  D0TEIA          3954                       LD    A,[IX*FCB_BLOCK+    1]         
   E885  DDBE IE         3955                       CP    [IX*FCB_LAST_BLOCK+1]          
   E888  380E            3956                       JR    C,MORE_BLOCKS                  
   E88A  0D7E19          3957                       LD    A,[IX+FCB_  BLOCK]             
   E88D  DDBE 10         3958                       CP    IX*FCB_LAST_BLOCK]             
   E890  38606           3959                       JR    C,MORE  BLOCKS                 
                         3960  
                         3961  ; FALL   THROUGH   IF THIS   IS  THE  LAST   BLOCK  OF   THE  FILE.
                         3962  
   E892  78              3963                       LD    A,B                            ;LOOK   AT ENTRY   COUNTER
   E893  FE0!            3964                       CP    1                              
   E895  CAE99E          3965                       JP    2,TAPE_FULL                    ;ERROR   IF  NO  ENTRIES   LEFT   VACANT
                         3966  
   EA05                  3967  MORE                 BLOCKS                                
   EAE5  F06E11          3968                       LD    L,[1Y¥+DIR_MAX_LENGTH]         ;GET  THE  SIZE   OF  THE  HOLE
   E89B  FD6612          3969                       LD    H,[1¥+DIR_MAX_LENGTH+1]        
                         3970  
  E589E  DDCB186E        3971                       BIT   MODE _REMAINOER_BIT,[IX+FCB_       MODE] ; NEED   TO  ALLOCATE    REST   OF TAPE?
   E8A2  280C            3972                       JR    2,CHECK_HOLE   SIZE            ; NOPE
                         3973  
   EBA4  7C              3974                       LD    AH                             ; YUP,   CHECK   IF  THERE   ARE  ANY  BLOCKS    LEFT
   E8A5  B5              3975                       OR    L                              
   EBA6  CAEQ9E          3976                       JP    2,TAPE _FULL                   ; TAPE   FULL
                         3977  
  EBAQ9  22FE0C          3978                       LD    [BLOCKS  REQ],HL               ; NOT   FULL,  REQUEST    REST   OF  TAPE
   EBAC  D0CBIBAE        3979                       RES   MODE REMAINDER    BIT,[IX+TFCB    MODE] 
                         3980  
   EAB0                  3981  CHECK_HOLE           SIZE:                                
  E68B0  ED5BFE0C        3982                       LD    DE,[BLOCKS  REQ]               ;GET  THE  REQUESTED    SIZE
   E884  87              3983                       OR    A                              
   E8B5  ED52            3984                       SBC   HL,DE               -COMPARE   THEM 
   E8B7  DAE55E          3985                       JP    C,TAPE_FULL                    ;BRANCH   IF  THE  HOLE   IS  TOO  SMALL
   EBBA  22FEIA          3986                       LD    [NEW_HOLE_SIZE],HL             ;ELSE  SAVE   THE  RESULT
                         3987  
                         3988  
                         3989  ; ADD BLOCKS  REQ   TO DIR_START    BLOCK    TO  FIND  THE  HOLE‘S    NEW
                         3990  ; START  BLOCK.    NOTICE  HOW   STOOOPID    THE  Z80  IS  WITH   ADDITION!
   E8BD  21FE0C          3991                       LD    HL,BLOCKS REQ                  ;POINT    TO THE  NUMBER    TO  ADD
   EBC0  F07E00D         3992                       LD    A,[IY¥+DIR_START_BLOCK]        
   E8C3  86              3993                       ADD   A,[HL]                         
   E8C4  23              3994                       INC   HL                             
   E5C5  32FE16          3995                       LD    [NEW_HOLE  START],A            
   E8C8  FD7E0E          3996                       LD    A,[IV+DIR_START_BLOCK+1]                                                                                                ‘ 
   E5CB  BE              3997                       ADC   A,[HL]                         
   EBCC  23              3998                       INC   HL                             
   E8CD  32FE17          3999                       LD    [NEW _HOLE START+1],A          
   E8D0  F07E0F          4000                       LD    A,[IY+DIR_START_BLOCK+2]       
   E8D3  BE              4001                       ADC   A,[HL]                         
   E804  23              4002                       INC   HL                             
   E805  32FE18          4003                       LD    [NEW_HOLE  START+2],A          
   E808  FD7E10          4004                       LD    A,[IY#DIR_START_BLOCK+3]       
   E808  5E              4005                       ADC   A,[HL]                         
   E5DC  23              4006                       INC   HL                             
   E8DD  32FE19          4007                       LD    [NEW HOLE  START+3],A          
      :                  4008  
   E5E0  C5              4009                       PUSH  BC                             ;SAVE   ENTRY   COUNT   (IN  B)
                         4010  
   EBE1  CDE5BF          4011                       CALL  LOAD_NEW_ENTRY_INFO            
                         4012  
   E5E4  CI              4013                       POP   BC                             ;RESTORE    ENTRY   COUNT
                         4014  
   E5E5  C2E989          4015                       JP    NZ,MAKE  ERROR                 
                         4016  
   E5E8  DD6E21          4017                       LD    L,[IX+FCB_POINTER]             ;GET   CURRENT   POINTER
                         4018  
                         4019  
   E5EB  0D6622          4020                       LD    H,[1X+FCB_POINTER+1]           
   EBEE  11001A          4021                       LD    DE,OIR_ENT_LENGTH              ;GET  LENGTH   OF  AN  ENTRY
   E5F1  19              4022                       ADD   HL,DE                          ;ADVANCE    POINTER   TO  NEXT   ENTRY
   E6F2  007521          4023                       LD    [IX+¢FCB_POINTER],L            ;AND   SAVE  IT  AGAIN
   E8F5  007422          4024                       LD    [I1X+FCB_POINTER+1],H          
                         4025  
   E8F5  1044            4026                       DJNZ  NOT_END                        ;UUMP   IF  THERE  ARE   MORE   ENTRIES
                         4027  
                         4028  ;THIS LABEL  NOT   USED  IN THIS   ROUTINE,    NOT  DECLARED    GLOBAL
                         4029  ;REMOVED  BECAUSE   IT CONFLICTS    WITH   IDENTICAL    LABEL   ELSEWHERE
                         4030  ;WRITE_AGAIN:
   E5FA  DD7VE17         4031                       LD    A,[IX+FCB_ DEVICE]             ;GET   PARAMETERS    FROM   FCB
   E8FD  2AFE05          4032                       LD    HL,[BUF START]                 
   E900  DD5E19          4033                       LD    E,[1X+FCB_ BLOCK]              
   E903  DD561A          4034                       LD    D,[1X+FCB_BLOCK+1]             
   E906  DD4E1B          4035                       LD    C,[1X+FCB_  BLOCK+2]           
   E909  DD461C          4036                       LD    B,[1X+FCB_  BLOCK+3]           
                         4037  
   E50C  CDF1E6          4038                       CALL  WRITE BLOCK                    
                         4039  
   E50F  C2E989          4040                       JP    NZ,MAKE_ERROR                  ;NOPE,    A REAL  LIVE    ERROR
                         4041  
                         4042  
   E912                  4043  RESET_THE_POINTER:                                        
   E912  2AFE05          4044                       LD    HL,[BUF_START]                 ;RESET   THE  POINTER
   E915  007521          4045                       LD    [IX¢FCB_POINTER],L             
   E918  007422          4046                       LD    [ IX+FCB_POINTER+1],H          
                         4047  
   E91B  003419          4048                       INC   [IX¢FCB_BLOCK]                 ;INC   BLOCK   -- NO  CARRY  OUT
                         4049  
   E51E                  4050  TIMEOUT_IN_READ:                                          
   E91E  D07E17          4051                       LD    A,[IX+FCB_DEVICE]              ;GET  PARAMETERS    FROM   FCB
   E921  DD6E21          4052                       LD    L,[ IX+FCB_POINTER]            
   E924  006622          4053                       LD    H,[IX+FCB_POINTER+1]                                                                                                           ' 
   E927  D05E19          4054                       LD    E,[IX+FCB_BLOCK]               
   E92A  D056IA          4055                       LD    D,[IX+FCB_BLOCK+1]             
   E92D  DD4E18          4056                       LD    C,[ IX+FCB_BLOCK+2]            
   E930  0D461C          4057                       LD    B,[IX+FCB_BLOCK+3]             
   E933  CDF17B          4058                       CALL  READ BLOCK                     ;AND   READ  THE  NEXT  BLOCK
                         4059  
   E936  2051            4060                       JR    NZ,MAKE_ERROR                  ;  NOPE,  ERRORIIIII!
                         4061  
                         4062  
   E938  DD6E21          4063                       LD    L,[IX*FCB_POINTER]             ;GET  POINTER    INTO  IY  THE   LONG WAY
   E938  006622          4064                       LD    H,[IX+FCB_POINTER+1]           
                         4065  
   E93E                  4066  NOT_END:                                                  
   EQ3E  E5              4067                       PUSH  HL                             
   EQ3F  FDE1            4068                       POP   IY                  STAT       
                         4069  
                         4070  ;*
                         4071  ;*  STILL  TRYING    TO CALC  THE  NEW   START   ADOR
                         4072  ;=                    .
